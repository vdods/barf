// ///////////////////////////////////////////////////////////////////////////
// reflex_parser.trison by Victor Dods, created 2008/07/14
// ///////////////////////////////////////////////////////////////////////////
// Unless a different license was explicitly granted in writing by the
// copyright holder (Victor Dods), this software is freely distributable under
// the terms of the GNU General Public License, version 2.  Any works deriving
// from this work must also be released under the GNU GPL.  See the included
// file LICENSE for details.
// ///////////////////////////////////////////////////////////////////////////

%targets cpp


%target.cpp.header_filename "reflex_parser.hpp"
%target.cpp.implementation_filename "reflex_parser.cpp"

%target.cpp.default_max_allowable_lookahead_count "1"

%target.cpp.top_of_header_file %{
#if !defined(REFLEX_PARSER_HPP_)
#define REFLEX_PARSER_HPP_

#include "reflex.hpp"

#include "barf_commonlang_scanner.hpp"
#include "barf_message.hpp"
#include "reflex_ast.hpp"

namespace Barf {
namespace Ast {

class Base;

} // end of namespace Ast

namespace CommonLang {

struct TargetMap;

} // end of namespace CommonLang

namespace Regex {

struct RegularExpressionMap;

} // end of namespace Regex
} // end of namespace Barf

namespace Reflex {
%}
%target.cpp.class_name Parser
%target.cpp.bottom_of_class {
    FiLoc const &GetFiLoc () const { return m_scanner.GetFiLoc(); }
    CommonLang::TargetMap &GetTargetMap () { assert(m_target_map != NULL); return *m_target_map; }
    CommonLang::TargetMap *StealTargetMap ();

    bool ScannerDebugSpewIsEnabled () const { return m_scanner.DebugSpewIsEnabled(); }
    std::ostream *ScannerDebugSpewStream () { return m_scanner.DebugSpewStream(); }
    void SetScannerDebugSpewStream (std::ostream *debug_spew_stream) { m_scanner.SetDebugSpewStream(debug_spew_stream); }

    bool OpenFile (string const &input_filename);
    void OpenString (string const &input_string, string const &input_name, bool use_line_numbers = false);
    void OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers);

private:

    CommonLang::Scanner m_scanner;
    CommonLang::TargetMap *m_target_map;
    // The regex macro map in a member var, so that the reduction rule handler for
    // the state machine rules can use it.
    Regex::RegularExpressionMap *m_regex_macro_map;
    // This is a member var because THERE CAN BE ONLY ONE.
    StartWithStateMachineDirective *m_start_with_state_machine_directive;
}
%target.cpp.bottom_of_header_file%{
} // end of namespace Reflex

#endif // !defined(REFLEX_PARSER_HPP_)
%}


%target.cpp.top_of_implementation_file %{
#include <sstream>

#include "barf_optionsbase.hpp"
#include "barf_regex_ast.hpp"
#include "barf_regex_parser.hpp"

namespace Reflex {
%}
%target.cpp.constructor_actions {
    // TODO: Should this stuff go in reset_for_new_input_actions?  If so, then these should all be initialized to NULL.
    m_target_map = new CommonLang::TargetMap();
    m_regex_macro_map = new Regex::RegularExpressionMap();
    m_start_with_state_machine_directive = NULL;
}
%target.cpp.destructor_actions {
    // if the target map wasn't stolen by the user of this parser,
    // then make sure to delete it.
    delete m_target_map;
    m_target_map = NULL;

    delete m_regex_macro_map;
    m_regex_macro_map = NULL;

    delete m_start_with_state_machine_directive;
    m_start_with_state_machine_directive = NULL;
}
%target.cpp.top_of_parse_method_actions %{
    EmitExecutionMessage("starting reflex parser");
%}
%target.cpp.bottom_of_parse_method_actions %{
    if (parse_return_code == PRC_SUCCESS)
        EmitExecutionMessage("reflex parse was successful");
%}
%target.cpp.bottom_of_implementation_file %{
CommonLang::TargetMap *Parser::StealTargetMap ()
{
    assert(m_target_map != NULL);
    CommonLang::TargetMap *retval = m_target_map;
    m_target_map = NULL;
    return retval;
}

bool Parser::OpenFile (string const &input_filename)
{
    ResetForNewInput();
    EmitExecutionMessage("opening file \"" + input_filename + "\" for input");
    bool scanner_open_file_succeeded = m_scanner.OpenFile(input_filename);
    if (scanner_open_file_succeeded)
        EmitExecutionMessage("opened file \"" + input_filename + "\" successfully");
    return scanner_open_file_succeeded;
}

void Parser::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    ResetForNewInput();
    EmitExecutionMessage("using string " + input_name + " (" + StringLiteral(input_string) + ") for input");
    m_scanner.OpenString(input_string, input_name, use_line_numbers);
}

void Parser::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    ResetForNewInput();
    EmitExecutionMessage("using stream " + input_name + " for input");
    m_scanner.OpenUsingStream(input_stream, input_name, use_line_numbers);
}

} // end of namespace Reflex
%}


%target.cpp.token_data_type "Ast::Base *"
%target.cpp.token_data_default "NULL"
%target.cpp.custom_token_data_type_cast "Dsc"
%target.cpp.throw_away_token_actions {
    delete token_data;
}
%target.cpp.scan_actions {
    Ast::Base *lookahead_token_data = NULL;
    CommonLang::Scanner::Token::Type scanner_token_type = m_scanner.Scan(lookahead_token_data);
    assert(scanner_token_type >= 0);
    if (scanner_token_type < 0x100)
        return Token(Parser::Token::Id(scanner_token_type), lookahead_token_data);
    switch (scanner_token_type)
    {
        case CommonLang::Scanner::Token::BAD_END_OF_FILE:                  return Token(Terminal::END_, lookahead_token_data);
        case CommonLang::Scanner::Token::BAD_TOKEN:                        return Token(Terminal::BAD_TOKEN, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_CASE_INSENSITIVE:       return Token(Terminal::DIRECTIVE_CASE_INSENSITIVE, lookahead_token_data); 
        case CommonLang::Scanner::Token::DIRECTIVE_MACRO:                  return Token(Terminal::DIRECTIVE_MACRO, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_START_IN_STATE_MACHINE: return Token(Terminal::DIRECTIVE_START_IN_STATE_MACHINE, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_STATE_MACHINE:          return Token(Terminal::DIRECTIVE_STATE_MACHINE, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_TARGET:                 return Token(Terminal::DIRECTIVE_TARGET, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_TARGETS:                return Token(Terminal::DIRECTIVE_TARGETS, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_UNGREEDY:               return Token(Terminal::DIRECTIVE_UNGREEDY, lookahead_token_data);
        case CommonLang::Scanner::Token::DUMB_CODE_BLOCK:                  return Token(Terminal::DUMB_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::END_OF_FILE:                      return Token(Terminal::END_, lookahead_token_data);
        case CommonLang::Scanner::Token::END_PREAMBLE:                     return Token(Terminal::END_PREAMBLE, lookahead_token_data);
        case CommonLang::Scanner::Token::ID:                               return Token(Terminal::ID, lookahead_token_data);
        case CommonLang::Scanner::Token::NEWLINE:                          return Token(Terminal::NEWLINE, lookahead_token_data);
        case CommonLang::Scanner::Token::REGEX:                            return Token(Terminal::REGEX, lookahead_token_data);
        case CommonLang::Scanner::Token::STRICT_CODE_BLOCK:                return Token(Terminal::STRICT_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::STRING_LITERAL:                   return Token(Terminal::STRING_LITERAL, lookahead_token_data);

        case CommonLang::Scanner::Token::CHAR_LITERAL:
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_CODESPEC:
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE:
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_REQUIRED_DIRECTIVE:
        case CommonLang::Scanner::Token::DIRECTIVE_DEFAULT:
        case CommonLang::Scanner::Token::DIRECTIVE_DEFAULT_PARSE_NONTERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_DUMB_CODE_BLOCK:
        case CommonLang::Scanner::Token::DIRECTIVE_ERROR:
        case CommonLang::Scanner::Token::DIRECTIVE_ID:
        case CommonLang::Scanner::Token::DIRECTIVE_NONTERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_PREC:
        case CommonLang::Scanner::Token::DIRECTIVE_STRICT_CODE_BLOCK:
        case CommonLang::Scanner::Token::DIRECTIVE_STRING:
        case CommonLang::Scanner::Token::DIRECTIVE_TERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_TYPE:
            assert(lookahead_token_data != NULL);
            EmitError("unrecognized token encountered in targetspec", lookahead_token_data->GetFiLoc());
            delete lookahead_token_data;
            return Token(Terminal::BAD_TOKEN);

        default:
            assert(false && "this should never happen");
            if (lookahead_token_data != NULL)
                delete lookahead_token_data;
            return Token(Terminal::BAD_TOKEN);
    }
}
%target.cpp.reset_for_new_input_actions {
    m_scanner.ResetForNewInput();
}


%target.cpp.generate_debug_spew_code
%target.cpp.debug_spew_prefix {"Reflex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"}


%terminal BAD_TOKEN
%terminal DIRECTIVE_CASE_INSENSITIVE %type.cpp "Ast::ThrowAway *"
%terminal DIRECTIVE_MACRO %type.cpp "Ast::ThrowAway *"
%terminal DIRECTIVE_START_IN_STATE_MACHINE %type.cpp "Ast::ThrowAway *"
%terminal DIRECTIVE_STATE_MACHINE %type.cpp "Ast::ThrowAway *"
%terminal DIRECTIVE_TARGET %type.cpp "Ast::ThrowAway *"
%terminal DIRECTIVE_TARGETS %type.cpp "Ast::ThrowAway *"
%terminal DIRECTIVE_UNGREEDY %type.cpp "Ast::ThrowAway *"
%terminal DUMB_CODE_BLOCK %type.cpp "Ast::DumbCodeBlock *"
%terminal END_PREAMBLE %type.cpp "Ast::ThrowAway *"
%terminal ID %type.cpp "Ast::Id *"
%terminal NEWLINE
%terminal REGEX %type.cpp "Ast::String *"
%terminal STRICT_CODE_BLOCK %type.cpp "Ast::StrictCodeBlock *"
%terminal STRING_LITERAL %type.cpp "Ast::String *"
%terminal '.' ':' '|' ';'


%prec.left %default


%default_parse_nonterminal root

%%

// ///////////////////////////////////////////////////////////////////////////
// root rule
// ///////////////////////////////////////////////////////////////////////////

%nonterminal root %type.cpp "PrimarySource *"
:
    preamble_directives:preamble_directives
    END_PREAMBLE:throwaway
    state_machines:state_machine_map // This includes %end
    %target.cpp {
        assert(preamble_directives == NULL);
        assert(m_target_map != NULL);

        if (m_start_with_state_machine_directive == NULL)
            EmitError("missing %start_with_state_machine directive", throwaway->GetFiLoc());

        // set the TargetMap's primary source path
        m_target_map->SetSourcePath(m_scanner.InputName());
        // make sure the %start_with_state_machine directive value specifies a real state machine
        if (m_start_with_state_machine_directive != NULL &&
            state_machine_map->Element(m_start_with_state_machine_directive->m_state_machine_id->GetText()) == NULL)
        {
            EmitError(
                "undeclared state \"" + m_start_with_state_machine_directive->m_state_machine_id->GetText() + "\"",
                m_start_with_state_machine_directive->GetFiLoc()
            );
        }

        PrimarySource *primary_source =
            new PrimarySource(
                m_regex_macro_map,
                m_start_with_state_machine_directive,
                throwaway->GetFiLoc(),
                state_machine_map);

        // Nullify m_regex_macro_map and m_start_with_state_machine_directive so they're not
        // deleted upon parser destruction.
        m_regex_macro_map = NULL;
        m_start_with_state_machine_directive = NULL;

        delete throwaway;
        return primary_source;
    }
;

%nonterminal preamble_directives
:
    preamble_directives:preamble_directives preamble_directive:preamble_directive %target.cpp {
        assert(preamble_directives == NULL);
        assert(preamble_directive == NULL);
        return NULL;
    }
|
    %empty
    %target.cpp {
        return NULL;
    }
;

%nonterminal preamble_directive
:
    targets_directive:targets_directive at_least_one_newline
    %target.cpp {
        // The logic is already handled by the targets_directive (and subordinate) nonterminal reduction rule handlers.
        assert(targets_directive == NULL);
        return NULL;
    }
|
    target_directive:target_directive at_least_one_newline
    %target.cpp {
        assert(target_directive != NULL);
        assert(m_target_map != NULL);
        if (target_directive != NULL)
            m_target_map->SetTargetDirective(target_directive);
        return NULL;
    }
|
    macro_directive:macro at_least_one_newline
    %target.cpp {
        assert(m_regex_macro_map != NULL);

        if (macro != NULL)
        {
            m_regex_macro_map->Add(macro->m_macro_id->GetText(), macro->m_macro_regex);
            // macro is just a vehicle for m_macro_id and m_macro_regex, but can be thrown away now.
            macro->m_macro_id = NULL;
            macro->m_macro_regex = NULL;
            delete macro;
        }

        return NULL;
    }
|
    start_with_state_machine_directive:start_with_state_machine_directive at_least_one_newline
    %target.cpp {
        if (m_start_with_state_machine_directive != NULL)
        {
            EmitError("%start_with_state_machine already defined (previous definition at "+m_start_with_state_machine_directive->GetFiLoc().AsString()+')', start_with_state_machine_directive->GetFiLoc());
            delete start_with_state_machine_directive;
        }
        else
            m_start_with_state_machine_directive = start_with_state_machine_directive;
        return NULL;
    }
|
    at_least_one_newline
    %target.cpp {
        return NULL;
    }
|
    %error[%end|NEWLINE] at_least_one_newline
    %target.cpp {
        EmitError("parse error in preamble directives", m_scanner.GetFiLoc());
        return NULL;
    }
;

// ///////////////////////////////////////////////////////////////////////////
// targets directive rules
// ///////////////////////////////////////////////////////////////////////////

%nonterminal targets_directive
:
    DIRECTIVE_TARGETS:throwaway target_ids:target_map
    %target.cpp {
        assert(target_map != NULL);
        assert(target_map == m_target_map);
        delete throwaway;
        return NULL;
    }
|
    DIRECTIVE_TARGETS:throwaway %error[%end|NEWLINE]
    %target.cpp {
        assert(m_target_map != NULL);

        EmitError("parse error in directive %targets", throwaway->GetFiLoc());
        return NULL;
    }
;

%nonterminal target_ids
:
    target_ids:target_map ID:target_id
    %target.cpp {
        assert(target_map != NULL);
        assert(target_map == m_target_map);
        if (m_target_map->Element(target_id->GetText()) == NULL)
        {
            CommonLang::Target *target = new CommonLang::Target(target_id->GetText());
            m_target_map->Add(target_id->GetText(), target);
        }
        // otherwise delete the target_id since we don't need it
        else
        {
            EmitError("target \"" + target_id->GetText() + "\" already present");
        }
        delete target_id;
        return m_target_map;
    }
|
    %empty
    %target.cpp {
        assert(m_target_map != NULL);
        return m_target_map;
    }
;

// ///////////////////////////////////////////////////////////////////////////
// target directive rules
// ///////////////////////////////////////////////////////////////////////////

%nonterminal target_directive %type.cpp "CommonLang::TargetDirective *"
:
    DIRECTIVE_TARGET:throwaway '.' ID:target_id '.' ID:target_directive target_directive_param:param
    %target.cpp {
        delete throwaway;
        return new CommonLang::TargetDirective(target_id, target_directive, param);
    }
|
    DIRECTIVE_TARGET:throwaway '.' ID:target_id '.' ID:target_directive
    %target.cpp {
        delete throwaway;
        return new CommonLang::TargetDirective(target_id, target_directive, NULL);
    }
|
    DIRECTIVE_TARGET:throwaway '.' ID:target_id '.' ID:target_directive %error[%end|NEWLINE]
    %target.cpp {
        EmitError("parse error in parameter for directive %target." + target_id->GetText() + "." + target_directive->GetText(), throwaway->GetFiLoc());
        delete throwaway;
        delete target_id;
        delete target_directive;
        return NULL;
    }
|
    DIRECTIVE_TARGET:throwaway '.' ID:target_id %error[%end|NEWLINE]
    %target.cpp {
        EmitError("parse error in directive name for directive %target." + target_id->GetText(), throwaway->GetFiLoc());
        delete throwaway;
        delete target_id;
        return NULL;
    }
|
    DIRECTIVE_TARGET:throwaway %error[%end|NEWLINE]
    %target.cpp {
        EmitError("parse error in target name for directive %target", throwaway->GetFiLoc());
        delete throwaway;
        return NULL;
    }
;

%nonterminal target_directive_param %type.cpp "Ast::TextBase *"
:
    ID:value                    %target.cpp { return value; }
|   STRING_LITERAL:value        %target.cpp { return value; }
|   STRICT_CODE_BLOCK:value     %target.cpp { return value; }
|   DUMB_CODE_BLOCK:value       %target.cpp { return value; }
;

// ///////////////////////////////////////////////////////////////////////////
// macro directive rules
// ///////////////////////////////////////////////////////////////////////////

%nonterminal macro_directive %type.cpp "Macro *"
:
    DIRECTIVE_MACRO:throwaway ID:macro_id REGEX:macro_regex_string
    %target.cpp {
        FiLoc throwaway_filoc(throwaway->GetFiLoc());
        delete throwaway;

        Regex::Parser parser;
        if (GetOptions().IsVerbose(OptionsBase::V_REGEX_SCANNER))
            parser.SetScannerDebugSpewStream(&std::cerr);
        if (GetOptions().IsVerbose(OptionsBase::V_REGEX_PARSER))
            parser.SetDebugSpewStream(&std::cerr);
        istringstream in(macro_regex_string->GetText());
        parser.OpenUsingStream(&in, "%macro " + macro_regex_string->GetText(), false);
        try {
            Regex::RegularExpression *regex = NULL;
            if (parser.Parse(&regex, m_regex_macro_map) == Regex::Parser::PRC_SUCCESS)
            {
                if (GetOptions().IsVerbose(OptionsBase::V_REGEX_AST))
                    regex->TopLevelPrint(cerr);
                // Return a new Macro object upon success.
                return new Macro(macro_id, regex);
            }
            else
                EmitError("parse error in regular expression (" + macro_regex_string->GetText() + ")", throwaway_filoc);
        } catch (string const &exception) {
            EmitError(exception + " in regular expression (" + macro_regex_string->GetText() + ")", throwaway_filoc);
        }
        // Return NULL upon error.
        return NULL;
    }
|
    DIRECTIVE_MACRO:throwaway ID:macro_id %error[%end|NEWLINE]
    %target.cpp {
        EmitError("parse error in directive %macro " + macro_id->GetText(), throwaway->GetFiLoc());
        delete throwaway;
        delete macro_id;
        // Return NULL upon error.
        return NULL;
    }
|
    DIRECTIVE_MACRO:throwaway %error[%end|NEWLINE]
    %target.cpp {
        EmitError("parse error in directive %macro", throwaway->GetFiLoc());
        delete throwaway;
        // Return NULL upon error.
        return NULL;
    }
;

// ///////////////////////////////////////////////////////////////////////////
// start directive rule
// ///////////////////////////////////////////////////////////////////////////

%nonterminal start_with_state_machine_directive %type.cpp "StartWithStateMachineDirective *"
:
    DIRECTIVE_START_IN_STATE_MACHINE:throwaway ID:state_machine_id
    %target.cpp {
        delete throwaway;
        return new StartWithStateMachineDirective(state_machine_id);
    }
|
    DIRECTIVE_START_IN_STATE_MACHINE:throwaway %error[%end|NEWLINE]
    %target.cpp {
        EmitError("parse error in directive %start_with_state_machine", throwaway->GetFiLoc());
        delete throwaway;
        return NULL;
    }
;

// ///////////////////////////////////////////////////////////////////////////
// state machine rules
// ///////////////////////////////////////////////////////////////////////////

%nonterminal state_machines %type.cpp "StateMachineMap *"
:
    nonempty_state_machines:state_machine_map %end
    %target.cpp {
        assert(state_machine_map != NULL);
        return state_machine_map;
    }
|
    %end
    %target.cpp {
        return new StateMachineMap();
    }
;

%nonterminal nonempty_state_machines %type.cpp "StateMachineMap *"
:
    nonempty_state_machines:state_machine_map state_machine:state_machine
    %target.cpp {
        assert(state_machine_map != NULL);
        if (state_machine != NULL)
            state_machine_map->Add(state_machine->m_state_machine_id->GetText(), state_machine);
        return state_machine_map;
    }
|
    state_machine:state_machine
    %target.cpp {
        StateMachineMap *state_machine_map = new StateMachineMap();
        if (state_machine != NULL)
            state_machine_map->Add(state_machine->m_state_machine_id->GetText(), state_machine);
        return state_machine_map;
    }
;

%nonterminal state_machine %type.cpp "StateMachine *"
:
    DIRECTIVE_STATE_MACHINE:throwaway ID:state_machine_id state_machine_mode_flags_then_colon:mode_flags state_machine_rules_then_semicolon:rule_list
    %target.cpp {
        StateMachine *state_machine = new StateMachine(state_machine_id, rule_list, mode_flags->Value());
        delete throwaway;
        delete mode_flags;
        return state_machine;
    }
|
    DIRECTIVE_STATE_MACHINE:throwaway %error[%end|':'] state_machine_mode_flags_then_colon:mode_flags state_machine_rules_then_semicolon:rule_list ';'
    %target.cpp {
        EmitError("parse error in state machine id", throwaway->GetFiLoc());
        delete throwaway;
        delete mode_flags;
        delete rule_list;
        return NULL;
    }
;

%nonterminal state_machine_mode_flags_then_colon %type.cpp "Ast::UnsignedInteger *"
:
    state_machine_mode_flags:mode_flags ':'
    %target.cpp {
        return mode_flags;
    }
|
    %error[%end|':'] ':'
    %target.cpp {
        EmitError("parse error in state machine mode flags", m_scanner.GetFiLoc());
        return new Ast::UnsignedInteger(StateMachine::MF_NONE, FiLoc::ms_invalid);
    }
;

%nonterminal state_machine_mode_flags %type.cpp "Ast::UnsignedInteger *"
:
    state_machine_mode_flags:mode_flags state_machine_mode_flag:mode_flag
    %target.cpp {
        if (mode_flags->Value() & mode_flags->Value())
            EmitWarning("duplicate state machine mode flag", mode_flag->GetFiLoc());
        mode_flags->SetValue(mode_flags->Value() | mode_flag->Value());
        delete mode_flag;
        return mode_flags;
    }
|
    %empty
    %target.cpp {
        return new Ast::UnsignedInteger(StateMachine::MF_NONE, FiLoc::ms_invalid);
    }
;

%nonterminal state_machine_mode_flag %type.cpp "Ast::UnsignedInteger *"
:
    DIRECTIVE_CASE_INSENSITIVE:throwaway
    %target.cpp {
        Ast::UnsignedInteger *mode_flag = new Ast::UnsignedInteger(StateMachine::MF_CASE_INSENSITIVE, throwaway->GetFiLoc());
        delete throwaway;
        return mode_flag;
    }
|
    DIRECTIVE_UNGREEDY:throwaway
    %target.cpp {
        Ast::UnsignedInteger *mode_flag = new Ast::UnsignedInteger(StateMachine::MF_UNGREEDY, throwaway->GetFiLoc());
        delete throwaway;
        return mode_flag;
    }
|
    %error[%end|DIRECTIVE_CASE_INSENSITIVE|DIRECTIVE_UNGREEDY|':']
    %target.cpp {
        EmitError("parse error in state machine mode flag", m_scanner.GetFiLoc());
        return new Ast::UnsignedInteger(StateMachine::MF_NONE, FiLoc::ms_invalid);
    }
;

%nonterminal state_machine_rules_then_semicolon %type.cpp "RuleList *"
:
    rule_list:rule_list ';'
    %target.cpp {
        return rule_list;
    }
|
    %error[%end|';'] ';'
    %target.cpp {
        EmitError("parse error in state machine rule list", m_scanner.GetFiLoc());
        return new RuleList();
    }
;

%nonterminal rule_list %type.cpp "RuleList *"
:
    rule_list:rule_list '|' rule:rule
    %target.cpp {
        rule_list->Append(rule);
        return rule_list;
    }
|
    rule:rule
    %target.cpp {
        RuleList *rule_list = new RuleList();
        rule_list->Append(rule);
        return rule_list;
    }
;

%nonterminal rule %type.cpp "Rule *"
:
    REGEX:regex_string rule_handlers:rule_handler_map
    %target.cpp {
        assert(m_regex_macro_map != NULL);

        // parse the rule regex
        Regex::RegularExpression *regex = NULL;
        {
            Regex::Parser parser;
            if (GetOptions().IsVerbose(OptionsBase::V_REGEX_SCANNER))
                parser.SetScannerDebugSpewStream(&std::cerr);
            if (GetOptions().IsVerbose(OptionsBase::V_REGEX_PARSER))
                parser.SetDebugSpewStream(&std::cerr);
            istringstream in(regex_string->GetText());
            parser.OpenUsingStream(&in, regex_string->GetText(), false);
            try {
                if (parser.Parse(&regex, m_regex_macro_map) == Regex::Parser::PRC_SUCCESS)
                {
                    if (GetOptions().IsVerbose(OptionsBase::V_REGEX_AST))
                        regex->TopLevelPrint(cerr);
                }
                else
                {
                    EmitError(
                        "parse error in regular expression (" + regex_string->GetText() + ")",
                        regex_string->GetFiLoc());
                    regex = new Regex::RegularExpression();
                }
            } catch (string const &exception) {
                EmitError(
                    exception + " in regular expression (" + regex_string->GetText() + ")",
                    regex_string->GetFiLoc());
                regex = new Regex::RegularExpression();
            }
            assert(regex != NULL);
        }

        // enforcement of presence of rule handlers for all targets
        assert(m_target_map != NULL);
        for (CommonLang::TargetMap::const_iterator it = m_target_map->begin(),
                                                           it_end = m_target_map->end();
             it != it_end;
             ++it)
        {
            string const &target_id = it->first;
            if (rule_handler_map->Element(target_id) == NULL)
            {
                EmitWarning(
                    "missing rule handler for target \"" + target_id + "\"",
                    regex_string->GetFiLoc());
                // add a blank code block for the rule handler's missing target
                rule_handler_map->Add(
                    target_id,
                    new CommonLang::RuleHandler(
                        new Ast::Id(target_id, FiLoc::ms_invalid),
                        new Ast::StrictCodeBlock(FiLoc::ms_invalid)));
                assert(rule_handler_map->Element(target_id) != NULL);
            }
        }

        Rule *rule = new Rule(regex_string->GetText(), regex, rule_handler_map);
        delete regex_string;
        return rule;
    }
;

%nonterminal rule_handlers %type.cpp "CommonLang::RuleHandlerMap *"
:
    rule_handlers:rule_handler_map rule_handler:rule_handler
    %target.cpp {
        if (rule_handler != NULL)
            rule_handler_map->Add(rule_handler->m_target_id->GetText(), rule_handler);
        return rule_handler_map;
    }
|
    %empty
    %target.cpp {
        return new CommonLang::RuleHandlerMap();
    }
;

%nonterminal rule_handler %type.cpp "CommonLang::RuleHandler *"
:
    DIRECTIVE_TARGET:throwaway '.' ID:target_id any_type_of_code_block:code_block
    %target.cpp {
        delete throwaway;
        assert(m_target_map != NULL);
        if (m_target_map->Element(target_id->GetText()) == NULL)
            EmitWarning(
                "undeclared target \"" + target_id->GetText() + "\"",
                target_id->GetFiLoc());
        return new CommonLang::RuleHandler(target_id, code_block);
    }
|
    DIRECTIVE_TARGET:throwaway %error[%end|DUMB_CODE_BLOCK|STRICT_CODE_BLOCK] any_type_of_code_block:code_block
    %target.cpp {
        assert(m_target_map != NULL);
        EmitError("parse error in target id after directive %target", throwaway->GetFiLoc());
        delete throwaway;
        delete code_block;
        return NULL;
    }
|
    DIRECTIVE_TARGET:throwaway %error[%end|'|'|';']
    %target.cpp {
        assert(m_target_map != NULL);
        EmitError("parse error in directive %target", throwaway->GetFiLoc());
        delete throwaway;
        return NULL;
    }
|
    %error[%end|DUMB_CODE_BLOCK|STRICT_CODE_BLOCK] any_type_of_code_block:code_block
    %target.cpp {
        assert(m_target_map != NULL);
        EmitError("missing directive %target before rule handler code block", code_block->GetFiLoc());
        delete code_block;
        return NULL;
    }
;

// ///////////////////////////////////////////////////////////////////////////
// misc rules
// ///////////////////////////////////////////////////////////////////////////

%nonterminal any_type_of_code_block %type.cpp "Ast::CodeBlock *"
:
    DUMB_CODE_BLOCK:dumb_code_block %target.cpp { return dumb_code_block; }
|
    STRICT_CODE_BLOCK:strict_code_block %target.cpp { return strict_code_block; }
;

%nonterminal at_least_one_newline
:
    at_least_one_newline NEWLINE %target.cpp { return NULL; }
|
    NEWLINE %target.cpp { return NULL; }
;
