// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// reflex_parser.cpp generated by trison
// from reflex_parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "reflex_parser.hpp"


#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 72 "reflex_parser.trison"

#include <sstream>

#include "barf_optionsbase.hpp"
#include "barf_regex_ast.hpp"
#include "barf_regex_parser.hpp"

namespace Reflex {

#line 23 "reflex_parser.cpp"

Parser::Parser ()
{
    DebugSpew(false);


#line 81 "reflex_parser.trison"

    m_target_map = NULL;
    m_regex_macro_map = NULL;

#line 35 "reflex_parser.cpp"
}

Parser::~Parser ()
{
    // clean up dynamically allocated memory.
    ClearStack_();
    ClearLookaheadQueue_();



#line 85 "reflex_parser.trison"


#line 49 "reflex_parser.cpp"
}

void Parser::ResetForNewInput ()
{
    // clean up stuff that might be hanging around from the last parse's input.
    ClearStack_();
    ClearLookaheadQueue_();
}

Parser::ParserReturnCode Parser::Parse (Ast::Base * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{
    return Parse_(return_token, nonterminal_to_parse);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

Parser::ParserReturnCode Parser::Parse_ (Ast::Base * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 75 "reflex_parser.cpp"
 << " starting parse" << std::endl;)

    ParserReturnCode parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
    *return_token = NULL;

    // make sure all our structures are empty and variables initialized.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();
    m_is_in_error_panic_ = false;

    // push the initial state of the DPDA.
    assert((false
           || nonterminal_to_parse == ParseNonterminal::any_type_of_code_block
           || nonterminal_to_parse == ParseNonterminal::at_least_one_newline
           || nonterminal_to_parse == ParseNonterminal::at_least_zero_newlines
           || nonterminal_to_parse == ParseNonterminal::macro_directives
           || nonterminal_to_parse == ParseNonterminal::root
           || nonterminal_to_parse == ParseNonterminal::rule
           || nonterminal_to_parse == ParseNonterminal::rule_handler
           || nonterminal_to_parse == ParseNonterminal::rule_handlers
           || nonterminal_to_parse == ParseNonterminal::rule_list
           || nonterminal_to_parse == ParseNonterminal::scanner_mode
           || nonterminal_to_parse == ParseNonterminal::scanner_mode_rules
           || nonterminal_to_parse == ParseNonterminal::scanner_modes
           || nonterminal_to_parse == ParseNonterminal::start_in_scanner_mode_directive
           || nonterminal_to_parse == ParseNonterminal::target_directive
           || nonterminal_to_parse == ParseNonterminal::target_directive_param
           || nonterminal_to_parse == ParseNonterminal::target_directives
           || nonterminal_to_parse == ParseNonterminal::target_ids
           || nonterminal_to_parse == ParseNonterminal::targets_directive
           ) && "invalid nonterminal_to_parse");
    m_stack_.push_back(StackElement_(nonterminal_to_parse, NULL));
    // main parser loop
    while (true)
    {
        if (m_is_in_error_panic_)
        {
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 118 "reflex_parser.cpp"
 << " begin error panic" << std::endl;)

            // the special Terminal::END_ can not be eaten by error panic.
            if (Lookahead_(0).m_id == Terminal::END_)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 127 "reflex_parser.cpp"
 << " end error panic; abort (error panic can't eat Terminal::END_)" << std::endl;)
                // parser_return_code_ and return_token are already appropriately
                // set, so just break out of the main loop.
                break;
            }

            while (true)
            {
                // get the current state (top of the stack)
                assert(!m_stack_.empty());
                TrisonCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
                assert(current_state_index < ms_state_count_);
                State_ const &current_state = ms_state_table_[current_state_index];
                TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr);)

                // check if the current state accepts ERROR_ (only need to check the
                // non-default transitions, since the default transition can't be a shift).
                bool accepts_error = false;
                for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                       *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                     transition != transition_end;
                     ++transition)
                {
                    if (transition->m_type == Transition_::TT_SHIFT && transition->m_lookahead_count == 1 && *transition->m_lookahead_sequence == Terminal::ERROR_)
                    {
                        accepts_error = true;
                        break;
                    }
                }

                if (accepts_error)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 163 "reflex_parser.cpp"
 << " end error panic; success (current state accepts ERROR_ token)" << std::endl;)
                    // if the current state accepts error, throw away the first lookahead data
                    // (but don't pop the front of the lookahead queue).  then clear the thrown-
                    // away token data, and set the token id to ERROR_.
                    assert(!m_lookahead_queue_.empty());
                    ThrowAwayToken_(m_lookahead_queue_[0].m_data);
                    m_lookahead_queue_[0].m_id = Terminal::ERROR_;
                    m_lookahead_queue_[0].m_data = NULL;
                    m_is_in_error_panic_ = false;
                    break;
                }
                else
                {
                    if (m_stack_.size() > 1)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 182 "reflex_parser.cpp"
 << " continue error panic; pop stack (current state doesn't accept ERROR_ token)" << std::endl;)
                    }
                    else
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 190 "reflex_parser.cpp"
 << " end error panic; abort (stack is empty)" << std::endl;)
                    }
                    // otherwise throw away the data at the top of the stack, and pop the stack.
                    // then if the stack is empty, an unhandled parse error occurred.
                    ThrowAwayToken_(m_stack_.rbegin()->m_token_data);
                    m_stack_.resize(m_stack_.size()-1);
                    if (m_stack_.empty())
                    {
                        // parser_return_code_ and return_token are already appropriately
                        // set, so just break out of the inner loop.
                        break;
                    }
                }
            }

            // if we're still in error panic, then this indicates that we bottomed-
            // out the stack and it's an unhandled parse error, so break from the
            // main loop.
            if (m_is_in_error_panic_)
                break;
        }
        else // !m_is_in_error_panic_
        {
            // get the current state (top of the stack)
            assert(!m_stack_.empty());
            TrisonCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
            assert(current_state_index < ms_state_count_);
            State_ const &current_state = ms_state_table_[current_state_index];
            TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr);)

            // TODO -- binary search for faster transition matching?

            // loop through the current state's transitions and see if any match
            bool transition_exercised = false;
            TrisonCpp_::Uint32 tested_lookahead_count = 0;
            for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                   *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                transition != transition_end;
                ++transition)
            {
                // the non-default transitions can only be TT_REDUCE or TT_SHIFT
                assert(transition->m_type == Transition_::TT_REDUCE || transition->m_type == Transition_::TT_SHIFT);

                // check if the lookaheads match those of this transition.
                bool lookahead_sequence_matched = true;
                for (TrisonCpp_::Uint32 i = 0; i < transition->m_lookahead_count; ++i)
                {
                    if (Lookahead_(i).m_id != transition->m_lookahead_sequence[i])
                    {
                        lookahead_sequence_matched = false;
                        break;
                    }
                    else
                    {
                        if (i+1 > tested_lookahead_count)
                            tested_lookahead_count = i+1;
                    }
                }

                // if all the lookaheads matched, then exercise this transition,
                // and break out of this inner (transition) loop.
                if (lookahead_sequence_matched)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 257 "reflex_parser.cpp"
 << " current (relevant) lookahead(s):";)
                    for (TrisonCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i);)
                    }
                    TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl;)

                    ExerciseTransition_(*transition);
                    transition_exercised = true;
                    break;
                }
            }

            // if no transition was exercised, then exercise the default transition
            if (!transition_exercised)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 277 "reflex_parser.cpp"
 << " current (relevant) lookahead(s):";)
                for (TrisonCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i);)
                }
                TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl;)

                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 288 "reflex_parser.cpp"
 << " exercising default transition" << std::endl;)
                // exercise the default transition.  a return value of true indicates
                // that the parser should return.
                if (ExerciseTransition_(*current_state.m_transition_table))
                {
                    // the token (data) on the top of the stack is the return token.
                    // set parser_return_code_ and assign the top stack token data to
                    // *return_token and then break out of the main parser loop.
                    assert(m_stack_[0].m_state_index == TrisonCpp_::Uint32(nonterminal_to_parse));
                    assert(m_stack_.size() == 2);
                    parser_return_code_ = PRC_SUCCESS;
                    *return_token = m_stack_.rbegin()->m_token_data;
                    // take the return token out of the stack, so it's not thrown away
                    // when we clear the stack later.
                    m_stack_.rbegin()->m_token_data = NULL;
                    break;
                }
            }
        }
    }

    // clear the stack, because we won't need it for the next parse.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();

    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_SUCCESS) std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 319 "reflex_parser.cpp"
 << " Parse() is returning PRC_SUCCESS" << std::endl;)
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_UNHANDLED_PARSE_ERROR) std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 324 "reflex_parser.cpp"
 << " Parse() is returning PRC_UNHANDLED_PARSE_ERROR" << std::endl;)

    return parser_return_code_;
}

void Parser::ThrowAwayToken_ (Token::Data &token_data) throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 335 "reflex_parser.cpp"
 << " executing throw-away-token actions" << std::endl;)


#line 101 "reflex_parser.trison"

    delete token_data;

#line 343 "reflex_parser.cpp"
}

Parser::Token Parser::Scan_ () throw()
{

#line 104 "reflex_parser.trison"

    Ast::Base *lookahead_token_data = NULL;
    CommonLang::Scanner::Token::Type scanner_token_type = m_scanner.Scan(&lookahead_token_data);
    assert(scanner_token_type >= 0);
    if (scanner_token_type < 0x100)
        return Token(Parser::Token::Id(scanner_token_type), lookahead_token_data);
    switch (scanner_token_type)
    {
        case CommonLang::Scanner::Token::BAD_END_OF_FILE:                 return Token(Terminal::END_, lookahead_token_data);
        case CommonLang::Scanner::Token::BAD_TOKEN:                       return Token(Terminal::BAD_TOKEN, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_MACRO:                 return Token(Terminal::DIRECTIVE_MACRO, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_START_IN_SCANNER_MODE: return Token(Terminal::DIRECTIVE_START_IN_SCANNER_MODE, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_STATE:                 return Token(Terminal::DIRECTIVE_STATE, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_TARGET:                return Token(Terminal::DIRECTIVE_TARGET, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_TARGETS:               return Token(Terminal::DIRECTIVE_TARGETS, lookahead_token_data);
        case CommonLang::Scanner::Token::DUMB_CODE_BLOCK:                 return Token(Terminal::DUMB_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::END_OF_FILE:                     return Token(Terminal::END_, lookahead_token_data);
        case CommonLang::Scanner::Token::END_PREAMBLE:                    return Token(Terminal::END_PREAMBLE, lookahead_token_data);
        case CommonLang::Scanner::Token::ID:                              return Token(Terminal::ID, lookahead_token_data);
        case CommonLang::Scanner::Token::NEWLINE:                         return Token(Terminal::NEWLINE, lookahead_token_data);
        case CommonLang::Scanner::Token::REGEX:                           return Token(Terminal::REGEX, lookahead_token_data);
        case CommonLang::Scanner::Token::STRICT_CODE_BLOCK:               return Token(Terminal::STRICT_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::STRING_LITERAL:                  return Token(Terminal::STRING_LITERAL, lookahead_token_data);

        case CommonLang::Scanner::Token::CHAR_LITERAL:
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_CODESPEC:
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE:
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_REQUIRED_DIRECTIVE:
        case CommonLang::Scanner::Token::DIRECTIVE_DEFAULT:
        case CommonLang::Scanner::Token::DIRECTIVE_DEFAULT_PARSE_NONTERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_DUMB_CODE_BLOCK:
        case CommonLang::Scanner::Token::DIRECTIVE_ERROR:
        case CommonLang::Scanner::Token::DIRECTIVE_ID:
        case CommonLang::Scanner::Token::DIRECTIVE_NONTERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_PREC:
        case CommonLang::Scanner::Token::DIRECTIVE_STRICT_CODE_BLOCK:
        case CommonLang::Scanner::Token::DIRECTIVE_STRING:
        case CommonLang::Scanner::Token::DIRECTIVE_TERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_TYPE:
            assert(lookahead_token_data != NULL);
            EmitError("unrecognized token encountered in targetspec", lookahead_token_data->GetFiLoc());
            delete lookahead_token_data;
            return Token(Terminal::BAD_TOKEN);

        default:
            assert(false && "this should never happen");
            if (lookahead_token_data != NULL)
                delete lookahead_token_data;
            return Token(Terminal::BAD_TOKEN);
    }

#line 401 "reflex_parser.cpp"
}

void Parser::ClearStack_ () throw()
{
    if (m_stack_.empty())
        return; // nothing to do

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 412 "reflex_parser.cpp"
 << " clearing the stack" << std::endl;)

    Stack_::iterator it = m_stack_.begin();
    Stack_::iterator it_end = m_stack_.end();
    // skip the bottom of the stack, since it
    // contains the start state and no token data.
    ++it;
    for ( ; it != it_end; ++it)
        ThrowAwayToken_(it->m_token_data);
    m_stack_.clear();
}

void Parser::ClearLookaheadQueue_ () throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 430 "reflex_parser.cpp"
 << " clearing the lookahead queue" << std::endl;)

    for (LookaheadQueue_::iterator it = m_lookahead_queue_.begin(), it_end = m_lookahead_queue_.end(); it != it_end; ++it)
        ThrowAwayToken_(it->m_data);
    m_lookahead_queue_.clear();
}

Parser::Token const &Parser::Lookahead_ (LookaheadQueue_::size_type index) throw()
{
    while (index >= m_lookahead_queue_.size())
    {
        m_lookahead_queue_.push_back(Scan_());

        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 447 "reflex_parser.cpp"
 << " pushed " << *m_lookahead_queue_.rbegin() << " onto back of lookahead queue" << std::endl;)
    }
    return m_lookahead_queue_[index];
}

bool Parser::ExerciseTransition_ (Transition_ const &transition)
{
    switch (transition.m_type)
    {
        case Transition_::TT_REDUCE:
        {
            // execute the indicated reduction rule, push the returned Token
            // onto the front of the lookahead queue, then pop the corresponding
            // number of stack elements.
            assert(transition.m_data < ms_rule_count_);
            Rule_ const &rule = ms_rule_table_[transition.m_data];
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 467 "reflex_parser.cpp"
 << " REDUCE " << rule.m_description << std::endl;)
            assert(m_stack_.size() > rule.m_token_count);
            m_lookahead_queue_.push_front(
                Token(
                    rule.m_reduction_nonterminal_token_id,
                    ExecuteReductionRule_(transition.m_data)));
            m_stack_.resize(m_stack_.size() - rule.m_token_count);
            assert(rule.m_reduction_nonterminal_token_id < ms_token_name_count_);
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 479 "reflex_parser.cpp"
 << " pushed " << Token(rule.m_reduction_nonterminal_token_id) << " onto front of lookahead queue" << std::endl;)
            return false; // indicating the parser isn't returning
        }

        case Transition_::TT_RETURN:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 488 "reflex_parser.cpp"
 << " RETURN" << std::endl;)
            return true; // indicating the parser is returning

        case Transition_::TT_SHIFT:
            // push the state (indicated by the shift transition) and token data
            // onto the stack, then pop the corresponding lookahead.
            assert(transition.m_data < ms_state_count_);
            assert(Lookahead_(0).m_id < ms_token_name_count_); // at this point, we're past a possible
                                                               // client error, so asserting here is ok.
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 501 "reflex_parser.cpp"
 << " SHIFT " << Lookahead_(0) << std::endl;)
            m_stack_.push_back(StackElement_(transition.m_data, Lookahead_(0).m_data));
            m_lookahead_queue_.pop_front();
            return false; // indicating the parser isn't returning

        case Transition_::TT_ERROR_PANIC:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 511 "reflex_parser.cpp"
 << " ERROR_PANIC" << std::endl;)
            m_is_in_error_panic_ = true;
            return false; // indicating the parser isn't returning

        default:
            assert(false && "invalid transition type (bad state machine, or memory corruption)");
            return false; // indicating the parser isn't returning
    }
}

Parser::Token::Data Parser::ExecuteReductionRule_ (TrisonCpp_::Uint32 const rule_index_)
{
    assert(rule_index_ < ms_rule_count_);
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 528 "reflex_parser.cpp"
 << " executing reduction rule " << rule_index_ << std::endl;)
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return NULL;

        case 0:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            CommonLang::TargetMap * target_map(Dsc<CommonLang::TargetMap *>(m_stack_[m_stack_.size()-6].m_token_data));
            Regex::RegularExpressionMap * regular_expression_map(Dsc<Regex::RegularExpressionMap *>(m_stack_[m_stack_.size()-4].m_token_data));
            StartInScannerModeDirective * start_in_scanner_mode_directive(Dsc<StartInScannerModeDirective *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-2].m_token_data));
            ScannerModeMap * scanner_mode_map(Dsc<ScannerModeMap *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 195 "reflex_parser.trison"

        assert(m_target_map != NULL);
        assert(target_map == m_target_map);

        // set the TargetMap's primary source path
        target_map->SetSourcePath(m_scanner.GetInputName());
        // make sure the %start_in_scanner_mode directive value specifies a real scanner mode
        if (start_in_scanner_mode_directive != NULL &&
            scanner_mode_map->GetElement(start_in_scanner_mode_directive->m_scanner_mode_id->GetText()) == NULL)
        {
            EmitError(
                "undeclared state \"" + start_in_scanner_mode_directive->m_scanner_mode_id->GetText() + "\"",
                start_in_scanner_mode_directive->GetFiLoc());
        }

        PrimarySource *primary_source =
            new PrimarySource(
                target_map,
                regular_expression_map,
                start_in_scanner_mode_directive,
                throwaway->GetFiLoc(),
                scanner_mode_map);
        delete throwaway;
        return primary_source;
    
#line 571 "reflex_parser.cpp"
            break;
        }

        case 1:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));
            CommonLang::TargetMap * target_map(Dsc<CommonLang::TargetMap *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 229 "reflex_parser.trison"

        assert(m_target_map == NULL);
        m_target_map = target_map;
        delete throwaway;
        return target_map;
    
#line 588 "reflex_parser.cpp"
            break;
        }

        case 2:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 237 "reflex_parser.trison"

        assert(m_target_map == NULL);
        m_target_map = new CommonLang::TargetMap();
        return m_target_map;
    
#line 602 "reflex_parser.cpp"
            break;
        }

        case 3:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 244 "reflex_parser.trison"

        assert(m_target_map == NULL);
        EmitError("parse error in directive %targets", throwaway->GetFiLoc());
        m_target_map = new CommonLang::TargetMap();
        return m_target_map;
    
#line 618 "reflex_parser.cpp"
            break;
        }

        case 4:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            CommonLang::TargetMap * target_map(Dsc<CommonLang::TargetMap *>(m_stack_[m_stack_.size()-2].m_token_data));
            Ast::Id * target_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 255 "reflex_parser.trison"

        CommonLang::Target *target = new CommonLang::Target(target_id->GetText());
        target->EnableCodeGeneration();
        target_map->Add(target_id->GetText(), target);
        return target_map;
    
#line 635 "reflex_parser.cpp"
            break;
        }

        case 5:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 263 "reflex_parser.trison"

        assert(m_target_map == NULL);
        return new CommonLang::TargetMap();
    
#line 648 "reflex_parser.cpp"
            break;
        }

        case 6:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            CommonLang::TargetDirective * target_directive(Dsc<CommonLang::TargetDirective *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 276 "reflex_parser.trison"

        assert(m_target_map != NULL);
        if (target_directive != NULL)
            m_target_map->AddTargetDirective(target_directive);
        return NULL;
    
#line 664 "reflex_parser.cpp"
            break;
        }

        case 7:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 284 "reflex_parser.trison"

        if (m_target_map == NULL)
            m_target_map = new CommonLang::TargetMap();
        return NULL;
    
#line 678 "reflex_parser.cpp"
            break;
        }

        case 8:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-7].m_token_data));
            Ast::Id * target_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * target_directive(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::TextBase * param(Dsc<Ast::TextBase *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 294 "reflex_parser.trison"

        delete throwaway;
        return new CommonLang::TargetDirective(target_id, target_directive, param);
    
#line 695 "reflex_parser.cpp"
            break;
        }

        case 9:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-7].m_token_data));
            Ast::Id * target_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * target_directive(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 300 "reflex_parser.trison"

        EmitError("parse error in parameter for directive %target." + target_id->GetText() + "." + target_directive->GetText(), throwaway->GetFiLoc());
        delete throwaway;
        delete target_id;
        delete target_directive;
        return NULL;
    
#line 714 "reflex_parser.cpp"
            break;
        }

        case 10:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * target_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 309 "reflex_parser.trison"

        EmitError("parse error in directive name for directive %target." + target_id->GetText(), throwaway->GetFiLoc());
        delete throwaway;
        delete target_id;
        return NULL;
    
#line 731 "reflex_parser.cpp"
            break;
        }

        case 11:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 317 "reflex_parser.trison"

        EmitError("parse error in target name for directive %target", throwaway->GetFiLoc());
        delete throwaway;
        return NULL;
    
#line 746 "reflex_parser.cpp"
            break;
        }

        case 12:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * value(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 326 "reflex_parser.trison"
 return value; 
#line 757 "reflex_parser.cpp"
            break;
        }

        case 13:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::String * value(Dsc<Ast::String *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 327 "reflex_parser.trison"
 return value; 
#line 768 "reflex_parser.cpp"
            break;
        }

        case 14:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::StrictCodeBlock * value(Dsc<Ast::StrictCodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 328 "reflex_parser.trison"
 return value; 
#line 779 "reflex_parser.cpp"
            break;
        }

        case 15:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::DumbCodeBlock * value(Dsc<Ast::DumbCodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 329 "reflex_parser.trison"
 return value; 
#line 790 "reflex_parser.cpp"
            break;
        }

        case 16:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 330 "reflex_parser.trison"
 return NULL; 
#line 800 "reflex_parser.cpp"
            break;
        }

        case 17:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Regex::RegularExpressionMap * regular_expression_map(Dsc<Regex::RegularExpressionMap *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-4].m_token_data));
            Ast::Id * macro_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::String * macro_regex_string(Dsc<Ast::String *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 340 "reflex_parser.trison"

        Regex::Parser parser;
        parser.ScannerDebugSpew(g_options->GetIsVerbose(OptionsBase::V_REGEX_SCANNER));
        if (g_options->GetIsVerbose(OptionsBase::V_REGEX_PARSER))
            parser.SetDebugSpewLevel(2);
        istringstream in(macro_regex_string->GetText());
        parser.OpenUsingStream(&in, "%macro " + macro_regex_string->GetText(), false);
        try {
            Regex::RegularExpression *regex = NULL;
            if (parser.Parse(&regex, regular_expression_map) == Regex::Parser::PRC_SUCCESS)
            {
                if (g_options->GetIsVerbose(OptionsBase::V_REGEX_AST))
                    regex->Print(cerr);
                regular_expression_map->Add(macro_id->GetText(), regex);
            }
            else
                EmitError("parse error in regular expression (" + macro_regex_string->GetText() + ")", throwaway->GetFiLoc());
        } catch (string const &exception) {
            EmitError(exception + " in regular expression (" + macro_regex_string->GetText() + ")", throwaway->GetFiLoc());
        }
        delete throwaway;
        delete macro_id;
        delete macro_regex_string;
        return regular_expression_map;
    
#line 838 "reflex_parser.cpp"
            break;
        }

        case 18:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 367 "reflex_parser.trison"

        // we save the regex macro map in a member var, so that the reduction
        // rule handler for the scanner mode rules can use it.
        m_regex_macro_map = new Regex::RegularExpressionMap();
        return m_regex_macro_map;
    
#line 853 "reflex_parser.cpp"
            break;
        }

        case 19:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Regex::RegularExpressionMap * regular_expression_map(Dsc<Regex::RegularExpressionMap *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-4].m_token_data));
            Ast::Id * macro_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 375 "reflex_parser.trison"

        EmitError("parse error in directive %macro " + macro_id->GetText(), throwaway->GetFiLoc());
        delete throwaway;
        delete macro_id;
        return regular_expression_map;
    
#line 871 "reflex_parser.cpp"
            break;
        }

        case 20:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Regex::RegularExpressionMap * regular_expression_map(Dsc<Regex::RegularExpressionMap *>(m_stack_[m_stack_.size()-4].m_token_data));
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 383 "reflex_parser.trison"

        EmitError("parse error in directive %macro", throwaway->GetFiLoc());
        delete throwaway;
        return regular_expression_map;
    
#line 887 "reflex_parser.cpp"
            break;
        }

        case 21:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::Id * scanner_mode_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 397 "reflex_parser.trison"

        delete throwaway;
        return new StartInScannerModeDirective(scanner_mode_id);
    
#line 902 "reflex_parser.cpp"
            break;
        }

        case 22:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 403 "reflex_parser.trison"

        EmitError("parse error in directive %start_in_scanner_mode", throwaway->GetFiLoc());
        delete throwaway;
        return NULL;
    
#line 917 "reflex_parser.cpp"
            break;
        }

        case 23:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            ScannerModeMap * scanner_mode_map(Dsc<ScannerModeMap *>(m_stack_[m_stack_.size()-2].m_token_data));
            ScannerMode * scanner_mode(Dsc<ScannerMode *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 417 "reflex_parser.trison"

        if (scanner_mode != NULL)
            scanner_mode_map->Add(scanner_mode->m_scanner_mode_id->GetText(), scanner_mode);
        return scanner_mode_map;
    
#line 933 "reflex_parser.cpp"
            break;
        }

        case 24:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 424 "reflex_parser.trison"

        return new ScannerModeMap();
    
#line 945 "reflex_parser.cpp"
            break;
        }

        case 25:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * scanner_mode_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-4].m_token_data));
            RuleList * rule_list(Dsc<RuleList *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 432 "reflex_parser.trison"

        delete throwaway;
        return new ScannerMode(scanner_mode_id, rule_list);
    
#line 961 "reflex_parser.cpp"
            break;
        }

        case 26:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * scanner_mode_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-4].m_token_data));

#line 438 "reflex_parser.trison"

        EmitError("parse error in scanner mode rule list", throwaway->GetFiLoc());
        delete throwaway;
        return new ScannerMode(scanner_mode_id, new RuleList());
    
#line 977 "reflex_parser.cpp"
            break;
        }

        case 27:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-5].m_token_data));
            RuleList * rule_list(Dsc<RuleList *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 445 "reflex_parser.trison"

        EmitError("parse error in scanner mode id", throwaway->GetFiLoc());
        delete throwaway;
        delete rule_list;
        return NULL;
    
#line 994 "reflex_parser.cpp"
            break;
        }

        case 28:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            RuleList * rule_list(Dsc<RuleList *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 456 "reflex_parser.trison"

        return rule_list;
    
#line 1007 "reflex_parser.cpp"
            break;
        }

        case 29:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 461 "reflex_parser.trison"

        return new RuleList();
    
#line 1019 "reflex_parser.cpp"
            break;
        }

        case 30:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            RuleList * rule_list(Dsc<RuleList *>(m_stack_[m_stack_.size()-3].m_token_data));
            Rule * rule(Dsc<Rule *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 469 "reflex_parser.trison"

        rule_list->Append(rule);
        return rule_list;
    
#line 1034 "reflex_parser.cpp"
            break;
        }

        case 31:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Rule * rule(Dsc<Rule *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 475 "reflex_parser.trison"

        RuleList *rule_list = new RuleList();
        rule_list->Append(rule);
        return rule_list;
    
#line 1049 "reflex_parser.cpp"
            break;
        }

        case 32:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::String * regex_string(Dsc<Ast::String *>(m_stack_[m_stack_.size()-2].m_token_data));
            CommonLang::RuleHandlerMap * rule_handler_map(Dsc<CommonLang::RuleHandlerMap *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 485 "reflex_parser.trison"

        assert(m_regex_macro_map != NULL);

        // parse the rule regex
        Regex::RegularExpression *regex = NULL;
        {
            Regex::Parser parser;
            parser.ScannerDebugSpew(g_options->GetIsVerbose(OptionsBase::V_REGEX_SCANNER));
            if (g_options->GetIsVerbose(OptionsBase::V_REGEX_PARSER))
                parser.SetDebugSpewLevel(2);
            istringstream in(regex_string->GetText());
            parser.OpenUsingStream(&in, regex_string->GetText(), false);
            try {
                if (parser.Parse(&regex, m_regex_macro_map) == Regex::Parser::PRC_SUCCESS)
                {
                    if (g_options->GetIsVerbose(OptionsBase::V_REGEX_AST))
                        regex->Print(cerr);
                }
                else
                {
                    EmitError(
                        "parse error in regular expression (" + regex_string->GetText() + ")",
                        regex_string->GetFiLoc());
                    regex = new Regex::RegularExpression();
                }
            } catch (string const &exception) {
                EmitError(
                    exception + " in regular expression (" + regex_string->GetText() + ")",
                    regex_string->GetFiLoc());
                regex = new Regex::RegularExpression();
            }
            assert(regex != NULL);
        }

        // enforcement of presence of rule handlers for all targets
        assert(m_target_map != NULL);
        for (CommonLang::TargetMap::const_iterator it = m_target_map->begin(),
                                                           it_end = m_target_map->end();
             it != it_end;
             ++it)
        {
            string const &target_id = it->first;
            if (rule_handler_map->GetElement(target_id) == NULL)
            {
                EmitWarning(
                    "missing rule handler for target \"" + target_id + "\"",
                    regex_string->GetFiLoc());
                // add a blank code block for the rule handler's missing target
                rule_handler_map->Add(
                    target_id,
                    new CommonLang::RuleHandler(
                        new Ast::Id(target_id, FiLoc::ms_invalid),
                        new Ast::StrictCodeBlock(FiLoc::ms_invalid)));
                assert(rule_handler_map->GetElement(target_id) != NULL);
            }
        }

        Rule *rule = new Rule(regex_string->GetText(), regex, rule_handler_map);
        delete regex_string;
        return rule;
    
#line 1121 "reflex_parser.cpp"
            break;
        }

        case 33:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            CommonLang::RuleHandlerMap * rule_handler_map(Dsc<CommonLang::RuleHandlerMap *>(m_stack_[m_stack_.size()-2].m_token_data));
            CommonLang::RuleHandler * rule_handler(Dsc<CommonLang::RuleHandler *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 551 "reflex_parser.trison"

        if (rule_handler != NULL)
            rule_handler_map->Add(rule_handler->m_target_id->GetText(), rule_handler);
        return rule_handler_map;
    
#line 1137 "reflex_parser.cpp"
            break;
        }

        case 34:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 558 "reflex_parser.trison"

        return new CommonLang::RuleHandlerMap();
    
#line 1149 "reflex_parser.cpp"
            break;
        }

        case 35:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-4].m_token_data));
            Ast::Id * target_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));
            Ast::CodeBlock * code_block(Dsc<Ast::CodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 566 "reflex_parser.trison"

        delete throwaway;
        assert(m_target_map != NULL);
        if (m_target_map->GetElement(target_id->GetText()) == NULL)
            EmitWarning(
                "undeclared target \"" + target_id->GetText() + "\"",
                target_id->GetFiLoc());
        return new CommonLang::RuleHandler(target_id, code_block);
    
#line 1170 "reflex_parser.cpp"
            break;
        }

        case 36:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::CodeBlock * code_block(Dsc<Ast::CodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 577 "reflex_parser.trison"

        assert(m_target_map != NULL);
        EmitError("parse error in target id after directive %target", throwaway->GetFiLoc());
        delete throwaway;
        delete code_block;
        return NULL;
    
#line 1188 "reflex_parser.cpp"
            break;
        }

        case 37:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 586 "reflex_parser.trison"

        assert(m_target_map != NULL);
        EmitError("parse error in directive %target", throwaway->GetFiLoc());
        delete throwaway;
        return NULL;
    
#line 1204 "reflex_parser.cpp"
            break;
        }

        case 38:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::CodeBlock * code_block(Dsc<Ast::CodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 594 "reflex_parser.trison"

        assert(m_target_map != NULL);
        EmitError("missing directive %target before rule handler code block", code_block->GetFiLoc());
        delete code_block;
        return NULL;
    
#line 1220 "reflex_parser.cpp"
            break;
        }

        case 39:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::DumbCodeBlock * dumb_code_block(Dsc<Ast::DumbCodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 608 "reflex_parser.trison"
 return dumb_code_block; 
#line 1231 "reflex_parser.cpp"
            break;
        }

        case 40:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::StrictCodeBlock * strict_code_block(Dsc<Ast::StrictCodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 610 "reflex_parser.trison"
 return strict_code_block; 
#line 1242 "reflex_parser.cpp"
            break;
        }

        case 41:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 615 "reflex_parser.trison"
 return NULL; 
#line 1252 "reflex_parser.cpp"
            break;
        }

        case 42:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 617 "reflex_parser.trison"
 return NULL; 
#line 1262 "reflex_parser.cpp"
            break;
        }

        case 43:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 622 "reflex_parser.trison"
 return NULL; 
#line 1272 "reflex_parser.cpp"
            break;
        }

        case 44:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 624 "reflex_parser.trison"
 return NULL; 
#line 1282 "reflex_parser.cpp"
            break;
        }

    }

    assert(false && "no value returned from reduction rule code block");
    return NULL;
}

void Parser::PrintParserStatus_ (std::ostream &stream) const
{
    assert(!m_stack_.empty());

    stream << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 1299 "reflex_parser.cpp"
 << " parser stack: ";
    for (Stack_::const_iterator it = m_stack_.begin(), it_end = m_stack_.end(); it != it_end; ++it)
    {
        stream << it->m_state_index;
        Stack_::const_iterator next_it = it;
        if (++next_it != it_end)
            stream << ' ';
    }
    stream << std::endl;

    PrintIndented_(stream, ms_state_table_[m_stack_.rbegin()->m_state_index].m_description);
    stream << std::endl;
}

void Parser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 1320 "reflex_parser.cpp"
 << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << 
#line 158 "reflex_parser.trison"
"Reflex::Parser (at " << GetFiLoc() << "): "
#line 1328 "reflex_parser.cpp"
 << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, Parser::Token const &token)
{
    if (token.m_id < Parser::ms_token_name_count_)
        stream << '(' << Parser::ms_token_name_table_[token.m_id] << ')';
    else
        stream << "!INVALID TOKEN!";
    return stream;
}

Parser::Rule_ const Parser::ms_rule_table_[] =
{
    { Parser::Nonterminal_::root, 7, "root <- at_least_zero_newlines targets_directive target_directives macro_directives start_in_scanner_mode_directive END_PREAMBLE scanner_modes" },
    { Parser::Nonterminal_::targets_directive, 3, "targets_directive <- DIRECTIVE_TARGETS target_ids at_least_one_newline" },
    { Parser::Nonterminal_::targets_directive, 0, "targets_directive <-" },
    { Parser::Nonterminal_::targets_directive, 3, "targets_directive <- DIRECTIVE_TARGETS ERROR_ at_least_one_newline" },
    { Parser::Nonterminal_::target_ids, 2, "target_ids <- target_ids ID" },
    { Parser::Nonterminal_::target_ids, 0, "target_ids <-" },
    { Parser::Nonterminal_::target_directives, 2, "target_directives <- target_directives target_directive" },
    { Parser::Nonterminal_::target_directives, 0, "target_directives <-" },
    { Parser::Nonterminal_::target_directive, 7, "target_directive <- DIRECTIVE_TARGET '.' ID '.' ID target_directive_param at_least_one_newline" },
    { Parser::Nonterminal_::target_directive, 7, "target_directive <- DIRECTIVE_TARGET '.' ID '.' ID ERROR_ at_least_one_newline" },
    { Parser::Nonterminal_::target_directive, 5, "target_directive <- DIRECTIVE_TARGET '.' ID ERROR_ at_least_one_newline" },
    { Parser::Nonterminal_::target_directive, 3, "target_directive <- DIRECTIVE_TARGET ERROR_ at_least_one_newline" },
    { Parser::Nonterminal_::target_directive_param, 1, "target_directive_param <- ID" },
    { Parser::Nonterminal_::target_directive_param, 1, "target_directive_param <- STRING_LITERAL" },
    { Parser::Nonterminal_::target_directive_param, 1, "target_directive_param <- STRICT_CODE_BLOCK" },
    { Parser::Nonterminal_::target_directive_param, 1, "target_directive_param <- DUMB_CODE_BLOCK" },
    { Parser::Nonterminal_::target_directive_param, 0, "target_directive_param <-" },
    { Parser::Nonterminal_::macro_directives, 5, "macro_directives <- macro_directives DIRECTIVE_MACRO ID REGEX at_least_one_newline" },
    { Parser::Nonterminal_::macro_directives, 0, "macro_directives <-" },
    { Parser::Nonterminal_::macro_directives, 5, "macro_directives <- macro_directives DIRECTIVE_MACRO ID ERROR_ at_least_one_newline" },
    { Parser::Nonterminal_::macro_directives, 4, "macro_directives <- macro_directives DIRECTIVE_MACRO ERROR_ at_least_one_newline" },
    { Parser::Nonterminal_::start_in_scanner_mode_directive, 3, "start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE ID at_least_one_newline" },
    { Parser::Nonterminal_::start_in_scanner_mode_directive, 3, "start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE ERROR_ at_least_one_newline" },
    { Parser::Nonterminal_::scanner_modes, 2, "scanner_modes <- scanner_modes scanner_mode" },
    { Parser::Nonterminal_::scanner_modes, 0, "scanner_modes <-" },
    { Parser::Nonterminal_::scanner_mode, 5, "scanner_mode <- DIRECTIVE_STATE ID ':' scanner_mode_rules ';'" },
    { Parser::Nonterminal_::scanner_mode, 5, "scanner_mode <- DIRECTIVE_STATE ID ':' ERROR_ ';'" },
    { Parser::Nonterminal_::scanner_mode, 5, "scanner_mode <- DIRECTIVE_STATE ERROR_ ':' scanner_mode_rules ';'" },
    { Parser::Nonterminal_::scanner_mode_rules, 1, "scanner_mode_rules <- rule_list" },
    { Parser::Nonterminal_::scanner_mode_rules, 0, "scanner_mode_rules <-" },
    { Parser::Nonterminal_::rule_list, 3, "rule_list <- rule_list '|' rule" },
    { Parser::Nonterminal_::rule_list, 1, "rule_list <- rule" },
    { Parser::Nonterminal_::rule, 2, "rule <- REGEX rule_handlers" },
    { Parser::Nonterminal_::rule_handlers, 2, "rule_handlers <- rule_handlers rule_handler" },
    { Parser::Nonterminal_::rule_handlers, 0, "rule_handlers <-" },
    { Parser::Nonterminal_::rule_handler, 4, "rule_handler <- DIRECTIVE_TARGET '.' ID any_type_of_code_block" },
    { Parser::Nonterminal_::rule_handler, 3, "rule_handler <- DIRECTIVE_TARGET ERROR_ any_type_of_code_block" },
    { Parser::Nonterminal_::rule_handler, 2, "rule_handler <- DIRECTIVE_TARGET ERROR_" },
    { Parser::Nonterminal_::rule_handler, 2, "rule_handler <- ERROR_ any_type_of_code_block" },
    { Parser::Nonterminal_::any_type_of_code_block, 1, "any_type_of_code_block <- DUMB_CODE_BLOCK" },
    { Parser::Nonterminal_::any_type_of_code_block, 1, "any_type_of_code_block <- STRICT_CODE_BLOCK" },
    { Parser::Nonterminal_::at_least_zero_newlines, 2, "at_least_zero_newlines <- at_least_zero_newlines NEWLINE" },
    { Parser::Nonterminal_::at_least_zero_newlines, 0, "at_least_zero_newlines <-" },
    { Parser::Nonterminal_::at_least_one_newline, 2, "at_least_one_newline <- at_least_one_newline NEWLINE" },
    { Parser::Nonterminal_::at_least_one_newline, 1, "at_least_one_newline <- NEWLINE" }
};
TrisonCpp_::Size const Parser::ms_rule_count_ = sizeof(Parser::ms_rule_table_) / sizeof(*Parser::ms_rule_table_);

Parser::State_ const Parser::ms_state_table_[] =
{
    { 3, ms_transition_table_+0, "START root                                                                                                                                              \nrule 0: root <- . at_least_zero_newlines targets_directive target_directives macro_directives start_in_scanner_mode_directive END_PREAMBLE scanner_modes\nrule 41: at_least_zero_newlines <- . at_least_zero_newlines NEWLINE                                                                                     \nrule 42: at_least_zero_newlines <- .                                                                                                                    " },
    { 1, ms_transition_table_+3, "RETURN root" },
    { 4, ms_transition_table_+4, "rule 0: root <- at_least_zero_newlines . targets_directive target_directives macro_directives start_in_scanner_mode_directive END_PREAMBLE scanner_modes\nrule 41: at_least_zero_newlines <- at_least_zero_newlines . NEWLINE                                                                                     \nrule 1: targets_directive <- . DIRECTIVE_TARGETS target_ids at_least_one_newline                                                                        \nrule 2: targets_directive <- .                                                                                                                          \nrule 3: targets_directive <- . DIRECTIVE_TARGETS ERROR_ at_least_one_newline                                                                            " },
    { 3, ms_transition_table_+8, "rule 1: targets_directive <- DIRECTIVE_TARGETS . target_ids at_least_one_newline\nrule 4: target_ids <- . target_ids ID                                           \nrule 5: target_ids <- .                                                         \nrule 3: targets_directive <- DIRECTIVE_TARGETS . ERROR_ at_least_one_newline    " },
    { 3, ms_transition_table_+11, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE             \nrule 44: at_least_one_newline <- . NEWLINE                                  \nrule 3: targets_directive <- DIRECTIVE_TARGETS ERROR_ . at_least_one_newline" },
    { 1, ms_transition_table_+14, "rule 44: at_least_one_newline <- NEWLINE ." },
    { 2, ms_transition_table_+15, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE             \nrule 3: targets_directive <- DIRECTIVE_TARGETS ERROR_ at_least_one_newline ." },
    { 1, ms_transition_table_+17, "rule 43: at_least_one_newline <- at_least_one_newline NEWLINE ." },
    { 4, ms_transition_table_+18, "rule 1: targets_directive <- DIRECTIVE_TARGETS target_ids . at_least_one_newline\nrule 4: target_ids <- target_ids . ID                                           \nrule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                 \nrule 44: at_least_one_newline <- . NEWLINE                                      " },
    { 1, ms_transition_table_+22, "rule 4: target_ids <- target_ids ID ." },
    { 2, ms_transition_table_+23, "rule 1: targets_directive <- DIRECTIVE_TARGETS target_ids at_least_one_newline .\nrule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                 " },
    { 1, ms_transition_table_+25, "rule 41: at_least_zero_newlines <- at_least_zero_newlines NEWLINE ." },
    { 2, ms_transition_table_+26, "rule 0: root <- at_least_zero_newlines targets_directive . target_directives macro_directives start_in_scanner_mode_directive END_PREAMBLE scanner_modes\nrule 6: target_directives <- . target_directives target_directive                                                                                       \nrule 7: target_directives <- .                                                                                                                          " },
    { 4, ms_transition_table_+28, "rule 0: root <- at_least_zero_newlines targets_directive target_directives . macro_directives start_in_scanner_mode_directive END_PREAMBLE scanner_modes\nrule 6: target_directives <- target_directives . target_directive                                                                                       \nrule 8: target_directive <- . DIRECTIVE_TARGET '.' ID '.' ID target_directive_param at_least_one_newline                                                \nrule 9: target_directive <- . DIRECTIVE_TARGET '.' ID '.' ID ERROR_ at_least_one_newline                                                                \nrule 10: target_directive <- . DIRECTIVE_TARGET '.' ID ERROR_ at_least_one_newline                                                                      \nrule 11: target_directive <- . DIRECTIVE_TARGET ERROR_ at_least_one_newline                                                                             \nrule 17: macro_directives <- . macro_directives DIRECTIVE_MACRO ID REGEX at_least_one_newline                                                           \nrule 18: macro_directives <- .                                                                                                                          \nrule 19: macro_directives <- . macro_directives DIRECTIVE_MACRO ID ERROR_ at_least_one_newline                                                          \nrule 20: macro_directives <- . macro_directives DIRECTIVE_MACRO ERROR_ at_least_one_newline                                                             " },
    { 3, ms_transition_table_+32, "rule 8: target_directive <- DIRECTIVE_TARGET . '.' ID '.' ID target_directive_param at_least_one_newline\nrule 9: target_directive <- DIRECTIVE_TARGET . '.' ID '.' ID ERROR_ at_least_one_newline                \nrule 10: target_directive <- DIRECTIVE_TARGET . '.' ID ERROR_ at_least_one_newline                      \nrule 11: target_directive <- DIRECTIVE_TARGET . ERROR_ at_least_one_newline                             " },
    { 2, ms_transition_table_+35, "rule 8: target_directive <- DIRECTIVE_TARGET '.' . ID '.' ID target_directive_param at_least_one_newline\nrule 9: target_directive <- DIRECTIVE_TARGET '.' . ID '.' ID ERROR_ at_least_one_newline                \nrule 10: target_directive <- DIRECTIVE_TARGET '.' . ID ERROR_ at_least_one_newline                      " },
    { 3, ms_transition_table_+37, "rule 8: target_directive <- DIRECTIVE_TARGET '.' ID . '.' ID target_directive_param at_least_one_newline\nrule 9: target_directive <- DIRECTIVE_TARGET '.' ID . '.' ID ERROR_ at_least_one_newline                \nrule 10: target_directive <- DIRECTIVE_TARGET '.' ID . ERROR_ at_least_one_newline                      " },
    { 2, ms_transition_table_+40, "rule 8: target_directive <- DIRECTIVE_TARGET '.' ID '.' . ID target_directive_param at_least_one_newline\nrule 9: target_directive <- DIRECTIVE_TARGET '.' ID '.' . ID ERROR_ at_least_one_newline                " },
    { 7, ms_transition_table_+42, "rule 8: target_directive <- DIRECTIVE_TARGET '.' ID '.' ID . target_directive_param at_least_one_newline\nrule 12: target_directive_param <- . ID                                                                 \nrule 13: target_directive_param <- . STRING_LITERAL                                                     \nrule 14: target_directive_param <- . STRICT_CODE_BLOCK                                                  \nrule 15: target_directive_param <- . DUMB_CODE_BLOCK                                                    \nrule 16: target_directive_param <- .                                                                    \nrule 9: target_directive <- DIRECTIVE_TARGET '.' ID '.' ID . ERROR_ at_least_one_newline                " },
    { 3, ms_transition_table_+49, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                         \nrule 44: at_least_one_newline <- . NEWLINE                                              \nrule 9: target_directive <- DIRECTIVE_TARGET '.' ID '.' ID ERROR_ . at_least_one_newline" },
    { 2, ms_transition_table_+52, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                         \nrule 9: target_directive <- DIRECTIVE_TARGET '.' ID '.' ID ERROR_ at_least_one_newline ." },
    { 1, ms_transition_table_+54, "rule 15: target_directive_param <- DUMB_CODE_BLOCK ." },
    { 1, ms_transition_table_+55, "rule 12: target_directive_param <- ID ." },
    { 1, ms_transition_table_+56, "rule 14: target_directive_param <- STRICT_CODE_BLOCK ." },
    { 1, ms_transition_table_+57, "rule 13: target_directive_param <- STRING_LITERAL ." },
    { 3, ms_transition_table_+58, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                                         \nrule 44: at_least_one_newline <- . NEWLINE                                                              \nrule 8: target_directive <- DIRECTIVE_TARGET '.' ID '.' ID target_directive_param . at_least_one_newline" },
    { 2, ms_transition_table_+61, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                                         \nrule 8: target_directive <- DIRECTIVE_TARGET '.' ID '.' ID target_directive_param at_least_one_newline ." },
    { 3, ms_transition_table_+63, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                   \nrule 44: at_least_one_newline <- . NEWLINE                                        \nrule 10: target_directive <- DIRECTIVE_TARGET '.' ID ERROR_ . at_least_one_newline" },
    { 2, ms_transition_table_+66, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                   \nrule 10: target_directive <- DIRECTIVE_TARGET '.' ID ERROR_ at_least_one_newline ." },
    { 3, ms_transition_table_+68, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE            \nrule 44: at_least_one_newline <- . NEWLINE                                 \nrule 11: target_directive <- DIRECTIVE_TARGET ERROR_ . at_least_one_newline" },
    { 2, ms_transition_table_+71, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE            \nrule 11: target_directive <- DIRECTIVE_TARGET ERROR_ at_least_one_newline ." },
    { 1, ms_transition_table_+73, "rule 6: target_directives <- target_directives target_directive ." },
    { 4, ms_transition_table_+74, "rule 0: root <- at_least_zero_newlines targets_directive target_directives macro_directives . start_in_scanner_mode_directive END_PREAMBLE scanner_modes\nrule 17: macro_directives <- macro_directives . DIRECTIVE_MACRO ID REGEX at_least_one_newline                                                           \nrule 19: macro_directives <- macro_directives . DIRECTIVE_MACRO ID ERROR_ at_least_one_newline                                                          \nrule 20: macro_directives <- macro_directives . DIRECTIVE_MACRO ERROR_ at_least_one_newline                                                             \nrule 21: start_in_scanner_mode_directive <- . DIRECTIVE_START_IN_SCANNER_MODE ID at_least_one_newline                                                   \nrule 22: start_in_scanner_mode_directive <- . DIRECTIVE_START_IN_SCANNER_MODE ERROR_ at_least_one_newline                                               " },
    { 3, ms_transition_table_+78, "rule 17: macro_directives <- macro_directives DIRECTIVE_MACRO . ID REGEX at_least_one_newline \nrule 19: macro_directives <- macro_directives DIRECTIVE_MACRO . ID ERROR_ at_least_one_newline\nrule 20: macro_directives <- macro_directives DIRECTIVE_MACRO . ERROR_ at_least_one_newline   " },
    { 3, ms_transition_table_+81, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                            \nrule 44: at_least_one_newline <- . NEWLINE                                                 \nrule 20: macro_directives <- macro_directives DIRECTIVE_MACRO ERROR_ . at_least_one_newline" },
    { 2, ms_transition_table_+84, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                            \nrule 20: macro_directives <- macro_directives DIRECTIVE_MACRO ERROR_ at_least_one_newline ." },
    { 3, ms_transition_table_+86, "rule 17: macro_directives <- macro_directives DIRECTIVE_MACRO ID . REGEX at_least_one_newline \nrule 19: macro_directives <- macro_directives DIRECTIVE_MACRO ID . ERROR_ at_least_one_newline" },
    { 3, ms_transition_table_+89, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                               \nrule 44: at_least_one_newline <- . NEWLINE                                                    \nrule 19: macro_directives <- macro_directives DIRECTIVE_MACRO ID ERROR_ . at_least_one_newline" },
    { 2, ms_transition_table_+92, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                               \nrule 19: macro_directives <- macro_directives DIRECTIVE_MACRO ID ERROR_ at_least_one_newline ." },
    { 3, ms_transition_table_+94, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                              \nrule 44: at_least_one_newline <- . NEWLINE                                                   \nrule 17: macro_directives <- macro_directives DIRECTIVE_MACRO ID REGEX . at_least_one_newline" },
    { 2, ms_transition_table_+97, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                              \nrule 17: macro_directives <- macro_directives DIRECTIVE_MACRO ID REGEX at_least_one_newline ." },
    { 3, ms_transition_table_+99, "rule 21: start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE . ID at_least_one_newline    \nrule 22: start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE . ERROR_ at_least_one_newline" },
    { 3, ms_transition_table_+102, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                                          \nrule 44: at_least_one_newline <- . NEWLINE                                                               \nrule 22: start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE ERROR_ . at_least_one_newline" },
    { 2, ms_transition_table_+105, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                                          \nrule 22: start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE ERROR_ at_least_one_newline ." },
    { 3, ms_transition_table_+107, "rule 43: at_least_one_newline <- . at_least_one_newline NEWLINE                                      \nrule 44: at_least_one_newline <- . NEWLINE                                                           \nrule 21: start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE ID . at_least_one_newline" },
    { 2, ms_transition_table_+110, "rule 43: at_least_one_newline <- at_least_one_newline . NEWLINE                                      \nrule 21: start_in_scanner_mode_directive <- DIRECTIVE_START_IN_SCANNER_MODE ID at_least_one_newline ." },
    { 2, ms_transition_table_+112, "rule 0: root <- at_least_zero_newlines targets_directive target_directives macro_directives start_in_scanner_mode_directive . END_PREAMBLE scanner_modes" },
    { 2, ms_transition_table_+114, "rule 0: root <- at_least_zero_newlines targets_directive target_directives macro_directives start_in_scanner_mode_directive END_PREAMBLE . scanner_modes\nrule 23: scanner_modes <- . scanner_modes scanner_mode                                                                                                  \nrule 24: scanner_modes <- .                                                                                                                             " },
    { 3, ms_transition_table_+116, "rule 0: root <- at_least_zero_newlines targets_directive target_directives macro_directives start_in_scanner_mode_directive END_PREAMBLE scanner_modes .\nrule 23: scanner_modes <- scanner_modes . scanner_mode                                                                                                  \nrule 25: scanner_mode <- . DIRECTIVE_STATE ID ':' scanner_mode_rules ';'                                                                                \nrule 26: scanner_mode <- . DIRECTIVE_STATE ID ':' ERROR_ ';'                                                                                            \nrule 27: scanner_mode <- . DIRECTIVE_STATE ERROR_ ':' scanner_mode_rules ';'                                                                            " },
    { 3, ms_transition_table_+119, "rule 25: scanner_mode <- DIRECTIVE_STATE . ID ':' scanner_mode_rules ';'    \nrule 26: scanner_mode <- DIRECTIVE_STATE . ID ':' ERROR_ ';'                \nrule 27: scanner_mode <- DIRECTIVE_STATE . ERROR_ ':' scanner_mode_rules ';'" },
    { 2, ms_transition_table_+122, "rule 27: scanner_mode <- DIRECTIVE_STATE ERROR_ . ':' scanner_mode_rules ';'" },
    { 5, ms_transition_table_+124, "rule 28: scanner_mode_rules <- . rule_list                                  \nrule 30: rule_list <- . rule_list '|' rule                                  \nrule 32: rule <- . REGEX rule_handlers                                      \nrule 31: rule_list <- . rule                                                \nrule 29: scanner_mode_rules <- .                                            \nrule 27: scanner_mode <- DIRECTIVE_STATE ERROR_ ':' . scanner_mode_rules ';'" },
    { 2, ms_transition_table_+129, "rule 32: rule <- REGEX . rule_handlers                \nrule 33: rule_handlers <- . rule_handlers rule_handler\nrule 34: rule_handlers <- .                           " },
    { 4, ms_transition_table_+131, "rule 32: rule <- REGEX rule_handlers .                                   \nrule 33: rule_handlers <- rule_handlers . rule_handler                   \nrule 35: rule_handler <- . DIRECTIVE_TARGET '.' ID any_type_of_code_block\nrule 36: rule_handler <- . DIRECTIVE_TARGET ERROR_ any_type_of_code_block\nrule 37: rule_handler <- . DIRECTIVE_TARGET ERROR_                       \nrule 38: rule_handler <- . ERROR_ any_type_of_code_block                 " },
    { 4, ms_transition_table_+135, "rule 39: any_type_of_code_block <- . DUMB_CODE_BLOCK    \nrule 40: any_type_of_code_block <- . STRICT_CODE_BLOCK  \nrule 38: rule_handler <- ERROR_ . any_type_of_code_block" },
    { 1, ms_transition_table_+139, "rule 39: any_type_of_code_block <- DUMB_CODE_BLOCK ." },
    { 1, ms_transition_table_+140, "rule 40: any_type_of_code_block <- STRICT_CODE_BLOCK ." },
    { 1, ms_transition_table_+141, "rule 38: rule_handler <- ERROR_ any_type_of_code_block ." },
    { 3, ms_transition_table_+142, "rule 35: rule_handler <- DIRECTIVE_TARGET . '.' ID any_type_of_code_block\nrule 36: rule_handler <- DIRECTIVE_TARGET . ERROR_ any_type_of_code_block\nrule 37: rule_handler <- DIRECTIVE_TARGET . ERROR_                       " },
    { 2, ms_transition_table_+145, "rule 35: rule_handler <- DIRECTIVE_TARGET '.' . ID any_type_of_code_block" },
    { 4, ms_transition_table_+147, "rule 35: rule_handler <- DIRECTIVE_TARGET '.' ID . any_type_of_code_block\nrule 39: any_type_of_code_block <- . DUMB_CODE_BLOCK                     \nrule 40: any_type_of_code_block <- . STRICT_CODE_BLOCK                   " },
    { 1, ms_transition_table_+151, "rule 35: rule_handler <- DIRECTIVE_TARGET '.' ID any_type_of_code_block ." },
    { 4, ms_transition_table_+152, "rule 39: any_type_of_code_block <- . DUMB_CODE_BLOCK                     \nrule 40: any_type_of_code_block <- . STRICT_CODE_BLOCK                   \nrule 36: rule_handler <- DIRECTIVE_TARGET ERROR_ . any_type_of_code_block\nrule 37: rule_handler <- DIRECTIVE_TARGET ERROR_ .                       " },
    { 1, ms_transition_table_+156, "rule 36: rule_handler <- DIRECTIVE_TARGET ERROR_ any_type_of_code_block ." },
    { 1, ms_transition_table_+157, "rule 33: rule_handlers <- rule_handlers rule_handler ." },
    { 2, ms_transition_table_+158, "rule 27: scanner_mode <- DIRECTIVE_STATE ERROR_ ':' scanner_mode_rules . ';'" },
    { 1, ms_transition_table_+160, "rule 27: scanner_mode <- DIRECTIVE_STATE ERROR_ ':' scanner_mode_rules ';' ." },
    { 2, ms_transition_table_+161, "rule 28: scanner_mode_rules <- rule_list .\nrule 30: rule_list <- rule_list . '|' rule" },
    { 3, ms_transition_table_+163, "rule 30: rule_list <- rule_list '|' . rule\nrule 32: rule <- . REGEX rule_handlers    " },
    { 1, ms_transition_table_+166, "rule 30: rule_list <- rule_list '|' rule ." },
    { 1, ms_transition_table_+167, "rule 31: rule_list <- rule ." },
    { 2, ms_transition_table_+168, "rule 25: scanner_mode <- DIRECTIVE_STATE ID . ':' scanner_mode_rules ';'\nrule 26: scanner_mode <- DIRECTIVE_STATE ID . ':' ERROR_ ';'            " },
    { 6, ms_transition_table_+170, "rule 25: scanner_mode <- DIRECTIVE_STATE ID ':' . scanner_mode_rules ';'\nrule 28: scanner_mode_rules <- . rule_list                              \nrule 30: rule_list <- . rule_list '|' rule                              \nrule 32: rule <- . REGEX rule_handlers                                  \nrule 31: rule_list <- . rule                                            \nrule 29: scanner_mode_rules <- .                                        \nrule 26: scanner_mode <- DIRECTIVE_STATE ID ':' . ERROR_ ';'            " },
    { 2, ms_transition_table_+176, "rule 26: scanner_mode <- DIRECTIVE_STATE ID ':' ERROR_ . ';'" },
    { 1, ms_transition_table_+178, "rule 26: scanner_mode <- DIRECTIVE_STATE ID ':' ERROR_ ';' ." },
    { 2, ms_transition_table_+179, "rule 25: scanner_mode <- DIRECTIVE_STATE ID ':' scanner_mode_rules . ';'" },
    { 1, ms_transition_table_+181, "rule 25: scanner_mode <- DIRECTIVE_STATE ID ':' scanner_mode_rules ';' ." },
    { 1, ms_transition_table_+182, "rule 23: scanner_modes <- scanner_modes scanner_mode ." },
    { 3, ms_transition_table_+183, "START targets_directive                                                         \nrule 1: targets_directive <- . DIRECTIVE_TARGETS target_ids at_least_one_newline\nrule 2: targets_directive <- .                                                  \nrule 3: targets_directive <- . DIRECTIVE_TARGETS ERROR_ at_least_one_newline    " },
    { 1, ms_transition_table_+186, "RETURN targets_directive" },
    { 2, ms_transition_table_+187, "START target_ids                     \nrule 4: target_ids <- . target_ids ID\nrule 5: target_ids <- .              " },
    { 2, ms_transition_table_+189, "RETURN target_ids                    \nrule 4: target_ids <- target_ids . ID" },
    { 2, ms_transition_table_+191, "START target_directives                                          \nrule 6: target_directives <- . target_directives target_directive\nrule 7: target_directives <- .                                   " },
    { 3, ms_transition_table_+193, "RETURN target_directives                                                                                \nrule 6: target_directives <- target_directives . target_directive                                       \nrule 8: target_directive <- . DIRECTIVE_TARGET '.' ID '.' ID target_directive_param at_least_one_newline\nrule 9: target_directive <- . DIRECTIVE_TARGET '.' ID '.' ID ERROR_ at_least_one_newline                \nrule 10: target_directive <- . DIRECTIVE_TARGET '.' ID ERROR_ at_least_one_newline                      \nrule 11: target_directive <- . DIRECTIVE_TARGET ERROR_ at_least_one_newline                             " },
    { 3, ms_transition_table_+196, "START target_directive                                                                                  \nrule 8: target_directive <- . DIRECTIVE_TARGET '.' ID '.' ID target_directive_param at_least_one_newline\nrule 9: target_directive <- . DIRECTIVE_TARGET '.' ID '.' ID ERROR_ at_least_one_newline                \nrule 10: target_directive <- . DIRECTIVE_TARGET '.' ID ERROR_ at_least_one_newline                      \nrule 11: target_directive <- . DIRECTIVE_TARGET ERROR_ at_least_one_newline                             " },
    { 1, ms_transition_table_+199, "RETURN target_directive" },
    { 6, ms_transition_table_+200, "START target_directive_param                          \nrule 12: target_directive_param <- . ID               \nrule 13: target_directive_param <- . STRING_LITERAL   \nrule 14: target_directive_param <- . STRICT_CODE_BLOCK\nrule 15: target_directive_param <- . DUMB_CODE_BLOCK  \nrule 16: target_directive_param <- .                  " },
    { 1, ms_transition_table_+206, "RETURN target_directive_param" },
    { 2, ms_transition_table_+207, "START macro_directives                                                                        \nrule 17: macro_directives <- . macro_directives DIRECTIVE_MACRO ID REGEX at_least_one_newline \nrule 18: macro_directives <- .                                                                \nrule 19: macro_directives <- . macro_directives DIRECTIVE_MACRO ID ERROR_ at_least_one_newline\nrule 20: macro_directives <- . macro_directives DIRECTIVE_MACRO ERROR_ at_least_one_newline   " },
    { 2, ms_transition_table_+209, "RETURN macro_directives                                                                       \nrule 17: macro_directives <- macro_directives . DIRECTIVE_MACRO ID REGEX at_least_one_newline \nrule 19: macro_directives <- macro_directives . DIRECTIVE_MACRO ID ERROR_ at_least_one_newline\nrule 20: macro_directives <- macro_directives . DIRECTIVE_MACRO ERROR_ at_least_one_newline   " },
    { 3, ms_transition_table_+211, "START start_in_scanner_mode_directive                                                                    \nrule 21: start_in_scanner_mode_directive <- . DIRECTIVE_START_IN_SCANNER_MODE ID at_least_one_newline    \nrule 22: start_in_scanner_mode_directive <- . DIRECTIVE_START_IN_SCANNER_MODE ERROR_ at_least_one_newline" },
    { 1, ms_transition_table_+214, "RETURN start_in_scanner_mode_directive" },
    { 2, ms_transition_table_+215, "START scanner_modes                                   \nrule 23: scanner_modes <- . scanner_modes scanner_mode\nrule 24: scanner_modes <- .                           " },
    { 3, ms_transition_table_+217, "RETURN scanner_modes                                                        \nrule 23: scanner_modes <- scanner_modes . scanner_mode                      \nrule 25: scanner_mode <- . DIRECTIVE_STATE ID ':' scanner_mode_rules ';'    \nrule 26: scanner_mode <- . DIRECTIVE_STATE ID ':' ERROR_ ';'                \nrule 27: scanner_mode <- . DIRECTIVE_STATE ERROR_ ':' scanner_mode_rules ';'" },
    { 3, ms_transition_table_+220, "START scanner_mode                                                          \nrule 25: scanner_mode <- . DIRECTIVE_STATE ID ':' scanner_mode_rules ';'    \nrule 26: scanner_mode <- . DIRECTIVE_STATE ID ':' ERROR_ ';'                \nrule 27: scanner_mode <- . DIRECTIVE_STATE ERROR_ ':' scanner_mode_rules ';'" },
    { 1, ms_transition_table_+223, "RETURN scanner_mode" },
    { 5, ms_transition_table_+224, "START scanner_mode_rules                  \nrule 28: scanner_mode_rules <- . rule_list\nrule 30: rule_list <- . rule_list '|' rule\nrule 32: rule <- . REGEX rule_handlers    \nrule 31: rule_list <- . rule              \nrule 29: scanner_mode_rules <- .          " },
    { 1, ms_transition_table_+229, "RETURN scanner_mode_rules" },
    { 4, ms_transition_table_+230, "START rule_list                           \nrule 30: rule_list <- . rule_list '|' rule\nrule 32: rule <- . REGEX rule_handlers    \nrule 31: rule_list <- . rule              " },
    { 2, ms_transition_table_+234, "RETURN rule_list                          \nrule 30: rule_list <- rule_list . '|' rule" },
    { 3, ms_transition_table_+236, "START rule                            \nrule 32: rule <- . REGEX rule_handlers" },
    { 1, ms_transition_table_+239, "RETURN rule" },
    { 2, ms_transition_table_+240, "START rule_handlers                                   \nrule 33: rule_handlers <- . rule_handlers rule_handler\nrule 34: rule_handlers <- .                           " },
    { 4, ms_transition_table_+242, "RETURN rule_handlers                                                     \nrule 33: rule_handlers <- rule_handlers . rule_handler                   \nrule 35: rule_handler <- . DIRECTIVE_TARGET '.' ID any_type_of_code_block\nrule 36: rule_handler <- . DIRECTIVE_TARGET ERROR_ any_type_of_code_block\nrule 37: rule_handler <- . DIRECTIVE_TARGET ERROR_                       \nrule 38: rule_handler <- . ERROR_ any_type_of_code_block                 " },
    { 4, ms_transition_table_+246, "START rule_handler                                                       \nrule 35: rule_handler <- . DIRECTIVE_TARGET '.' ID any_type_of_code_block\nrule 36: rule_handler <- . DIRECTIVE_TARGET ERROR_ any_type_of_code_block\nrule 37: rule_handler <- . DIRECTIVE_TARGET ERROR_                       \nrule 38: rule_handler <- . ERROR_ any_type_of_code_block                 " },
    { 1, ms_transition_table_+250, "RETURN rule_handler" },
    { 4, ms_transition_table_+251, "START any_type_of_code_block                          \nrule 39: any_type_of_code_block <- . DUMB_CODE_BLOCK  \nrule 40: any_type_of_code_block <- . STRICT_CODE_BLOCK" },
    { 1, ms_transition_table_+255, "RETURN any_type_of_code_block" },
    { 2, ms_transition_table_+256, "START at_least_zero_newlines                                       \nrule 41: at_least_zero_newlines <- . at_least_zero_newlines NEWLINE\nrule 42: at_least_zero_newlines <- .                               " },
    { 2, ms_transition_table_+258, "RETURN at_least_zero_newlines                                      \nrule 41: at_least_zero_newlines <- at_least_zero_newlines . NEWLINE" },
    { 3, ms_transition_table_+260, "START at_least_one_newline                                     \nrule 43: at_least_one_newline <- . at_least_one_newline NEWLINE\nrule 44: at_least_one_newline <- . NEWLINE                     " },
    { 2, ms_transition_table_+263, "RETURN at_least_one_newline                                    \nrule 43: at_least_one_newline <- at_least_one_newline . NEWLINE" }
};
TrisonCpp_::Size const Parser::ms_state_count_ = sizeof(Parser::ms_state_table_) / sizeof(*Parser::ms_state_table_);

Parser::Transition_ const Parser::ms_transition_table_[] =
{
    { Parser::Transition_::TT_REDUCE, 42, 0, ms_lookahead_table_+0 },
    { Parser::Transition_::TT_SHIFT, 1, 1, ms_lookahead_table_+0 },
    { Parser::Transition_::TT_SHIFT, 2, 1, ms_lookahead_table_+1 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+2 },
    { Parser::Transition_::TT_REDUCE, 2, 0, ms_lookahead_table_+2 },
    { Parser::Transition_::TT_SHIFT, 3, 1, ms_lookahead_table_+2 },
    { Parser::Transition_::TT_SHIFT, 11, 1, ms_lookahead_table_+3 },
    { Parser::Transition_::TT_SHIFT, 12, 1, ms_lookahead_table_+4 },
    { Parser::Transition_::TT_REDUCE, 5, 0, ms_lookahead_table_+5 },
    { Parser::Transition_::TT_SHIFT, 4, 1, ms_lookahead_table_+5 },
    { Parser::Transition_::TT_SHIFT, 8, 1, ms_lookahead_table_+6 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+7 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+7 },
    { Parser::Transition_::TT_SHIFT, 6, 1, ms_lookahead_table_+8 },
    { Parser::Transition_::TT_REDUCE, 44, 0, ms_lookahead_table_+9 },
    { Parser::Transition_::TT_REDUCE, 3, 0, ms_lookahead_table_+9 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+9 },
    { Parser::Transition_::TT_REDUCE, 43, 0, ms_lookahead_table_+10 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+10 },
    { Parser::Transition_::TT_SHIFT, 9, 1, ms_lookahead_table_+10 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+11 },
    { Parser::Transition_::TT_SHIFT, 10, 1, ms_lookahead_table_+12 },
    { Parser::Transition_::TT_REDUCE, 4, 0, ms_lookahead_table_+13 },
    { Parser::Transition_::TT_REDUCE, 1, 0, ms_lookahead_table_+13 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+13 },
    { Parser::Transition_::TT_REDUCE, 41, 0, ms_lookahead_table_+14 },
    { Parser::Transition_::TT_REDUCE, 7, 0, ms_lookahead_table_+14 },
    { Parser::Transition_::TT_SHIFT, 13, 1, ms_lookahead_table_+14 },
    { Parser::Transition_::TT_REDUCE, 18, 0, ms_lookahead_table_+15 },
    { Parser::Transition_::TT_SHIFT, 14, 1, ms_lookahead_table_+15 },
    { Parser::Transition_::TT_SHIFT, 31, 1, ms_lookahead_table_+16 },
    { Parser::Transition_::TT_SHIFT, 32, 1, ms_lookahead_table_+17 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+18 },
    { Parser::Transition_::TT_SHIFT, 15, 1, ms_lookahead_table_+18 },
    { Parser::Transition_::TT_SHIFT, 29, 1, ms_lookahead_table_+19 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+20 },
    { Parser::Transition_::TT_SHIFT, 16, 1, ms_lookahead_table_+20 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+21 },
    { Parser::Transition_::TT_SHIFT, 17, 1, ms_lookahead_table_+21 },
    { Parser::Transition_::TT_SHIFT, 27, 1, ms_lookahead_table_+22 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+23 },
    { Parser::Transition_::TT_SHIFT, 18, 1, ms_lookahead_table_+23 },
    { Parser::Transition_::TT_REDUCE, 16, 0, ms_lookahead_table_+24 },
    { Parser::Transition_::TT_SHIFT, 19, 1, ms_lookahead_table_+24 },
    { Parser::Transition_::TT_SHIFT, 21, 1, ms_lookahead_table_+25 },
    { Parser::Transition_::TT_SHIFT, 22, 1, ms_lookahead_table_+26 },
    { Parser::Transition_::TT_SHIFT, 23, 1, ms_lookahead_table_+27 },
    { Parser::Transition_::TT_SHIFT, 24, 1, ms_lookahead_table_+28 },
    { Parser::Transition_::TT_SHIFT, 25, 1, ms_lookahead_table_+29 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+30 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+30 },
    { Parser::Transition_::TT_SHIFT, 20, 1, ms_lookahead_table_+31 },
    { Parser::Transition_::TT_REDUCE, 9, 0, ms_lookahead_table_+32 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+32 },
    { Parser::Transition_::TT_REDUCE, 15, 0, ms_lookahead_table_+33 },
    { Parser::Transition_::TT_REDUCE, 12, 0, ms_lookahead_table_+33 },
    { Parser::Transition_::TT_REDUCE, 14, 0, ms_lookahead_table_+33 },
    { Parser::Transition_::TT_REDUCE, 13, 0, ms_lookahead_table_+33 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+33 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+33 },
    { Parser::Transition_::TT_SHIFT, 26, 1, ms_lookahead_table_+34 },
    { Parser::Transition_::TT_REDUCE, 8, 0, ms_lookahead_table_+35 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+35 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+36 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+36 },
    { Parser::Transition_::TT_SHIFT, 28, 1, ms_lookahead_table_+37 },
    { Parser::Transition_::TT_REDUCE, 10, 0, ms_lookahead_table_+38 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+38 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+39 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+39 },
    { Parser::Transition_::TT_SHIFT, 30, 1, ms_lookahead_table_+40 },
    { Parser::Transition_::TT_REDUCE, 11, 0, ms_lookahead_table_+41 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+41 },
    { Parser::Transition_::TT_REDUCE, 6, 0, ms_lookahead_table_+42 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+42 },
    { Parser::Transition_::TT_SHIFT, 33, 1, ms_lookahead_table_+42 },
    { Parser::Transition_::TT_SHIFT, 41, 1, ms_lookahead_table_+43 },
    { Parser::Transition_::TT_SHIFT, 46, 1, ms_lookahead_table_+44 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+45 },
    { Parser::Transition_::TT_SHIFT, 34, 1, ms_lookahead_table_+45 },
    { Parser::Transition_::TT_SHIFT, 36, 1, ms_lookahead_table_+46 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+47 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+47 },
    { Parser::Transition_::TT_SHIFT, 35, 1, ms_lookahead_table_+48 },
    { Parser::Transition_::TT_REDUCE, 20, 0, ms_lookahead_table_+49 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+49 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+50 },
    { Parser::Transition_::TT_SHIFT, 37, 1, ms_lookahead_table_+50 },
    { Parser::Transition_::TT_SHIFT, 39, 1, ms_lookahead_table_+51 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+52 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+52 },
    { Parser::Transition_::TT_SHIFT, 38, 1, ms_lookahead_table_+53 },
    { Parser::Transition_::TT_REDUCE, 19, 0, ms_lookahead_table_+54 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+54 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+55 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+55 },
    { Parser::Transition_::TT_SHIFT, 40, 1, ms_lookahead_table_+56 },
    { Parser::Transition_::TT_REDUCE, 17, 0, ms_lookahead_table_+57 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+57 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+58 },
    { Parser::Transition_::TT_SHIFT, 42, 1, ms_lookahead_table_+58 },
    { Parser::Transition_::TT_SHIFT, 44, 1, ms_lookahead_table_+59 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+60 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+60 },
    { Parser::Transition_::TT_SHIFT, 43, 1, ms_lookahead_table_+61 },
    { Parser::Transition_::TT_REDUCE, 22, 0, ms_lookahead_table_+62 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+62 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+63 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+63 },
    { Parser::Transition_::TT_SHIFT, 45, 1, ms_lookahead_table_+64 },
    { Parser::Transition_::TT_REDUCE, 21, 0, ms_lookahead_table_+65 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+65 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+66 },
    { Parser::Transition_::TT_SHIFT, 47, 1, ms_lookahead_table_+66 },
    { Parser::Transition_::TT_REDUCE, 24, 0, ms_lookahead_table_+67 },
    { Parser::Transition_::TT_SHIFT, 48, 1, ms_lookahead_table_+67 },
    { Parser::Transition_::TT_REDUCE, 0, 0, ms_lookahead_table_+68 },
    { Parser::Transition_::TT_SHIFT, 49, 1, ms_lookahead_table_+68 },
    { Parser::Transition_::TT_SHIFT, 77, 1, ms_lookahead_table_+69 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+70 },
    { Parser::Transition_::TT_SHIFT, 50, 1, ms_lookahead_table_+70 },
    { Parser::Transition_::TT_SHIFT, 71, 1, ms_lookahead_table_+71 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+72 },
    { Parser::Transition_::TT_SHIFT, 51, 1, ms_lookahead_table_+72 },
    { Parser::Transition_::TT_REDUCE, 29, 0, ms_lookahead_table_+73 },
    { Parser::Transition_::TT_SHIFT, 52, 1, ms_lookahead_table_+73 },
    { Parser::Transition_::TT_SHIFT, 65, 1, ms_lookahead_table_+74 },
    { Parser::Transition_::TT_SHIFT, 67, 1, ms_lookahead_table_+75 },
    { Parser::Transition_::TT_SHIFT, 70, 1, ms_lookahead_table_+76 },
    { Parser::Transition_::TT_REDUCE, 34, 0, ms_lookahead_table_+77 },
    { Parser::Transition_::TT_SHIFT, 53, 1, ms_lookahead_table_+77 },
    { Parser::Transition_::TT_REDUCE, 32, 0, ms_lookahead_table_+78 },
    { Parser::Transition_::TT_SHIFT, 54, 1, ms_lookahead_table_+78 },
    { Parser::Transition_::TT_SHIFT, 58, 1, ms_lookahead_table_+79 },
    { Parser::Transition_::TT_SHIFT, 64, 1, ms_lookahead_table_+80 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+81 },
    { Parser::Transition_::TT_SHIFT, 55, 1, ms_lookahead_table_+81 },
    { Parser::Transition_::TT_SHIFT, 56, 1, ms_lookahead_table_+82 },
    { Parser::Transition_::TT_SHIFT, 57, 1, ms_lookahead_table_+83 },
    { Parser::Transition_::TT_REDUCE, 39, 0, ms_lookahead_table_+84 },
    { Parser::Transition_::TT_REDUCE, 40, 0, ms_lookahead_table_+84 },
    { Parser::Transition_::TT_REDUCE, 38, 0, ms_lookahead_table_+84 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+84 },
    { Parser::Transition_::TT_SHIFT, 59, 1, ms_lookahead_table_+84 },
    { Parser::Transition_::TT_SHIFT, 62, 1, ms_lookahead_table_+85 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+86 },
    { Parser::Transition_::TT_SHIFT, 60, 1, ms_lookahead_table_+86 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+87 },
    { Parser::Transition_::TT_SHIFT, 55, 1, ms_lookahead_table_+87 },
    { Parser::Transition_::TT_SHIFT, 56, 1, ms_lookahead_table_+88 },
    { Parser::Transition_::TT_SHIFT, 61, 1, ms_lookahead_table_+89 },
    { Parser::Transition_::TT_REDUCE, 35, 0, ms_lookahead_table_+90 },
    { Parser::Transition_::TT_REDUCE, 37, 0, ms_lookahead_table_+90 },
    { Parser::Transition_::TT_SHIFT, 55, 1, ms_lookahead_table_+90 },
    { Parser::Transition_::TT_SHIFT, 56, 1, ms_lookahead_table_+91 },
    { Parser::Transition_::TT_SHIFT, 63, 1, ms_lookahead_table_+92 },
    { Parser::Transition_::TT_REDUCE, 36, 0, ms_lookahead_table_+93 },
    { Parser::Transition_::TT_REDUCE, 33, 0, ms_lookahead_table_+93 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+93 },
    { Parser::Transition_::TT_SHIFT, 66, 1, ms_lookahead_table_+93 },
    { Parser::Transition_::TT_REDUCE, 27, 0, ms_lookahead_table_+94 },
    { Parser::Transition_::TT_REDUCE, 28, 0, ms_lookahead_table_+94 },
    { Parser::Transition_::TT_SHIFT, 68, 1, ms_lookahead_table_+94 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+95 },
    { Parser::Transition_::TT_SHIFT, 52, 1, ms_lookahead_table_+95 },
    { Parser::Transition_::TT_SHIFT, 69, 1, ms_lookahead_table_+96 },
    { Parser::Transition_::TT_REDUCE, 30, 0, ms_lookahead_table_+97 },
    { Parser::Transition_::TT_REDUCE, 31, 0, ms_lookahead_table_+97 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+97 },
    { Parser::Transition_::TT_SHIFT, 72, 1, ms_lookahead_table_+97 },
    { Parser::Transition_::TT_REDUCE, 29, 0, ms_lookahead_table_+98 },
    { Parser::Transition_::TT_SHIFT, 73, 1, ms_lookahead_table_+98 },
    { Parser::Transition_::TT_SHIFT, 52, 1, ms_lookahead_table_+99 },
    { Parser::Transition_::TT_SHIFT, 75, 1, ms_lookahead_table_+100 },
    { Parser::Transition_::TT_SHIFT, 67, 1, ms_lookahead_table_+101 },
    { Parser::Transition_::TT_SHIFT, 70, 1, ms_lookahead_table_+102 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+103 },
    { Parser::Transition_::TT_SHIFT, 74, 1, ms_lookahead_table_+103 },
    { Parser::Transition_::TT_REDUCE, 26, 0, ms_lookahead_table_+104 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+104 },
    { Parser::Transition_::TT_SHIFT, 76, 1, ms_lookahead_table_+104 },
    { Parser::Transition_::TT_REDUCE, 25, 0, ms_lookahead_table_+105 },
    { Parser::Transition_::TT_REDUCE, 23, 0, ms_lookahead_table_+105 },
    { Parser::Transition_::TT_REDUCE, 2, 0, ms_lookahead_table_+105 },
    { Parser::Transition_::TT_SHIFT, 3, 1, ms_lookahead_table_+105 },
    { Parser::Transition_::TT_SHIFT, 79, 1, ms_lookahead_table_+106 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+107 },
    { Parser::Transition_::TT_REDUCE, 5, 0, ms_lookahead_table_+107 },
    { Parser::Transition_::TT_SHIFT, 81, 1, ms_lookahead_table_+107 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+108 },
    { Parser::Transition_::TT_SHIFT, 9, 1, ms_lookahead_table_+108 },
    { Parser::Transition_::TT_REDUCE, 7, 0, ms_lookahead_table_+109 },
    { Parser::Transition_::TT_SHIFT, 83, 1, ms_lookahead_table_+109 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+110 },
    { Parser::Transition_::TT_SHIFT, 14, 1, ms_lookahead_table_+110 },
    { Parser::Transition_::TT_SHIFT, 31, 1, ms_lookahead_table_+111 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+112 },
    { Parser::Transition_::TT_SHIFT, 14, 1, ms_lookahead_table_+112 },
    { Parser::Transition_::TT_SHIFT, 85, 1, ms_lookahead_table_+113 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+114 },
    { Parser::Transition_::TT_REDUCE, 16, 0, ms_lookahead_table_+114 },
    { Parser::Transition_::TT_SHIFT, 21, 1, ms_lookahead_table_+114 },
    { Parser::Transition_::TT_SHIFT, 22, 1, ms_lookahead_table_+115 },
    { Parser::Transition_::TT_SHIFT, 23, 1, ms_lookahead_table_+116 },
    { Parser::Transition_::TT_SHIFT, 24, 1, ms_lookahead_table_+117 },
    { Parser::Transition_::TT_SHIFT, 87, 1, ms_lookahead_table_+118 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+119 },
    { Parser::Transition_::TT_REDUCE, 18, 0, ms_lookahead_table_+119 },
    { Parser::Transition_::TT_SHIFT, 89, 1, ms_lookahead_table_+119 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+120 },
    { Parser::Transition_::TT_SHIFT, 33, 1, ms_lookahead_table_+120 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+121 },
    { Parser::Transition_::TT_SHIFT, 41, 1, ms_lookahead_table_+121 },
    { Parser::Transition_::TT_SHIFT, 91, 1, ms_lookahead_table_+122 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+123 },
    { Parser::Transition_::TT_REDUCE, 24, 0, ms_lookahead_table_+123 },
    { Parser::Transition_::TT_SHIFT, 93, 1, ms_lookahead_table_+123 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+124 },
    { Parser::Transition_::TT_SHIFT, 49, 1, ms_lookahead_table_+124 },
    { Parser::Transition_::TT_SHIFT, 77, 1, ms_lookahead_table_+125 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+126 },
    { Parser::Transition_::TT_SHIFT, 49, 1, ms_lookahead_table_+126 },
    { Parser::Transition_::TT_SHIFT, 95, 1, ms_lookahead_table_+127 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+128 },
    { Parser::Transition_::TT_REDUCE, 29, 0, ms_lookahead_table_+128 },
    { Parser::Transition_::TT_SHIFT, 52, 1, ms_lookahead_table_+128 },
    { Parser::Transition_::TT_SHIFT, 97, 1, ms_lookahead_table_+129 },
    { Parser::Transition_::TT_SHIFT, 67, 1, ms_lookahead_table_+130 },
    { Parser::Transition_::TT_SHIFT, 70, 1, ms_lookahead_table_+131 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+132 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+132 },
    { Parser::Transition_::TT_SHIFT, 52, 1, ms_lookahead_table_+132 },
    { Parser::Transition_::TT_SHIFT, 99, 1, ms_lookahead_table_+133 },
    { Parser::Transition_::TT_SHIFT, 70, 1, ms_lookahead_table_+134 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+135 },
    { Parser::Transition_::TT_SHIFT, 68, 1, ms_lookahead_table_+135 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+136 },
    { Parser::Transition_::TT_SHIFT, 52, 1, ms_lookahead_table_+136 },
    { Parser::Transition_::TT_SHIFT, 101, 1, ms_lookahead_table_+137 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+138 },
    { Parser::Transition_::TT_REDUCE, 34, 0, ms_lookahead_table_+138 },
    { Parser::Transition_::TT_SHIFT, 103, 1, ms_lookahead_table_+138 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+139 },
    { Parser::Transition_::TT_SHIFT, 54, 1, ms_lookahead_table_+139 },
    { Parser::Transition_::TT_SHIFT, 58, 1, ms_lookahead_table_+140 },
    { Parser::Transition_::TT_SHIFT, 64, 1, ms_lookahead_table_+141 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+142 },
    { Parser::Transition_::TT_SHIFT, 54, 1, ms_lookahead_table_+142 },
    { Parser::Transition_::TT_SHIFT, 58, 1, ms_lookahead_table_+143 },
    { Parser::Transition_::TT_SHIFT, 105, 1, ms_lookahead_table_+144 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+145 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+145 },
    { Parser::Transition_::TT_SHIFT, 55, 1, ms_lookahead_table_+145 },
    { Parser::Transition_::TT_SHIFT, 56, 1, ms_lookahead_table_+146 },
    { Parser::Transition_::TT_SHIFT, 107, 1, ms_lookahead_table_+147 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+148 },
    { Parser::Transition_::TT_REDUCE, 42, 0, ms_lookahead_table_+148 },
    { Parser::Transition_::TT_SHIFT, 109, 1, ms_lookahead_table_+148 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+149 },
    { Parser::Transition_::TT_SHIFT, 11, 1, ms_lookahead_table_+149 },
    { Parser::Transition_::TT_ERROR_PANIC, 0, 0, ms_lookahead_table_+150 },
    { Parser::Transition_::TT_SHIFT, 5, 1, ms_lookahead_table_+150 },
    { Parser::Transition_::TT_SHIFT, 111, 1, ms_lookahead_table_+151 },
    { Parser::Transition_::TT_RETURN, 0, 0, ms_lookahead_table_+152 },
    { Parser::Transition_::TT_SHIFT, 7, 1, ms_lookahead_table_+152 }
};
TrisonCpp_::Size const Parser::ms_transition_count_ = sizeof(Parser::ms_transition_table_) / sizeof(*Parser::ms_transition_table_);

Parser::Token::Id const Parser::ms_lookahead_table_[] =
{
    Parser::Nonterminal_::root,
    Parser::Nonterminal_::at_least_zero_newlines,
    Parser::Terminal::DIRECTIVE_TARGETS,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::targets_directive,
    Parser::Terminal::ERROR_,
    Parser::Nonterminal_::target_ids,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::ID,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::target_directives,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Nonterminal_::target_directive,
    Parser::Nonterminal_::macro_directives,
    '.',
    Parser::Terminal::ERROR_,
    Parser::Terminal::ID,
    '.',
    Parser::Terminal::ERROR_,
    Parser::Terminal::ID,
    Parser::Terminal::ERROR_,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::ID,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Terminal::STRING_LITERAL,
    Parser::Nonterminal_::target_directive_param,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::DIRECTIVE_MACRO,
    Parser::Terminal::DIRECTIVE_START_IN_SCANNER_MODE,
    Parser::Nonterminal_::start_in_scanner_mode_directive,
    Parser::Terminal::ERROR_,
    Parser::Terminal::ID,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::ERROR_,
    Parser::Terminal::REGEX,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::ERROR_,
    Parser::Terminal::ID,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::END_PREAMBLE,
    Parser::Nonterminal_::scanner_modes,
    Parser::Terminal::DIRECTIVE_STATE,
    Parser::Nonterminal_::scanner_mode,
    Parser::Terminal::ERROR_,
    Parser::Terminal::ID,
    ':',
    Parser::Terminal::REGEX,
    Parser::Nonterminal_::scanner_mode_rules,
    Parser::Nonterminal_::rule_list,
    Parser::Nonterminal_::rule,
    Parser::Nonterminal_::rule_handlers,
    Parser::Terminal::ERROR_,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Nonterminal_::rule_handler,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Nonterminal_::any_type_of_code_block,
    '.',
    Parser::Terminal::ERROR_,
    Parser::Terminal::ID,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Nonterminal_::any_type_of_code_block,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Nonterminal_::any_type_of_code_block,
    ';',
    '|',
    Parser::Terminal::REGEX,
    Parser::Nonterminal_::rule,
    ':',
    Parser::Terminal::ERROR_,
    Parser::Terminal::REGEX,
    Parser::Nonterminal_::scanner_mode_rules,
    Parser::Nonterminal_::rule_list,
    Parser::Nonterminal_::rule,
    ';',
    ';',
    Parser::Terminal::DIRECTIVE_TARGETS,
    Parser::Nonterminal_::targets_directive,
    Parser::Nonterminal_::target_ids,
    Parser::Terminal::ID,
    Parser::Nonterminal_::target_directives,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Nonterminal_::target_directive,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Nonterminal_::target_directive,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::ID,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Terminal::STRING_LITERAL,
    Parser::Nonterminal_::target_directive_param,
    Parser::Nonterminal_::macro_directives,
    Parser::Terminal::DIRECTIVE_MACRO,
    Parser::Terminal::DIRECTIVE_START_IN_SCANNER_MODE,
    Parser::Nonterminal_::start_in_scanner_mode_directive,
    Parser::Nonterminal_::scanner_modes,
    Parser::Terminal::DIRECTIVE_STATE,
    Parser::Nonterminal_::scanner_mode,
    Parser::Terminal::DIRECTIVE_STATE,
    Parser::Nonterminal_::scanner_mode,
    Parser::Terminal::REGEX,
    Parser::Nonterminal_::scanner_mode_rules,
    Parser::Nonterminal_::rule_list,
    Parser::Nonterminal_::rule,
    Parser::Terminal::REGEX,
    Parser::Nonterminal_::rule_list,
    Parser::Nonterminal_::rule,
    '|',
    Parser::Terminal::REGEX,
    Parser::Nonterminal_::rule,
    Parser::Nonterminal_::rule_handlers,
    Parser::Terminal::ERROR_,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Nonterminal_::rule_handler,
    Parser::Terminal::ERROR_,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Nonterminal_::rule_handler,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Nonterminal_::any_type_of_code_block,
    Parser::Nonterminal_::at_least_zero_newlines,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE
};
TrisonCpp_::Size const Parser::ms_lookahead_count_ = sizeof(Parser::ms_lookahead_table_) / sizeof(*Parser::ms_lookahead_table_);

char const *const Parser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "BAD_TOKEN",
    "DIRECTIVE_MACRO",
    "DIRECTIVE_START_IN_SCANNER_MODE",
    "DIRECTIVE_STATE",
    "DIRECTIVE_TARGET",
    "DIRECTIVE_TARGETS",
    "DUMB_CODE_BLOCK",
    "END_PREAMBLE",
    "ID",
    "NEWLINE",
    "REGEX",
    "STRICT_CODE_BLOCK",
    "STRING_LITERAL",
    "root",
    "targets_directive",
    "target_ids",
    "target_directives",
    "target_directive",
    "target_directive_param",
    "macro_directives",
    "start_in_scanner_mode_directive",
    "scanner_modes",
    "scanner_mode",
    "scanner_mode_rules",
    "rule_list",
    "rule",
    "rule_handlers",
    "rule_handler",
    "any_type_of_code_block",
    "at_least_zero_newlines",
    "at_least_one_newline"
};
TrisonCpp_::Size const Parser::ms_token_name_count_ = sizeof(Parser::ms_token_name_table_) / sizeof(*Parser::ms_token_name_table_);

enum
{
    TABLE_SIZE_ASSERTIONS_ =
        TrisonCpp_::Assert<Parser::ms_rule_count_ == 45>::v &&
        TrisonCpp_::Assert<Parser::ms_state_count_ == 112>::v &&
        TrisonCpp_::Assert<Parser::ms_transition_count_ == 265>::v &&
        TrisonCpp_::Assert<Parser::ms_lookahead_count_ == 153>::v &&
        TrisonCpp_::Assert<Parser::ms_token_name_count_ == 289>::v
};

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 87 "reflex_parser.trison"

bool Parser::OpenFile (string const &input_filename)
{
    ResetForNewInput();
    return m_scanner.OpenFile(input_filename);
}

} // end of namespace Reflex

#line 2259 "reflex_parser.cpp"
