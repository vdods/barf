// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// calculator_parser.cpp generated by trison
// from calculator_parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "calculator_parser.hpp"


#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 49 "calculator_parser.trison"

#include "calculator_scanner.hpp"

#define MODULO(x) (m_modulus == 0 ? x : fmod(x, m_modulus))

namespace Calculator {

#line 21 "calculator_parser.cpp"

Parser::Parser ()
{
    DebugSpew(false);


#line 56 "calculator_parser.trison"

    m_scanner = NULL;
    m_last_result = 0.0;
    m_modulus = 0.0;
    m_should_print_result = true;

#line 35 "calculator_parser.cpp"
}

Parser::~Parser ()
{
    // clean up dynamically allocated memory.
    ClearStack_();
    ClearLookaheadQueue_();



#line 62 "calculator_parser.trison"

    delete m_scanner;
    m_scanner = NULL;

#line 51 "calculator_parser.cpp"
}

bool Parser::IsAtEndOfInput ()
{
    return Lookahead_(0).m_id == Terminal::END_;
}

void Parser::ResetForNewInput ()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " executing reset-for-new-input actions" << std::endl)
    
    // clean up stuff that might be hanging around from the last parse's input.
    ClearStack_();
    ClearLookaheadQueue_();
}

Parser::ParserReturnCode Parser::Parse (double *return_token, ParseNonterminal::Name nonterminal_to_parse)
{

#line 66 "calculator_parser.trison"

    m_should_print_result = true;

#line 75 "calculator_parser.cpp"

    return Parse_(return_token, nonterminal_to_parse);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

Parser::ParserReturnCode Parser::Parse_ (double *return_token, ParseNonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " starting parse" << std::endl)

    ParserReturnCode parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
    *return_token = 0.0;

    // make sure all our structures are empty and variables initialized.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();
    m_is_in_error_panic_ = false;

    // push the initial state of the DPDA.
    assert((false
           || nonterminal_to_parse == ParseNonterminal::at_least_zero_newlines
           || nonterminal_to_parse == ParseNonterminal::command
           || nonterminal_to_parse == ParseNonterminal::expression
           || nonterminal_to_parse == ParseNonterminal::root
           ) && "invalid nonterminal_to_parse");
    m_stack_.push_back(StackElement_(nonterminal_to_parse, 0.0));
    // main parser loop
    while (true)
    {
        if (m_is_in_error_panic_)
        {
            TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " begin error panic" << std::endl)

            while (true)
            {
                // get the current state (top of the stack)
                assert(!m_stack_.empty());
                BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
                assert(current_state_index < ms_state_count_);
                State_ const &current_state = ms_state_table_[current_state_index];
                TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr))

                // check if the current state accepts ERROR_ (only need to check the
                // non-default transitions, since the default transition can't be a shift).
                bool accepts_error = false;
                for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                       *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                     transition != transition_end;
                     ++transition)
                {
                    if (transition->m_type == Transition_::SHIFT && transition->m_lookahead_count == 1 && *transition->m_lookahead_sequence == Terminal::ERROR_)
                    {
                        accepts_error = true;
                        break;
                    }
                }

                if (accepts_error)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " end error panic; success (current state accepts ERROR_ token)" << std::endl)
                    // if the current state accepts error, then we check if the lookahead token
                    // is Terminal::END_.  if it is, then we add a dummy Terminal::ERROR_ token
                    // in before it (since %error can't accept END_).  otherwise, we throw away
                    // the lookahead token, then clear the thrown-away token data, and set the
                    // token id to ERROR_.
                    assert(!m_lookahead_queue_.empty());
                    if (m_lookahead_queue_[0].m_id == Terminal::END_)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " deferring Terminal::END_ (padding with Terminal::ERROR_ token)" << std::endl)
                        m_lookahead_queue_.push_front(Token(Terminal::END_)); // dummy value
                    }
                    else
                        ThrowAwayToken_(m_lookahead_queue_[0].m_data);
                    m_lookahead_queue_[0].m_id = Terminal::ERROR_;
                    m_lookahead_queue_[0].m_data = 0.0;
                    m_is_in_error_panic_ = false;
                    break;
                }
                else
                {
                    if (m_stack_.size() > 1)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " continue error panic; pop stack (current state doesn't accept ERROR_ token)" << std::endl)
                    }
                    else
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " end error panic; abort (stack is empty)" << std::endl)
                    }
                    // otherwise throw away the data at the top of the stack, and pop the stack.
                    // then if the stack is empty, an unhandled parse error occurred.
                    ThrowAwayToken_(m_stack_.rbegin()->m_token_data);
                    m_stack_.resize(m_stack_.size()-1);
                    if (m_stack_.empty())
                    {
                        // parser_return_code_ and return_token are already appropriately
                        // set, so just break out of the inner loop.
                        break;
                    }
                }
            }

            // if we're still in error panic, then this indicates that we bottomed-
            // out the stack and it's an unhandled parse error, so break from the
            // main loop.
            if (m_is_in_error_panic_)
                break;
        }
        else // !m_is_in_error_panic_
        {
            // get the current state (top of the stack)
            assert(!m_stack_.empty());
            BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
            assert(current_state_index < ms_state_count_);
            State_ const &current_state = ms_state_table_[current_state_index];
            TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr))

            // TODO -- binary search for faster transition matching?

            // loop through the current state's transitions and see if any match
            bool transition_exercised = false;
            BarfCpp_::Uint32 tested_lookahead_count = 0;
            for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                   *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                transition != transition_end;
                ++transition)
            {
                // the non-default transitions can only be REDUCE or SHIFT
                assert(transition->m_type == Transition_::REDUCE || transition->m_type == Transition_::SHIFT);

                // check if the lookaheads match those of this transition.
                bool lookahead_sequence_matched = true;
                for (BarfCpp_::Uint32 i = 0; i < transition->m_lookahead_count; ++i)
                {
                    if (Lookahead_(i).m_id != transition->m_lookahead_sequence[i])
                    {
                        lookahead_sequence_matched = false;
                        break;
                    }
                    else
                    {
                        if (i+1 > tested_lookahead_count)
                            tested_lookahead_count = i+1;
                    }
                }

                // if all the lookaheads matched, then exercise this transition,
                // and break out of this inner (transition) loop.
                if (lookahead_sequence_matched)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " current (relevant) lookahead(s):")
                    for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i))
                    }
                    TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl)

                    ExerciseTransition_(*transition);
                    transition_exercised = true;
                    break;
                }
            }

            // if no transition was exercised, then exercise the default transition
            if (!transition_exercised)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " current (relevant) lookahead(s):")
                for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i))
                }
                TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl)

                TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " exercising default transition" << std::endl)
                // exercise the default transition.  a return value of true indicates
                // that the parser should return.
                if (ExerciseTransition_(*current_state.m_transition_table))
                {
                    // the token (data) on the top of the stack is the return token.
                    // set parser_return_code_ and assign the top stack token data to
                    // *return_token and then break out of the main parser loop.
                    assert(m_stack_[0].m_state_index == BarfCpp_::Uint32(nonterminal_to_parse));
                    assert(m_stack_.size() == 2);
                    parser_return_code_ = PRC_SUCCESS;
                    *return_token = m_stack_.rbegin()->m_token_data;
                    // take the return token out of the stack, so it's not thrown away
                    // when we clear the stack later.
                    m_stack_.rbegin()->m_token_data = 0.0;
                    break;
                }
            }
        }
    }

    // clear the stack, because we won't need it for the next parse.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();

    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_SUCCESS) std::cerr << "Parser:" << " Parse() is returning PRC_SUCCESS" << std::endl)
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_UNHANDLED_PARSE_ERROR) std::cerr << "Parser:" << " Parse() is returning PRC_UNHANDLED_PARSE_ERROR" << std::endl)

    return parser_return_code_;
}

void Parser::ThrowAwayToken_ (Token::Data &token_data) throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " executing throw-away-token actions" << std::endl)

}

Parser::Token Parser::Scan_ () throw()
{

#line 84 "calculator_parser.trison"

    assert(m_scanner != NULL);
    return m_scanner->Scan();

#line 301 "calculator_parser.cpp"
}

void Parser::ClearStack_ () throw()
{
    if (m_stack_.empty())
        return; // nothing to do

    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " clearing the stack" << std::endl)

    Stack_::iterator it = m_stack_.begin();
    Stack_::iterator it_end = m_stack_.end();
    // skip the bottom of the stack, since it
    // contains the start state and no token data.
    ++it;
    for ( ; it != it_end; ++it)
        ThrowAwayToken_(it->m_token_data);
    m_stack_.clear();
}

void Parser::ClearLookaheadQueue_ () throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " clearing the lookahead queue" << std::endl)

    for (LookaheadQueue_::iterator it = m_lookahead_queue_.begin(), it_end = m_lookahead_queue_.end(); it != it_end; ++it)
        ThrowAwayToken_(it->m_data);
    m_lookahead_queue_.clear();
}

Parser::Token const &Parser::Lookahead_ (LookaheadQueue_::size_type index) throw()
{
    while (index >= m_lookahead_queue_.size())
    {
        m_lookahead_queue_.push_back(Scan_());

        TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " pushed " << *m_lookahead_queue_.rbegin() << " onto back of lookahead queue" << std::endl)
    }
    return m_lookahead_queue_[index];
}

bool Parser::ExerciseTransition_ (Transition_ const &transition)
{
    switch (transition.m_type)
    {
        case Transition_::REDUCE:
        {
            // execute the indicated reduction rule, push the returned Token
            // onto the front of the lookahead queue, then pop the corresponding
            // number of stack elements.
            assert(transition.m_data < ms_rule_count_);
            Rule_ const &rule = ms_rule_table_[transition.m_data];
            TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " REDUCE " << rule.m_description << std::endl)
            assert(m_stack_.size() > rule.m_token_count);
            m_lookahead_queue_.push_front(
                Token(
                    rule.m_reduction_nonterminal_token_id,
                    ExecuteReductionRule_(transition.m_data)));
            m_stack_.resize(m_stack_.size() - rule.m_token_count);
            assert(rule.m_reduction_nonterminal_token_id < ms_token_name_count_);
            TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " pushed " << Token(rule.m_reduction_nonterminal_token_id) << " onto front of lookahead queue" << std::endl)
            return false; // indicating the parser isn't returning
        }

        case Transition_::RETURN:
            TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " RETURN" << std::endl)
            return true; // indicating the parser is returning

        case Transition_::SHIFT:
            // push the state (indicated by the shift transition) and token data
            // onto the stack, then pop the corresponding lookahead.
            assert(transition.m_data < ms_state_count_);
            assert(Lookahead_(0).m_id < ms_token_name_count_); // at this point, we're past a possible
                                                               // client error, so asserting here is ok.
            TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " SHIFT " << Lookahead_(0) << std::endl)
            m_stack_.push_back(StackElement_(transition.m_data, Lookahead_(0).m_data));
            m_lookahead_queue_.pop_front();
            return false; // indicating the parser isn't returning

        case Transition_::ERROR_PANIC:
            TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " ERROR_PANIC" << std::endl)
            m_is_in_error_panic_ = true;
            return false; // indicating the parser isn't returning

        default:
            assert(false && "invalid transition type (bad state machine, or memory corruption)");
            return false; // indicating the parser isn't returning
    }
}

Parser::Token::Data Parser::ExecuteReductionRule_ (BarfCpp_::Uint32 const rule_index_) throw()
{
    assert(rule_index_ < ms_rule_count_);
    TRISON_CPP_DEBUG_CODE_(std::cerr << "Parser:" << " executing reduction rule " << rule_index_ << std::endl)
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return 0.0;

        case 0:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 114 "calculator_parser.trison"

        m_should_print_result = false;
        return 0.0;
    
#line 409 "calculator_parser.cpp"
            break;
        }

        case 1:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double result(m_stack_[m_stack_.size()-1].m_token_data);

#line 120 "calculator_parser.trison"

        result = MODULO(result);
        if (m_should_print_result)
            m_last_result = result;
        return result;
    
#line 425 "calculator_parser.cpp"
            break;
        }

        case 2:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 128 "calculator_parser.trison"

        m_should_print_result = false;
        return 0.0;
    
#line 438 "calculator_parser.cpp"
            break;
        }

        case 3:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double lhs(m_stack_[m_stack_.size()-3].m_token_data);
            double rhs(m_stack_[m_stack_.size()-1].m_token_data);

#line 136 "calculator_parser.trison"
 return MODULO(lhs + rhs); 
#line 450 "calculator_parser.cpp"
            break;
        }

        case 4:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double lhs(m_stack_[m_stack_.size()-3].m_token_data);
            double rhs(m_stack_[m_stack_.size()-1].m_token_data);

#line 138 "calculator_parser.trison"
 return MODULO(lhs - rhs); 
#line 462 "calculator_parser.cpp"
            break;
        }

        case 5:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double lhs(m_stack_[m_stack_.size()-3].m_token_data);
            double rhs(m_stack_[m_stack_.size()-1].m_token_data);

#line 140 "calculator_parser.trison"
 return MODULO(lhs * rhs); 
#line 474 "calculator_parser.cpp"
            break;
        }

        case 6:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double lhs(m_stack_[m_stack_.size()-3].m_token_data);
            double rhs(m_stack_[m_stack_.size()-1].m_token_data);

#line 143 "calculator_parser.trison"

        if (rhs == 0.0)
        {
            cerr << "error: divide by zero" << endl;
            m_should_print_result = false;
            return 1.0; // arbitrary non-zero return value
        }
        else
            return lhs / rhs;
    
#line 495 "calculator_parser.cpp"
            break;
        }

        case 7:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double ex(m_stack_[m_stack_.size()-1].m_token_data);

#line 154 "calculator_parser.trison"
 return MODULO(ex); 
#line 506 "calculator_parser.cpp"
            break;
        }

        case 8:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double ex(m_stack_[m_stack_.size()-1].m_token_data);

#line 156 "calculator_parser.trison"
 return MODULO(-ex); 
#line 517 "calculator_parser.cpp"
            break;
        }

        case 9:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double ex(m_stack_[m_stack_.size()-2].m_token_data);

#line 158 "calculator_parser.trison"
 return log(ex); 
#line 528 "calculator_parser.cpp"
            break;
        }

        case 10:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double base(m_stack_[m_stack_.size()-3].m_token_data);
            double power(m_stack_[m_stack_.size()-1].m_token_data);

#line 161 "calculator_parser.trison"

        if (base == 0.0 && power == 0.0)
        {
            cerr << "error: taking 0 to the 0 power" << endl;
            m_should_print_result = false;
            return 1.0; // arbitrary non-zero return value
        }
        else
            return MODULO(pow(base, power));
    
#line 549 "calculator_parser.cpp"
            break;
        }

        case 11:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double ex(m_stack_[m_stack_.size()-2].m_token_data);

#line 172 "calculator_parser.trison"
 return ex; 
#line 560 "calculator_parser.cpp"
            break;
        }

        case 12:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double number(m_stack_[m_stack_.size()-1].m_token_data);

#line 174 "calculator_parser.trison"
 return MODULO(number); 
#line 571 "calculator_parser.cpp"
            break;
        }

        case 13:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 176 "calculator_parser.trison"
 return m_last_result; 
#line 581 "calculator_parser.cpp"
            break;
        }

        case 14:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 182 "calculator_parser.trison"

        cout << "Operators\n"
                "  + - * / ^ ( )\n"
                "Symbols\n"
                "  r          - The value of the previous result.\n"
                "  pi         - The ratio of a circle's circumference to its diameter.\n"
                "  e          - The base of the natural logarithm.\n"
                "Functions\n"
                "  log        - The natural logarithm (base e).\n"
                "Commands\n"
                "  \\help      - This help screen.\n"
                "  \\mod [arg] - Sets the modulus (i.e. modulo arithmetic).  Giving no\n"
                "               argument will print the current modulus.  A modulus\n"
                "               of 0 indicates no result truncation." << endl;
        return 0.0;
    
#line 606 "calculator_parser.cpp"
            break;
        }

        case 15:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            double number(m_stack_[m_stack_.size()-1].m_token_data);

#line 200 "calculator_parser.trison"

        if (number >= 0.0)
        {
            m_modulus = number;
            cout << "current modulus set to: " << m_modulus << endl;
        }
        else
            cerr << "error: invalid modulus (must be non-negative)" << endl;
        return 0.0;
    
#line 626 "calculator_parser.cpp"
            break;
        }

        case 16:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 212 "calculator_parser.trison"

        cout << "current modulus: " << m_modulus << endl;
        return 0.0;
    
#line 639 "calculator_parser.cpp"
            break;
        }

        case 17:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 220 "calculator_parser.trison"
 return 0.0; 
#line 649 "calculator_parser.cpp"
            break;
        }

        case 18:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 222 "calculator_parser.trison"
 return 0.0; 
#line 659 "calculator_parser.cpp"
            break;
        }

    }

    assert(false && "no value returned from reduction rule code block");
    return 0.0;
}

void Parser::PrintParserStatus_ (std::ostream &stream) const
{
    assert(!m_stack_.empty());

    stream << "Parser:" << " parser stack: ";
    for (Stack_::const_iterator it = m_stack_.begin(), it_end = m_stack_.end(); it != it_end; ++it)
    {
        stream << it->m_state_index;
        Stack_::const_iterator next_it = it;
        if (++next_it != it_end)
            stream << ' ';
    }
    stream << std::endl;

    PrintIndented_(stream, ms_state_table_[m_stack_.rbegin()->m_state_index].m_description);
    stream << std::endl;
}

void Parser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << "Parser:" << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << "Parser:" << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, Parser::Token const &token)
{
    if (token.m_id < Parser::ms_token_name_count_)
        stream << '(' << Parser::ms_token_name_table_[token.m_id] << ')';
    else
        stream << "!INVALID TOKEN!";
    return stream;
}

Parser::Rule_ const Parser::ms_rule_table_[] =
{
    { Parser::Nonterminal_::root, 0, "root <-" },
    { Parser::Nonterminal_::root, 1, "root <- expression" },
    { Parser::Nonterminal_::root, 1, "root <- command" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '+' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '-' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '*' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '/' expression" },
    { Parser::Nonterminal_::expression, 2, "expression <- '+' expression" },
    { Parser::Nonterminal_::expression, 2, "expression <- '-' expression" },
    { Parser::Nonterminal_::expression, 4, "expression <- LOG '(' expression ')'" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '^' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- '(' expression ')'" },
    { Parser::Nonterminal_::expression, 1, "expression <- NUMBER" },
    { Parser::Nonterminal_::expression, 1, "expression <- RESULT" },
    { Parser::Nonterminal_::command, 2, "command <- '\\\\' HELP" },
    { Parser::Nonterminal_::command, 3, "command <- '\\\\' MOD NUMBER" },
    { Parser::Nonterminal_::command, 2, "command <- '\\\\' MOD" },
    { Parser::Nonterminal_::at_least_zero_newlines, 2, "at_least_zero_newlines <- at_least_zero_newlines NEWLINE" },
    { Parser::Nonterminal_::at_least_zero_newlines, 0, "at_least_zero_newlines <-" }
};
BarfCpp_::Size const Parser::ms_rule_count_ = sizeof(Parser::ms_rule_table_) / sizeof(*Parser::ms_rule_table_);

Parser::State_ const Parser::ms_state_table_[] =
{
    { 11, ms_transition_table_+0, "START root                                        \nrule 0: root <- .                                 \nrule 1: root <- . expression                      \nrule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   \nrule 2: root <- . command                         \nrule 14: command <- . '\\\\' HELP                   \nrule 15: command <- . '\\\\' MOD NUMBER             \nrule 16: command <- . '\\\\' MOD                    " },
    { 8, ms_transition_table_+11, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 11: expression <- '(' . expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 8, ms_transition_table_+19, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 7: expression <- '+' . expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 8, ms_transition_table_+27, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 8: expression <- '-' . expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 1, ms_transition_table_+35, "rule 12: expression <- NUMBER ." },
    { 1, ms_transition_table_+36, "rule 13: expression <- RESULT ." },
    { 2, ms_transition_table_+37, "rule 9: expression <- LOG . '(' expression ')'" },
    { 8, ms_transition_table_+39, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 9: expression <- LOG '(' . expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 7, ms_transition_table_+47, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 9: expression <- LOG '(' expression . ')'    \nrule 10: expression <- expression . '^' expression" },
    { 1, ms_transition_table_+54, "rule 9: expression <- LOG '(' expression ')' ." },
    { 8, ms_transition_table_+55, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 5: expression <- expression '*' . expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 2, ms_transition_table_+63, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 5: expression <- expression '*' expression . \nrule 6: expression <- expression . '/' expression \nrule 10: expression <- expression . '^' expression" },
    { 8, ms_transition_table_+65, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 10: expression <- expression '^' . expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 2, ms_transition_table_+73, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 10: expression <- expression . '^' expression\nrule 10: expression <- expression '^' expression ." },
    { 8, ms_transition_table_+75, "rule 3: expression <- . expression '+' expression \nrule 3: expression <- expression '+' . expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 4, ms_transition_table_+83, "rule 3: expression <- expression . '+' expression \nrule 3: expression <- expression '+' expression . \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 10: expression <- expression . '^' expression" },
    { 8, ms_transition_table_+87, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 6: expression <- expression '/' . expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 2, ms_transition_table_+95, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 6: expression <- expression '/' expression . \nrule 10: expression <- expression . '^' expression" },
    { 8, ms_transition_table_+97, "rule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 4: expression <- expression '-' . expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 4, ms_transition_table_+105, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 4: expression <- expression '-' expression . \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 10: expression <- expression . '^' expression" },
    { 2, ms_transition_table_+109, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 8: expression <- '-' expression .            \nrule 10: expression <- expression . '^' expression" },
    { 2, ms_transition_table_+111, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 7: expression <- '+' expression .            \nrule 10: expression <- expression . '^' expression" },
    { 7, ms_transition_table_+113, "rule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 10: expression <- expression . '^' expression\nrule 11: expression <- '(' expression . ')'       " },
    { 1, ms_transition_table_+120, "rule 11: expression <- '(' expression ')' ." },
    { 3, ms_transition_table_+121, "rule 14: command <- '\\\\' . HELP      \nrule 15: command <- '\\\\' . MOD NUMBER\nrule 16: command <- '\\\\' . MOD       " },
    { 1, ms_transition_table_+124, "rule 14: command <- '\\\\' HELP ." },
    { 2, ms_transition_table_+125, "rule 15: command <- '\\\\' MOD . NUMBER\nrule 16: command <- '\\\\' MOD .       " },
    { 1, ms_transition_table_+127, "rule 15: command <- '\\\\' MOD NUMBER ." },
    { 1, ms_transition_table_+128, "RETURN root" },
    { 6, ms_transition_table_+129, "rule 1: root <- expression .                      \nrule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 10: expression <- expression . '^' expression" },
    { 1, ms_transition_table_+135, "rule 2: root <- command ." },
    { 8, ms_transition_table_+136, "START expression                                  \nrule 3: expression <- . expression '+' expression \nrule 4: expression <- . expression '-' expression \nrule 5: expression <- . expression '*' expression \nrule 6: expression <- . expression '/' expression \nrule 7: expression <- . '+' expression            \nrule 8: expression <- . '-' expression            \nrule 9: expression <- . LOG '(' expression ')'    \nrule 10: expression <- . expression '^' expression\nrule 11: expression <- . '(' expression ')'       \nrule 12: expression <- . NUMBER                   \nrule 13: expression <- . RESULT                   " },
    { 6, ms_transition_table_+144, "RETURN expression                                 \nrule 3: expression <- expression . '+' expression \nrule 4: expression <- expression . '-' expression \nrule 5: expression <- expression . '*' expression \nrule 6: expression <- expression . '/' expression \nrule 10: expression <- expression . '^' expression" },
    { 3, ms_transition_table_+150, "START command                        \nrule 14: command <- . '\\\\' HELP      \nrule 15: command <- . '\\\\' MOD NUMBER\nrule 16: command <- . '\\\\' MOD       " },
    { 1, ms_transition_table_+153, "RETURN command" },
    { 2, ms_transition_table_+154, "START at_least_zero_newlines                                       \nrule 17: at_least_zero_newlines <- . at_least_zero_newlines NEWLINE\nrule 18: at_least_zero_newlines <- .                               " },
    { 2, ms_transition_table_+156, "RETURN at_least_zero_newlines                                      \nrule 17: at_least_zero_newlines <- at_least_zero_newlines . NEWLINE" },
    { 1, ms_transition_table_+158, "rule 17: at_least_zero_newlines <- at_least_zero_newlines NEWLINE ." }
};
BarfCpp_::Size const Parser::ms_state_count_ = sizeof(Parser::ms_state_table_) / sizeof(*Parser::ms_state_table_);

Parser::Transition_ const Parser::ms_transition_table_[] =
{
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+0 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+0 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+1 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+2 },
    { Parser::Transition_::SHIFT, 24, 1, ms_lookahead_table_+3 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+4 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+5 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+6 },
    { Parser::Transition_::SHIFT, 28, 1, ms_lookahead_table_+7 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+8 },
    { Parser::Transition_::SHIFT, 30, 1, ms_lookahead_table_+9 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+10 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+10 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+11 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+12 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+13 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+14 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+15 },
    { Parser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+16 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+17 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+17 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+18 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+19 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+20 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+21 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+22 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+23 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+24 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+24 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+25 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+26 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+27 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+28 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+29 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+30 },
    { Parser::Transition_::REDUCE, 12, 0, ms_lookahead_table_+31 },
    { Parser::Transition_::REDUCE, 13, 0, ms_lookahead_table_+31 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+31 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+31 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+32 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+32 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+33 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+34 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+35 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+36 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+37 },
    { Parser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+38 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+39 },
    { Parser::Transition_::SHIFT, 9, 1, ms_lookahead_table_+39 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+40 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+41 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+42 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+43 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+44 },
    { Parser::Transition_::REDUCE, 9, 0, ms_lookahead_table_+45 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+45 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+45 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+46 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+47 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+48 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+49 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+50 },
    { Parser::Transition_::SHIFT, 11, 1, ms_lookahead_table_+51 },
    { Parser::Transition_::REDUCE, 5, 0, ms_lookahead_table_+52 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+52 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+53 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+53 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+54 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+55 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+56 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+57 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+58 },
    { Parser::Transition_::SHIFT, 13, 1, ms_lookahead_table_+59 },
    { Parser::Transition_::REDUCE, 10, 0, ms_lookahead_table_+60 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+60 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+61 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+61 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+62 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+63 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+64 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+65 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+66 },
    { Parser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+67 },
    { Parser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+68 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+68 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+69 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+70 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+71 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+71 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+72 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+73 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+74 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+75 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+76 },
    { Parser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+77 },
    { Parser::Transition_::REDUCE, 6, 0, ms_lookahead_table_+78 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+78 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+79 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+79 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+80 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+81 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+82 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+83 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+84 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+85 },
    { Parser::Transition_::REDUCE, 4, 0, ms_lookahead_table_+86 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+86 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+87 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+88 },
    { Parser::Transition_::REDUCE, 8, 0, ms_lookahead_table_+89 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+89 },
    { Parser::Transition_::REDUCE, 7, 0, ms_lookahead_table_+90 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+90 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+91 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+91 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+92 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+93 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+94 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+95 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+96 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+97 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+97 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+97 },
    { Parser::Transition_::SHIFT, 26, 1, ms_lookahead_table_+98 },
    { Parser::Transition_::REDUCE, 14, 0, ms_lookahead_table_+99 },
    { Parser::Transition_::REDUCE, 16, 0, ms_lookahead_table_+99 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+99 },
    { Parser::Transition_::REDUCE, 15, 0, ms_lookahead_table_+100 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+100 },
    { Parser::Transition_::REDUCE, 1, 0, ms_lookahead_table_+100 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+100 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+101 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+102 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+103 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+104 },
    { Parser::Transition_::REDUCE, 2, 0, ms_lookahead_table_+105 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+105 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+105 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+106 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+107 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+108 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+109 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+110 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+111 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+112 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+112 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+113 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+114 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+115 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+116 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+117 },
    { Parser::Transition_::SHIFT, 24, 1, ms_lookahead_table_+117 },
    { Parser::Transition_::SHIFT, 34, 1, ms_lookahead_table_+118 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+119 },
    { Parser::Transition_::REDUCE, 18, 0, ms_lookahead_table_+119 },
    { Parser::Transition_::SHIFT, 36, 1, ms_lookahead_table_+119 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+120 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+120 },
    { Parser::Transition_::REDUCE, 17, 0, ms_lookahead_table_+121 }
};
BarfCpp_::Size const Parser::ms_transition_count_ = sizeof(Parser::ms_transition_table_) / sizeof(*Parser::ms_transition_table_);

Parser::Token::Id const Parser::ms_lookahead_table_[] =
{
    '(',
    '+',
    '-',
    '\\',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::root,
    Parser::Nonterminal_::expression,
    Parser::Nonterminal_::command,
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '(',
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    ')',
    '*',
    '+',
    '-',
    '/',
    '^',
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '^',
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '^',
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '*',
    '/',
    '^',
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '^',
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '*',
    '/',
    '^',
    '^',
    '^',
    ')',
    '*',
    '+',
    '-',
    '/',
    '^',
    Parser::Terminal::HELP,
    Parser::Terminal::MOD,
    Parser::Terminal::NUMBER,
    '*',
    '+',
    '-',
    '/',
    '^',
    '(',
    '+',
    '-',
    Parser::Terminal::NUMBER,
    Parser::Terminal::RESULT,
    Parser::Terminal::LOG,
    Parser::Nonterminal_::expression,
    '*',
    '+',
    '-',
    '/',
    '^',
    '\\',
    Parser::Nonterminal_::command,
    Parser::Nonterminal_::at_least_zero_newlines,
    Parser::Terminal::NEWLINE
};
BarfCpp_::Size const Parser::ms_lookahead_count_ = sizeof(Parser::ms_lookahead_table_) / sizeof(*Parser::ms_lookahead_table_);

char const *const Parser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "BAD_TOKEN",
    "NEWLINE",
    "NUMBER",
    "RESULT",
    "HELP",
    "MOD",
    "LOG",
    "root",
    "expression",
    "command",
    "at_least_zero_newlines"
};
BarfCpp_::Size const Parser::ms_token_name_count_ = sizeof(Parser::ms_token_name_table_) / sizeof(*Parser::ms_token_name_table_);

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 69 "calculator_parser.trison"

void Parser::SetInputString (string const &input_string)
{
    if (m_scanner != NULL)
        delete m_scanner;
    m_scanner = new Scanner(input_string);
    ResetForNewInput();
}

} // end of namespace Calculator

#line 1358 "calculator_parser.cpp"
