private:

    struct Rule_
    {
        Token::Id m_reduction_nonterminal_token_id;
        std::uint32_t m_token_count;
<|if(is_defined(generate_debug_spew_code))
        char const *m_description;
<|end_if
    }; // end of struct <{class_name}::Rule_

    struct State_
    {
        std::size_t const m_transition_count; // TODO: smallest int
        Transition_ const *m_transition_table;
<|if(is_defined(generate_debug_spew_code))
        char const *m_description;
<|end_if
    }; // end of struct <{class_name}::State_

    struct Transition_
    {
        enum Type { ERROR_PANIC = 0, RETURN, REDUCE, SHIFT };
        std::uint8_t m_type;
        std::uint32_t m_data; // TODO: smallest int
        std::uint32_t m_lookahead_count; // TODO smallest int
        Token::Id const *m_lookahead_sequence;
    }; // end of struct <{class_name}::Transition_

    void ClearStack_ () throw();
    void ClearLookaheadQueue_ () throw();
    Token const &Lookahead_ (LookaheadQueue_::size_type index)<{if(!is_defined(enable_scan_actions_exceptions))} throw()<{end_if};
    bool ExerciseTransition_ (Transition_ const &transition);
    Token::Data ExecuteReductionRule_ (std::uint32_t const rule_index_)<{if(!is_defined(enable_reduction_rule_exceptions))} throw()<{end_if};

    Stack_ m_stack_;
    LookaheadQueue_ m_lookahead_queue_;
    bool m_is_in_error_panic_;

    static Token::Id const ms_lookahead_table_[];
    static std::size_t const ms_lookahead_count_;
