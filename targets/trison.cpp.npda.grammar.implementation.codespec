bool <{class_name}::Grammar_::CompareRuleByPrecedence_ (std::uint32_t lhs_rule_index, std::uint32_t rhs_rule_index)
{
    if (ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level != ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level)
        return ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level > ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level;
    else
        return lhs_rule_index < rhs_rule_index;
}

// These values are prescribed within trison and can't be changed.
char const *const <{class_name}::Grammar_::ms_associativity_string_table_[] =
{
    "%left",
    "%nonassoc",
    "%right",
};

std::size_t const <{class_name}::Grammar_::ms_associativity_count_ = sizeof(<{class_name}::Grammar_::ms_associativity_string_table_) / sizeof(*<{class_name}::Grammar_::ms_associativity_string_table_);

<{class_name}::Grammar_::Precedence_ const <{class_name}::Grammar_::ms_precedence_table_[] =
{
<|  loop(i, _precedence_count)
    { <{_precedence_level[i]}, <{class_name}::Grammar_::Associativity(<{_precedence_associativity_index[i]})<{if(is_defined(generate_debug_spew_code))}, "<{_precedence_name[i]}"<{end_if} }<{if(i < _precedence_count-1)},<{end_if}
<|  end_loop
};

std::size_t const <{class_name}::Grammar_::ms_precedence_count_ = sizeof(<{class_name}::Grammar_::ms_precedence_table_) / sizeof(*<{class_name}::Grammar_::ms_precedence_table_);

<{class_name}::Grammar_::Rule_ const <{class_name}::Grammar_::ms_rule_table_[] =
{
<|  loop(i, _rule_count)
    { <{class_name}::Nonterminal::<{_rule_reduction_nonterminal_name[i]}, <{_rule_token_count[i]}, <{_rule_precedence_index[i]}<{if(is_defined(generate_debug_spew_code))}, <{_rule_description[i]}<{end_if} }<{if(i < _rule_count-1)},<{end_if}
<|  end_loop
};
std::size_t const <{class_name}::Grammar_::ms_rule_count_ = sizeof(<{class_name}::Grammar_::ms_rule_table_) / sizeof(*<{class_name}::Grammar_::ms_rule_table_);
