<|if(is_defined(constructor_definition_parameters) && !is_defined(constructor_parameters))
<|  error("can't specify constructor_definition_parameters without specifying constructor_parameters")
<|end_if
<|if(is_defined(parse_method_definition_parameters) && !is_defined(parse_method_parameters))
<|  error("can't specify parse_method_definition_parameters without specifying parse_method_parameters")
<|end_if
<|if(!is_defined(debug_spew_prefix))
<{  define(debug_spew_prefix)}"<{class_name}: "<|end_define
<|end_if
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// <{implementation_filename} generated by trison<{if(!is_defined(dont_generate_timestamps))} at <{_creation_timestamp}<{end_if}
// from <{_source_filename} using <{_targetspec_filename} and <{_codespec_filename}
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "<{header_filename}"

<{define(use_npda)}true<|end_define

<|if(is_defined(generate_debug_spew_code))

#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpewIsEnabled()) { spew_code; }
<|end_if

<|if(is_defined(use_npda))
#include <algorithm>
#include <limits>
#include <sstream>
#include <utility>

<|end_if
<|top_of_implementation_file?

<{class_name}::<{class_name} (<{if(is_defined(constructor_definition_parameters))}<{constructor_definition_parameters}<{else}<{constructor_parameters?}<{end_if})
<|if(is_defined(superclass_and_member_constructors))
    :
<|superclass_and_member_constructors
<|end_if
{
<|if(is_defined(generate_debug_spew_code))
    SetDebugSpewStream(NULL);
<|end_if
<|if(is_defined(constructor_actions))

<|constructor_actions
<|end_if
}

<{class_name}::~<{class_name} ()
{
<|if(!is_defined(use_npda))
    // clean up dynamically allocated memory.
    ClearStack_();
    ClearLookaheadQueue_();

<|end_if
<|if(is_defined(destructor_actions))

<|destructor_actions
<|end_if
}

bool <{class_name}::IsAtEndOfInput ()
{
<|if(!is_defined(use_npda))
    return Lookahead_(0).m_id == Terminal::END_;
<|else
    return true; // TEMP
<|end_if
}

std::string <{class_name}::DebugSpewPrefix () const
{
    std::ostringstream out;
    out << <{debug_spew_prefix};
    return out.str();
}

void <{class_name}::ResetForNewInput ()
{
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Executing reset-for-new-input actions\n")

<|end_if
<|if(!is_defined(use_npda))
    // clean up stuff that might be hanging around from the last parse's input.
    ClearStack_();
    ClearLookaheadQueue_();
<|end_if
<|if(is_defined(reset_for_new_input_actions))

<|reset_for_new_input_actions
<|end_if
}

<{class_name}::ParserReturnCode <{class_name}::Parse (<{token_data_type} *return_token, Nonterminal::Name nonterminal_to_parse)
{
<|if(is_defined(top_of_parse_method_actions))
<|top_of_parse_method_actions

<|end_if
<|if(is_defined(bottom_of_parse_method_actions))
    ParserReturnCode const parse_return_code = Parse_(return_token, nonterminal_to_parse);

<|bottom_of_parse_method_actions

    return parse_return_code;
<|else
    return Parse_(return_token, nonterminal_to_parse);
<|end_if
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

<|if(is_defined(generate_debug_spew_code))
void <{class_name}::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << <{debug_spew_prefix} << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << <{debug_spew_prefix} << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, <{class_name}::ParserReturnCode parser_return_code)
{
    if (std::size_t(parser_return_code) < <{class_name}::ms_parser_return_code_string_count_)
        stream << <{class_name}::ms_parser_return_code_string_table_[std::size_t(parser_return_code)];
    else
        stream << "!INVALID!ParserReturnCode!";
    return stream;
}

std::ostream &operator << (std::ostream &stream, <{class_name}::Token const &token)
{
    if (token.m_id < <{class_name}::ms_token_name_count_)
        stream << <{class_name}::ms_token_name_table_[token.m_id];
    else
        stream << "!INVALID!TOKEN!";
    return stream;
}

char const *const <{class_name}::ms_parser_return_code_string_table_[] =
{
    "PRC_SUCCESS",
    "PRC_UNHANDLED_PARSE_ERROR",
    "PRC_EXCEEDED_MAX_ALLOWABLE_LOOKAHEADS",
    "PRC_INTERNAL_ERROR",
};
std::size_t const <{class_name}::ms_parser_return_code_string_count_ = sizeof(<{class_name}::ms_parser_return_code_string_table_) / sizeof(*<{class_name}::ms_parser_return_code_string_table_);

char const *const <{class_name}::ms_token_name_table_[] =
{
<|loop(i, 256+sizeof(_terminal_name_list)+sizeof(_nonterminal_name_list)-1)
<|if(i < 256)
    <|to_string_literal(to_character_literal(i))
<|else_if(i < 256+sizeof(_terminal_name_list))
    <|to_string_literal(_terminal_name_list[i-256])
<|else
    <|to_string_literal(_nonterminal_name_list[i-(256+sizeof(_terminal_name_list))+1])
<|end_if
<{if(i < 256+sizeof(_terminal_name_list)+sizeof(_nonterminal_name_list)-1-1)},<{end_if}
<|end_loop
};
std::size_t const <{class_name}::ms_token_name_count_ = sizeof(<{class_name}::ms_token_name_table_) / sizeof(*<{class_name}::ms_token_name_table_);

<|end_if

void <{class_name}::ThrowAwayToken_ (Token &token_) throw()
{
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Executing throw-away-token actions on token " << token_ << '\n')

<|end_if
    ThrowAwayTokenData_(token_.m_data);
}

void <{class_name}::ThrowAwayTokenData_ (<{token_data_type} &token_data) throw()
{
<|throw_away_token_actions?
}

<{class_name}::Token <{class_name}::Scan_ ()<{if(!is_defined(enable_scan_actions_exceptions))} throw()<{end_if}
{
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Executing scan actions\n")

<|end_if
<|scan_actions
}

<|if(is_defined(use_npda))
<|  include("trison.cpp.npda.implementation.codespec")
<|else
<|  include("trison.cpp.dpda.implementation.codespec")
<|end_if

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////

<|bottom_of_implementation_file?
