    struct Grammar_
    {
        // These values are prescribed within trison and can't be changed.
        enum Associativity : std::uint32_t
        {
            ASSOC_LEFT      = 0, // %left
            ASSOC_NONASSOC  = 1, // %nonassoc
            ASSOC_RIGHT     = 2  // %right
        };

        // TODO: Rename to Precedence
        struct Precedence_
        {
            // Default precedence is always 0, higher values have higher precedence.
            std::int32_t    m_level;
            Associativity   m_associativity;
<|          if(is_defined(generate_debug_spew_code))
            char const *    m_name;
<|          end_if
        }; // end of struct <{class_name}::Grammar_::Precedence_

        // TODO: Rename to Rule
        struct Rule_
        {
            Token::Id       m_reduction_nonterminal_token_id;
            std::uint32_t   m_token_count;
            bool            m_has_lookahead_directive;
            std::uint32_t   m_precedence_index;
<|          if(is_defined(generate_debug_spew_code))
            char const *    m_description;
<|          end_if
        }; // end of struct <{class_name}::Grammar_::Rule_

        // TODO: Get rid of trailing _ chars

        // Returns true iff lhs_rule_index denotes a rule with a higher precedence than that denoted by rhs_rule_index.
        static bool CompareRuleByPrecedence_ (std::uint32_t lhs_rule_index, std::uint32_t rhs_rule_index);

        static char const *const    ms_associativity_string_table_[];
        static std::size_t const    ms_associativity_count_;
        // TODO: rename to PRECEDENCE_TABLE and RULE_TABLE ?
        static Precedence_ const    ms_precedence_table_[];
        static std::size_t const    ms_precedence_count_;
        static std::size_t const    ms_default_precedence_index_;
        static Rule_ const          ms_rule_table_[];
        static std::size_t const    ms_rule_count_;
    }; // end of struct <{class_name}::Grammar_
