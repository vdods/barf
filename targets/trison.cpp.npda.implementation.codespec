#include <algorithm>
#include <limits>

std::uint32_t <{class_name}::NonterminalStartStateIndex_ (<{class_name}::Nonterminal::Name nonterminal)
{
    switch (nonterminal)
    {
<|for_each(key, _npda_nonterminal_start_state_index)
        case Nonterminal::<{key}: return <{_npda_nonterminal_start_state_index[key]};
<|end_for_each
        default: assert(false && "invalid nonterminal"); return 0;
    }
}

<{class_name}::ParserReturnCode <{class_name}::Parse_ (<{token_data_type} *return_token, Nonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(std::cerr << <{debug_spew_prefix} << " starting parse" << std::endl)
<|end_if

    ParserReturnCode parser_return_code_ = PRC_INTERNAL_ERROR;
    *return_token = <{token_data_default};

<|if(is_defined(enable_scan_actions_exceptions) || is_defined(enable_reduction_rule_exceptions))
    // this is the try {} block generated by specifying the
    // %target.cpp.enable_scan_actions_exceptions or
    // %target.cpp.enable_reduction_rule_exceptions directives in the
    // primary source, to allow necessary cleanup if the scan actions
    // or a reduction rule code block throws an exception.
    try {

<|end_if

    m_npda_.m_root_ = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::ROOT));

    ParseStackTreeNode_ *hps = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::HPS));
    std::uint32_t initial_state = NonterminalStartStateIndex_(nonterminal_to_parse);
    hps->m_stack.push_back(HypotheticalBranchStackElement_(initial_state, Nonterminal::none_));

    m_npda_.m_root_->AddChild(hps);
    m_npda_.m_hps_queue_.push_back(hps);

    StateSet_ initial_npda_state_set;
    initial_npda_state_set.insert(initial_state);
    m_npda_.m_realized_stack_.push_back(RealizedBranchStackElement_(initial_npda_state_set, Token(Nonterminal::none_)));

    bool should_return = false;
    // while (true)
    for (int i = 0; i < 300 && !should_return; ++i)
    {
        std::cerr << "\n---------- ITERATION " << i << " --------------\n";
        PrintParserStatus_(std::cerr);
        std::cerr << '\n';

        if (m_npda_.m_root_->HasTrunkChild())
            ExecuteAndRemoveTrunkActions_(should_return, parser_return_code_, return_token);
        else
            ContinueNPDAParse_(should_return);
        std::cerr << '\n';
    }

    std::cerr << "\n---------- RETURNING --------------\n";
    PrintParserStatus_(std::cerr);
    std::cerr << '\n';

<|if(is_defined(enable_scan_actions_exceptions) || is_defined(enable_reduction_rule_exceptions))
    // this is the catch {} block generated by specifying the
    // %target.cpp.enable_scan_actions_exceptions or
    // %target.cpp.enable_reduction_rule_exceptions directives in the
    // primary source, to allow necessary cleanup if the scan actions
    // or a reduction rule code block throws an exception.
    } catch (...) {
        // // clear the stack, because we won't need it for the next parse.
        // // we don't clear the lookahead queue here because we might want to
        // // parse multiple times from the same input, and the lookahead queue
        // // could have the next few tokens in it.
        // ClearStack_();
        // rethrow the (unknown) exception.
        throw;
    }

<|end_if
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_SUCCESS) std::cerr << <{debug_spew_prefix} << " Parse() is returning PRC_SUCCESS" << std::endl)
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_UNHANDLED_PARSE_ERROR) std::cerr << <{debug_spew_prefix} << " Parse() is returning PRC_UNHANDLED_PARSE_ERROR" << std::endl)

<|end_if
    return parser_return_code_;
}

void <{class_name}::ExecuteAndRemoveTrunkActions_ (bool &should_return, ParserReturnCode &parser_return_code_, <{token_data_type} *&return_token)
{
    std::cerr << "Parse stack tree has trunk; executing trunk actions.\n";
    while (m_npda_.m_root_->HasTrunkChild())
    {
        ParseStackTreeNode_ *trunk_child = m_npda_.m_root_->PopTrunkChild();
        bool destroy_and_recreate_parse_tree = false;
        switch (trunk_child->m_spec.m_type)
        {
            case ParseStackTreeNode_::RETURN: {
                std::cerr << "    executing trunk action RETURN.\n";
                assert(m_npda_.m_realized_stack_.size() == 2);
                parser_return_code_ = PRC_SUCCESS;
                *return_token = m_npda_.m_realized_stack_.back().m_token.m_data;
                should_return = true;
                break;
            }
            case ParseStackTreeNode_::REDUCE: {
                // Execute the appropriate rule on the top tokens in the stack
                std::uint32_t const &rule_index = trunk_child->m_spec.m_single_data;
                std::cerr << "    executing trunk action REDUCE rule " << rule_index << ".\n";
                // NOTE: dont actually execute reduction rules here, that should be saved for executing the trunk
                Token::Data reduced_nonterminal_token_data = ExecuteReductionRule_(rule_index, m_npda_.m_realized_stack_);
                Rule_ const &rule = ms_rule_table_[rule_index];
                // Pop those stack tokens
                for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
                    m_npda_.m_realized_stack_.pop_back();
                // Push the reduced nonterminal token data onto the front of the lookahead queue
                m_npda_.PushFrontRealizedLookahead(Token(rule.m_reduction_nonterminal_token_id, reduced_nonterminal_token_data));
                // Because REDUCE involves popping the stack, indicate that the parse tree should be destroyed and
                // recreated.  This is draconian and non-optimal, but simple and effective.  TODO: Because HPS branches
                // are blocked right after a REDUCE or POP_STACK, maybe don't bother adding any children below REDUCE
                // or POP_STACK nodes.
                destroy_and_recreate_parse_tree = true;
                break;
            }
            case ParseStackTreeNode_::SHIFT: {
                assert(trunk_child->m_spec.m_single_data == ParseStackTreeNode_::UNUSED_DATA); // m_single_data is not used for SHIFT.
                std::cerr << "    executing trunk action SHIFT.\n"; // TODO: Print the lookahead that was shifted?
                // Move the front of the lookahead queue to the top of the stack, assigning the appropriate state index.
                m_npda_.m_realized_stack_.push_back(RealizedBranchStackElement_(trunk_child->m_npda_state_set, Lookahead_(0)));
                m_npda_.PopFrontRealizedLookahead();
                break;
            }
            case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
                std::cerr << "    executing trunk action INSERT_LOOKAHEAD_ERROR.\n";
                m_npda_.PushFrontRealizedLookahead(Token(Terminal::ERROR_));
                break;
            }
            case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
                std::cerr << "    executing trunk action DISCARD_LOOKAHEAD.\n";
                assert(!m_npda_.m_realized_lookahead_queue_.empty());
                m_npda_.PopFrontRealizedLookahead();
                break;
            }
            case ParseStackTreeNode_::POP_STACK: {
                std::uint32_t const &pop_count = trunk_child->m_spec.m_single_data;
                std::cerr << "    executing trunk action POP_STACK " << pop_count << ".\n";
                if (m_npda_.m_realized_stack_.size() > pop_count)
                {
                    for (std::uint32_t i = 0; i < pop_count; ++i)
                    {
                        ThrowAwayRealizedBranchStackElement_(m_npda_.m_realized_stack_.back());
                        m_npda_.m_realized_stack_.pop_back();
                    }
                }

                // Because POP_STACK involves popping the stack, indicate that the parse tree should be destroyed and
                // recreated (from the states in the top element of m_realized_stack_).  This is draconian and non-optimal,
                // but simple and effective.
                destroy_and_recreate_parse_tree = true;
                break;
            }

            default:
                assert(false && "this should not happen");
                break;
        }
        assert(trunk_child->m_parent_node == NULL);
        assert(trunk_child->m_child_nodes.empty());
        delete trunk_child;

        if (destroy_and_recreate_parse_tree)
        {
            std::cerr << "    destroying and recreating parse tree based on top element of realized stack.\n";
            // Destroy the whole parse tree and reconstruct HPSes based on top of m_realized_stack_,
            // but preserve m_realized_stack_ and m_realized_lookahead_queue_.  This is rather draconian and is
            // non-optimal in terms of memory allocation operations, but it is simple and effective, and should
            // only occur during error handling.
            assert(m_npda_.m_new_hps_queue_.empty());
            m_npda_.m_hps_queue_.clear();
            delete m_npda_.m_root_;
            m_npda_.m_root_ = NULL;
            // At this point, the parse tree should be destroyed.  Create a new root node
            m_npda_.m_root_ = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::ROOT));
            // Then add HPS nodes for each npda state in the top element of m_realized_stack_.
            assert(!m_npda_.m_realized_stack_.empty());
            StateVector_ const &reconstruct_state_vector = m_npda_.m_realized_stack_.back().m_npda_state_vector;
            for (StateVector_::const_iterator it = reconstruct_state_vector.begin(),
                                              it_end = reconstruct_state_vector.end();
                 it != it_end;
                 ++it)
            {
                std::uint32_t state_index = *it;
                ParseStackTreeNode_ *hps = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::HPS));
                hps->m_stack.push_back(HypotheticalBranchStackElement_(state_index, Nonterminal::none_));

                m_npda_.m_root_->AddChild(hps);
                m_npda_.m_hps_queue_.push_back(hps);
            }

            // TODO: Because HPS branches are blocked right after a REDUCE or POP_STACK, maybe don't bother
            // adding any children below REDUCE or POP_STACK nodes.  This would reduce the number of memory
            // operations.
        }
    }
}

void <{class_name}::ContinueNPDAParse_ (bool &should_return)
{
    // If there are no non-blocked hps-es, then the parse should stop.  If any non-blocked hps-es
    // are processed, then this flag will be set to false.
    should_return = true;

    std::cerr << "Parse stack tree does not have trunk; continuing parse.\n";

    // If there's a SHIFT/REDUCE conflict, then see if it can be resolved first.
    {
        ParseStackTreeNode_ *shift  = NULL;
        ParseStackTreeNode_ *reduce = NULL;
        // TODO: Move this handling into its own function
        if (m_npda_.m_root_->HasShiftReduceConflict(shift, reduce))
        {
            assert(shift != NULL);
            assert(reduce != NULL);
            ParseStackTreeNode_::PrecedenceLevelRange shift_precedence_level_range = shift->ComputePrecedenceLevelRange(1);
            ParseStackTreeNode_::PrecedenceLevelRange reduce_precedence_level_range = reduce->ComputePrecedenceLevelRange(1);
            assert(reduce_precedence_level_range.first == reduce_precedence_level_range.second);

            std::cerr << "    SHIFT/REDUCE conflict encountered. REDUCE precedence level range: [" << ms_precedence_table_[reduce_precedence_level_range.first].m_name << ", " << ms_precedence_table_[reduce_precedence_level_range.second].m_name << "], SHIFT precedence level range: [" << ms_precedence_table_[shift_precedence_level_range.first].m_name << ", " << ms_precedence_table_[shift_precedence_level_range.second].m_name << "]\n";

            // 6 possibilities (the higher lines indicate higher precedence level.  same line
            // indicates equality).  there is always exactly one reduce hps, and at least
            // one shift hps.
            //
            // note that if a shift and a reduce have the same precedence level, then they also
            // have the same associativity.
            //
            // 1.     shift        2.     shift        3.
            //        shift               shift
            // reduce              reduce shift        reduce shift
            //
            // 4.                  5.                  6.
            //                                                shift
            // reduce shift        reduce              reduce shift
            //        shift               shift               shift
            //        shift               shift
            //
            // cases 1 and 5 can be trivially resolved -- by pruning the reduce
            // and by pruning the shift respectively.
            //
            // case 2 can only be resolved if the associativity of the reduction rule
            // is RIGHT, in which case the reduce is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 3 may be trivially resolved via rule associativity (LEFT causes the
            // shift to be pruned, RIGHT causes the reduce to be pruned, and NONASSOC
            // should cause an error).
            //
            // case 4 can only be resolved if the associativity of the reduction rule
            // is LEFT, in which case the shift is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 6 can not be resolved at this point.

            bool conflict_resolved = false;

            // Case 1
            if (reduce_precedence_level_range.second < shift_precedence_level_range.first)
            {
                std::cerr << "        Case 1; REDUCE < SHIFT; pruning REDUCE and continuing.\n";
                m_npda_.RemoveBranchIfNotTrunk(reduce);
                delete reduce;
                reduce = NULL;
                conflict_resolved = true;
            }
            // Case 2
            else if (reduce_precedence_level_range.first == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
                std::cerr << "        Case 2; REDUCE <= SHIFT; ";
                Rule_ const &reduction_rule = ms_rule_table_[reduce->m_spec.m_single_data];
                Precedence_ const &reduction_rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity_index == 2) // 2 is right-associative
                {
                    std::cerr << "pruning right-associative REDUCE and continuing.\n";
                    m_npda_.RemoveBranchIfNotTrunk(reduce);
                    delete reduce;
                    reduce = NULL;
                    conflict_resolved = true;
                }
                else
                    std::cerr << "can't resolve conflict at this time.\n";
            }
            // Case 3
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first == shift_precedence_level_range.second)
            {
                std::cerr << "        Case 3; REDUCE == SHIFT; ";
                Rule_ const &reduction_rule = ms_rule_table_[reduce->m_spec.m_single_data];
                Precedence_ const &reduction_rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
                std::cerr << "rule " << reduce->m_spec.m_single_data << " associativity index: " << reduction_rule_precedence.m_associativity_index << '\n';
                switch (reduction_rule_precedence.m_associativity_index)
                {
                    case 0: // 0 is left-associative
                        std::cerr << "pruning left-associative SHIFT and continuing.\n";
                        m_npda_.RemoveBranchIfNotTrunk(shift);
                        delete shift;
                        shift = NULL;
                        conflict_resolved = true;
                        break;

                    case 1: // 1 is non-associative
                        std::cerr << "composition of non-associative rules is an error.\n";
                        assert(false && "TODO: implement nonassoc error handling");
                        break;

                    case 2: // 2 is right-associative
                        std::cerr << "pruning right-associative REDUCE and continuing.\n";
                        m_npda_.RemoveBranchIfNotTrunk(reduce);
                        delete reduce;
                        reduce = NULL;
                        conflict_resolved = true;
                        break;

                    default:
                        assert(false && "this should never happen");
                        break;
                }
            }
            // Case 4
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.second &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
                std::cerr << "        Case 4; REDUCE >= SHIFT; ";
                Rule_ const &reduction_rule = ms_rule_table_[reduce->m_spec.m_single_data];
                Precedence_ const &reduction_rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity_index == 0) // 0 is left-associative
                {
                    std::cerr << "pruning left-associative SHIFT and continuing.\n";
                    m_npda_.RemoveBranchIfNotTrunk(shift);
                    delete shift;
                    shift = NULL;
                    conflict_resolved = true;
                }
                else
                    std::cerr << "can't resolve conflict at this time.\n";
            }
            // Case 5
            else if (reduce_precedence_level_range.first > shift_precedence_level_range.second)
            {
                std::cerr << "        Case 5; REDUCE > SHIFT; pruning SHIFT and continuing.\n";
                m_npda_.RemoveBranchIfNotTrunk(shift);
                delete shift;
                shift = NULL;
                conflict_resolved = true;
            }
            // Case 6
            else {
                std::cerr << "        Case 6; ambiguous SHIFT/REDUCE precedence comparison; can't resolve conflict at this time.\n";
                assert(reduce_precedence_level_range.first > shift_precedence_level_range.first);
                assert(reduce_precedence_level_range.second < shift_precedence_level_range.second);
            }

            if (conflict_resolved)
            {
                should_return = false;

                assert(m_npda_.m_new_hps_queue_.empty());
                // std::cerr << "m_npda_.m_new_hps_queue_.size() = " << m_npda_.m_new_hps_queue_.size() << '\n';
                // Take new hps-es and clear old ones.
                for (HPSQueue_::iterator hps_it = m_npda_.m_hps_queue_.begin(), hps_it_end = m_npda_.m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
                {
                    ParseStackTreeNode_ *hps = *hps_it;
                    if (hps != NULL)
                        m_npda_.m_new_hps_queue_.push_back(hps);
                }
                m_npda_.m_hps_queue_.clear();
                std::swap(m_npda_.m_hps_queue_, m_npda_.m_new_hps_queue_);
                assert(m_npda_.m_new_hps_queue_.empty());
                // TODO: Break this large function up into smaller logical units
                return;
            }
        }
    }

    // Process transitions in order of their SortedTypeIndex.
    for (std::uint32_t current_sorted_type_index = 0; current_sorted_type_index <= 3; ++current_sorted_type_index)
    {
        std::cerr << "    Processing transitions having SortedTypeIndex equal to " << current_sorted_type_index << ".\n";

        if (!m_npda_.m_new_hps_queue_.empty())
        {
            std::cerr << "        Early-out based on sorted type index.\n";
            break;
        }

        // Process non-blocked hps-es.
        for (HPSQueue_::iterator hps_it = m_npda_.m_hps_queue_.begin(), hps_it_end = m_npda_.m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
        {
            // Skip nullified HPS nodes.
            if (*hps_it == NULL)
                continue;

            ParseStackTreeNode_ &hps = **hps_it;

            assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS);
            std::cerr << "        Processing hps: ";
            hps.Print(std::cerr, *this, 0);

            // If a hps is blocked, save it for the next parse iteration but don't do anything with it.
            if (hps.IsBlockedHPS())
            {
                std::cerr << "            Hypothetical Parser State is blocked; preserving for next iteration.\n";
                m_npda_.m_new_hps_queue_.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // This hps isn't blocked, so indicate that the parse should continue.
            should_return = false;

            std::uint32_t hps_state_index = hps.m_stack.back().m_state_index;
            // Retrieve all transitions whose SortedTypeIndex is current_sorted_type_index.
            TransitionVector_ const &non_epsilon_transitions = NonEpsilonTransitionsOfState_(hps_state_index, current_sorted_type_index);
            // Exercise all valid transitions whose SortedTypeIndex is current_sorted_type_index.
            for (TransitionVector_::const_iterator transition_it = non_epsilon_transitions.begin(), transition_it_end = non_epsilon_transitions.end(); transition_it != transition_it_end; ++transition_it)
            {
                Transition_ const &transition = *transition_it;
                assert(transition.m_type >= Transition_::RETURN);
                assert(transition.m_type <= Transition_::POP_STACK);
                std::uint32_t transition_sorted_type_index = Transition_::Order::SortedTypeIndex(Transition_::Type(transition.m_type));
                assert(transition_sorted_type_index == current_sorted_type_index);

                std::cerr << "            Processing transition " << ParseStackTreeNode_::AsString(ParseStackTreeNode_::Type(transition.m_type)) << " with transition token " << Token(transition.m_token_index) << " and data ";
                if (transition.m_data_index == ParseStackTreeNode_::UNUSED_DATA)
                    std::cerr << "<N/A>";
                else
                    std::cerr << transition.m_data_index;
                std::cerr << " and sorted type index " << Transition_::Order::SortedTypeIndex(Transition_::Type(transition.m_type)) << '\n';

                ParseStackTreeNode_ *resulting_hps = NULL;
                // If it's a default transition, there's no need to access the lookahead.
                if (transition.m_token_index == Nonterminal::none_)
                {
                    std::cerr << "                Exercising transition without accessing lookahead... ";
                    resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
                    std::cerr << '\n';
                    // std::cerr << "                    resulting hps: ";
                    // if (resulting_hps != NULL)
                    //     resulting_hps->Print(std::cerr, *this, 0);
                    // else
                    //     std::cerr << "NULL\n";
                }
                // Otherwise, the lookahead must be accessed.
                else
                {
                    Token::Id lookahead_token_id = hps.LookaheadTokenId(*this);
                    std::cerr << "                Lookahead is " << Token(lookahead_token_id) << '\n';
                    if (transition.m_token_index == lookahead_token_id)
                    {
                        std::cerr << "                Exercising transition with access to lookahead... ";
                        resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
                        std::cerr << '\n';
                        // std::cerr << "                    resulting hps: ";
                        // if (resulting_hps != NULL)
                        //     resulting_hps->Print(std::cerr, *this, 0);
                        // else
                        //     std::cerr << "NULL\n";
                    }
                }
                if (resulting_hps != NULL)
                    m_npda_.m_new_hps_queue_.push_back(resulting_hps);
            }
        }
    }

    // std::cerr << "m_npda_.m_new_hps_queue_.size() = " << m_npda_.m_new_hps_queue_.size() << '\n';
    // Take new hps-es and clear old ones.
    for (HPSQueue_::iterator hps_it = m_npda_.m_hps_queue_.begin(), hps_it_end = m_npda_.m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ *hps = *hps_it;
        if (hps != NULL)
        {
            // std::cerr << "deleting hps " << hps << " ";
            // hps->Print(std::cerr, *this, 0);
            // std::cerr << " having parent " << hps->m_parent_node << '\n';
            hps->RemoveFromParent();
            delete hps;
        }
    }
    m_npda_.m_hps_queue_.clear();
    std::swap(m_npda_.m_hps_queue_, m_npda_.m_new_hps_queue_);
    assert(m_npda_.m_new_hps_queue_.empty());
}

<{class_name}::Token::Data <{class_name}::ExecuteReductionRule_ (std::uint32_t const rule_index_, RealizedBranchStack_ &stack)<{if(!is_defined(enable_reduction_rule_exceptions))} throw()<{end_if}
{
    assert(rule_index_ < ms_rule_count_);
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(std::cerr << <{debug_spew_prefix} << " executing reduction rule " << rule_index_ << std::endl)
<|end_if
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return <{token_data_default};

<|loop(i, _rule_count)
        case <{i}:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
<|loop(j, _rule_token_table_count[i])
<|if(_rule_token_assigned_id[_rule_token_table_offset[i]+j] != "")
            <{if(_rule_token_assigned_type[_rule_token_table_offset[i]+j] != "")}<{_rule_token_assigned_type[_rule_token_table_offset[i]+j]}<{else}<{token_data_type}<{end_if} <{_rule_token_assigned_id[_rule_token_table_offset[i]+j]}(<{if(_rule_token_assigned_type[_rule_token_table_offset[i]+j] != "")}<{custom_token_data_type_cast}<<{_rule_token_assigned_type[_rule_token_table_offset[i]+j]}>(stack[stack.size()-<{_rule_token_count[i]-j}].m_token.m_data)<{else}stack[stack.size()-<{_rule_token_count[i]-j}].m_token.m_data<{end_if});
<|end_if
<|end_loop
<|_rule_code[i]
            break;
        }

<|end_loop
    }

<|if(!is_defined(dont_assert_if_reduction_rule_code_doesnt_return))
    assert(false && "no value returned from reduction rule code block");
<|end_if
    return <{token_data_default};
}

void <{class_name}::ThrowAwayRealizedBranchStackElement_ (RealizedBranchStackElement_ &stack_element_) throw()
{
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(std::cerr << <{debug_spew_prefix} << " executing throw-away-token actions on token " << stack_element_.m_token << " corresponding to stack element with npda state set <TODO>" << std::endl)

<|end_if
    ThrowAwayTokenData_(stack_element_.m_token.m_data);
}

<|if(is_defined(generate_debug_spew_code))
void <{class_name}::PrintParserStatus_ (std::ostream &out) const
{
    assert(m_npda_.m_root_ != NULL);

    out << "realized state stack (bottom to top) is:\n";
    for (std::size_t i = 0; i < m_npda_.m_realized_stack_.size(); ++i)
    {
        RealizedBranchStackElement_ const &stack_element = m_npda_.m_realized_stack_[i];
        out << "    ( ";
        for (StateVector_::const_iterator it = stack_element.m_npda_state_vector.begin(),
                                          it_end = stack_element.m_npda_state_vector.end();
             it != it_end;
             ++it)
        {
            std::uint32_t npda_state = *it;
            out << npda_state << ' ';
        }
        out << ")\n";
    }
    out << "max realized lookahead count (so far) is:\n    " << m_npda_.MaxRealizedLookaheadQueueSize() << '\n';
    out << "realized stack tokens then realized lookahead queue is:\n    ";
    for (std::size_t i = 1; i < m_npda_.m_realized_stack_.size(); ++i)
        out << m_npda_.m_realized_stack_[i].m_token << ' ';
    out << ". ";
    for (std::size_t i = 0; i < m_npda_.m_realized_lookahead_queue_.size(); ++i)
        out << m_npda_.m_realized_lookahead_queue_[i] << ' ';
    out << '\n';

    m_npda_.m_root_->Print(out, *this);
    out << '\n';

    out << "hps queue:\n";
    for (HPSQueue_::const_iterator it = m_npda_.m_hps_queue_.begin(), it_end = m_npda_.m_hps_queue_.end(); it != it_end; ++it)
    {
        ParseStackTreeNode_ *hps = *it;
        assert(hps != NULL);
        hps->Print(std::cerr, *this, 1);
    }
}

char const *<{class_name}::ParseStackTreeNode_::AsString (Type type)
{
    static char const *const LOOKUP_TABLE[COUNT_] =
    {
        "ROOT",
        "RETURN",
        "REDUCE",
        "SHIFT",
        "INSERT_LOOKAHEAD_ERROR",
        "DISCARD_LOOKAHEAD",
        "POP_STACK",
        "HPS"
    };
    assert(std::uint32_t(type) < COUNT_);
    return LOOKUP_TABLE[std::uint32_t(type)];
}

<|end_if

bool <{class_name}::ParseStackTreeNode_::ParseStackTreeNodeOrder::operator () (<{class_name}::ParseStackTreeNode_ const *lhs, <{class_name}::ParseStackTreeNode_ const *rhs) const
{
    assert(lhs != NULL);
    assert(rhs != NULL);
    assert(lhs->m_spec.m_type == rhs->m_spec.m_type); // ParseStackTreeNodeSet should contain only nodes of the same type.
    // for HPS, their contents must be compared.
    if (lhs->m_spec.m_type == HPS)
    {
        assert(lhs->m_child_nodes.empty());
        assert(rhs->m_child_nodes.empty());
        // hps-es are equal if their m_realized_lookahead_cursor and m_hypothetical_lookahead_token_id_queue members are.
        if (lhs->m_realized_lookahead_cursor != rhs->m_realized_lookahead_cursor)
            return lhs->m_realized_lookahead_cursor < rhs->m_realized_lookahead_cursor;
        else if (lhs->m_stack != rhs->m_stack)
            return std::lexicographical_compare(
                lhs->m_stack.begin(), lhs->m_stack.end(),
                rhs->m_stack.begin(), rhs->m_stack.end(),
                CompareHypotheticalBranchStackElement
            );
        else
            return std::lexicographical_compare(
                lhs->m_hypothetical_lookahead_token_id_queue.begin(), lhs->m_hypothetical_lookahead_token_id_queue.end(),
                rhs->m_hypothetical_lookahead_token_id_queue.begin(), rhs->m_hypothetical_lookahead_token_id_queue.end(),
                CompareTokenId
            );
    }
    // For REDUCE, their contents must be compared.
    else if (lhs->m_spec.m_type == REDUCE)
    {
        // m_single_data contains the reduction rule index.
        Rule_ const &lhs_rule = ms_rule_table_[lhs->m_spec.m_single_data];
        Rule_ const &rhs_rule = ms_rule_table_[rhs->m_spec.m_single_data];
        // Sort first by rule precedence, then by rule index (lower has higher priority).
        if (ms_precedence_table_[lhs_rule.m_precedence_index].m_level != ms_precedence_table_[rhs_rule.m_precedence_index].m_level)
            return ms_precedence_table_[lhs_rule.m_precedence_index].m_level > ms_precedence_table_[rhs_rule.m_precedence_index].m_level;
        else // Sort based on rule index.
            return lhs->m_spec.m_single_data < rhs->m_spec.m_single_data;
    }
    // Otherwise just use pointer value.
    else
        return lhs < rhs;
}

<{class_name}::ParseStackTreeNode_::~ParseStackTreeNode_ ()
{
    // TODO: figure out if stack element tokens should be thrown away
    // TODO: figure out if local lookahead queue tokens should be thrown away
    // TODO: are they actually uninitialized (default value)?
    for (ChildMap::iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet &child_node_set = it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            assert(child != NULL);
            assert(child->m_parent_node == this);
            delete child;
        }
        child_node_set.clear(); // not strictly necessary, but is cleaner.
    }
}

bool <{class_name}::ParseStackTreeNode_::HasTrunkChild () const
{
    if (m_spec.m_type != ROOT || m_child_nodes.size() != 1)
        return false;
    ParseStackTreeNodeSet const &single_type_child_node_set = m_child_nodes.begin()->second;
    if (single_type_child_node_set.size() != 1)
        return false;
    ParseStackTreeNode_ *single_child = *single_type_child_node_set.begin();
    assert(single_child != NULL);
    assert(single_child->m_spec.m_type != ROOT);
    return single_child->m_spec.m_type != HPS;
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::ParseStackTreeNode_::PopTrunkChild ()
{
    assert(HasTrunkChild());
    ParseStackTreeNode_ *trunk_child = *m_child_nodes.begin()->second.begin();
    assert(trunk_child != NULL);
    assert(trunk_child->m_parent_node == this);
    // Reassign the children of the trunk child to this node (root).
    m_child_nodes = trunk_child->m_child_nodes;
    trunk_child->m_child_nodes.clear();
    // Set the reassigned child nodes' parent to be this node (root).
    for (ChildMap::iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseStackTreeNodeSet &child_node_set = child_map_it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            // std::cerr << "reassigning node " << child << "'s parent (formerly " << child->m_parent_node << ") to " << this << '\n';
            assert(child != NULL);
            child->m_parent_node = this;
        }
    }
    trunk_child->m_parent_node = NULL;
    return trunk_child;
}

bool <{class_name}::ParseStackTreeNode_::HasExactlyOneChild () const
{
    return m_child_nodes.size() == 1 && m_child_nodes.begin()->second.size() == 1;
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::ParseStackTreeNode_::BranchRoot ()
{
    ParseStackTreeNode_ *node = this;
    while (node->m_parent_node != NULL && node->m_parent_node->HasExactlyOneChild())
    {
        node = node->m_parent_node;
        assert(node->m_spec.m_type != HPS);
    }
    return node;
}

<{class_name}::Token::Id <{class_name}::ParseStackTreeNode_::LookaheadTokenId (<{class_name} &parser) const
{
    if (m_hypothetical_lookahead_token_id_queue.empty())
        return parser.Lookahead_(m_realized_lookahead_cursor).m_id;
    else
        return m_hypothetical_lookahead_token_id_queue.front();
}

bool <{class_name}::ParseStackTreeNode_::IsBlockedHPS () const
{
    assert(m_spec.m_type == HPS);
    if (m_parent_node == NULL)
        return false;
    switch (m_parent_node->m_spec.m_type)
    {
        case RETURN:
        case REDUCE:
        case POP_STACK: return true;

        default:        return false;
    }
}

<{class_name}::ParseStackTreeNode_::PrecedenceLevelRange <{class_name}::ParseStackTreeNode_::ComputePrecedenceLevelRange (std::uint32_t current_child_depth) const
{
    if (m_spec.m_type == HPS)
    {
        // Need to look back at the rule of the (current_child_depth-1)th ancestor of this node in order
        // to get the correct rule precedence, because that's where the conflict occurred.
        assert(!m_stack.empty());
        assert(m_stack.size() >= current_child_depth);
//         std::uint32_t state_index = m_stack.back().m_state_index;
        std::uint32_t state_index = m_stack[m_stack.size()-(current_child_depth-1)].m_state_index;
        assert(state_index < ms_state_count_);
        State_ const &state = ms_state_table_[state_index];
        assert(state.m_associated_rule_index < ms_rule_count_);
        Rule_ const &associated_rule = ms_rule_table_[state.m_associated_rule_index];
        assert(associated_rule.m_precedence_index < ms_precedence_count_);
        Precedence_ const &rule_precedence = ms_precedence_table_[associated_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == REDUCE)
    {
        std::uint32_t reduction_rule_index = m_spec.m_single_data;
        Rule_ const &reduction_rule = ms_rule_table_[reduction_rule_index];
        assert(reduction_rule.m_precedence_index < ms_precedence_count_);
        Precedence_ const &rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == SHIFT)
    {
        PrecedenceLevelRange retval(std::numeric_limits<std::int32_t>::max(), std::numeric_limits<std::int32_t>::min());
        // The range is the smallest range encompassing the range of each child node.
        for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
        {
            ParseStackTreeNodeSet const &child_node_set = child_map_it->second;
            for (ParseStackTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
            {
                assert(*child_it != NULL);
                ParseStackTreeNode_ const &child = **child_it;
                PrecedenceLevelRange child_precedence_level_range(child.ComputePrecedenceLevelRange(current_child_depth+1));
                retval.first = std::min(retval.first, child_precedence_level_range.first);
                retval.second = std::max(retval.second, child_precedence_level_range.second);
            }
        }
        assert(retval.first <= retval.second);
        return retval;
    }
    else
    {
        // TODO: Probably need to do something to determine if this can't happen or prevent it.
        assert(false);
        return PrecedenceLevelRange(0, 0);
    }
}

bool <{class_name}::ParseStackTreeNode_::HasShiftReduceConflict (ParseStackTreeNode_ *&shift, ParseStackTreeNode_ *&reduce)
{
    ChildMap::iterator shift_children_it = m_child_nodes.find(Spec(SHIFT));
    ChildMap::iterator reduce_children_it = m_child_nodes.find(Spec(REDUCE));
    if (shift_children_it == m_child_nodes.end() || reduce_children_it == m_child_nodes.end())
        return false;

    ParseStackTreeNodeSet &shift_children = shift_children_it->second;
    ParseStackTreeNodeSet &reduce_children = reduce_children_it->second;
    assert(shift_children.size() == 1);
    assert(reduce_children.size() == 1);

    shift = *shift_children.begin();
    reduce = *reduce_children.begin();
    return true;
}

void <{class_name}::ParseStackTreeNode_::AddChild (ParseStackTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == NULL);
    assert(child->m_spec.m_type != ROOT);
    m_child_nodes[child->m_spec].insert(child);
    child->m_parent_node = this;

    // If this node is SHIFT and the child is HPS, then add the child's NPDA state to this node's m_npda_state_set.
    // This is the only situation in which m_npda_state_set is added to.
    if (m_spec.m_type == SHIFT && child->m_spec.m_type == HPS)
    {
        assert(!child->m_stack.empty());
        std::uint32_t child_npda_state_index = child->m_stack.back().m_state_index;
        assert(m_npda_state_set.find(child_npda_state_index) == m_npda_state_set.end() && "NPDA state should not already be in the set");
        m_npda_state_set.insert(child_npda_state_index);
    }
}

void <{class_name}::ParseStackTreeNode_::RemoveChild (ParseStackTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == this);
    assert(HasChildrenHavingSpec(child->m_spec));
    m_child_nodes[child->m_spec].erase(child);
    if (m_child_nodes[child->m_spec].empty())
        m_child_nodes.erase(child->m_spec);
    child->m_parent_node = NULL;
}

void <{class_name}::ParseStackTreeNode_::RemoveFromParent ()
{
    assert(m_parent_node != NULL);
    m_parent_node->RemoveChild(this);
}

void <{class_name}::ParseStackTreeNode_::NullifyHPSNodeDescendantsInHPSQueue (HPSQueue_ &hps_queue) const
{
    if (m_spec.m_type == HPS)
    {
        // NOTE: This is a linear search, which is not as efficient as a different way of handling this.
        HPSQueue_::iterator it = std::find(hps_queue.begin(), hps_queue.end(), this);
        if (it != hps_queue.end())
            *it = NULL;
    }
    for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseStackTreeNodeSet const &child_node_set = child_map_it->second;
        for (ParseStackTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            assert(*child_it != NULL);
            ParseStackTreeNode_ const &child = **child_it;
            child.NullifyHPSNodeDescendantsInHPSQueue(hps_queue);
        }
    }
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::ParseStackTreeNode_::CloneLeafNode () const
{
    ParseStackTreeNode_ *retval = new ParseStackTreeNode_(m_spec);
    CloneLeafNodeInto(*retval);
    return retval;
}

void <{class_name}::ParseStackTreeNode_::CloneLeafNodeInto (<{class_name}::ParseStackTreeNode_ &orphan_target) const
{
    assert(orphan_target.m_parent_node == NULL);
    assert(m_child_nodes.empty());
    orphan_target.m_spec                                    = m_spec;
    orphan_target.m_npda_state_set                          = m_npda_state_set;
    orphan_target.m_stack                                   = m_stack;
    orphan_target.m_hypothetical_lookahead_token_id_queue   = m_hypothetical_lookahead_token_id_queue;
    orphan_target.m_realized_lookahead_cursor               = m_realized_lookahead_cursor;
}

void <{class_name}::ParseStackTreeNode_::Print (std::ostream &out, <{class_name} const &parser, std::uint32_t indent_level) const
{
    for (std::uint32_t i = 0; i < indent_level; ++i)
        out << "    ";
    out << AsString(m_spec.m_type);
    if (m_spec.m_type == HPS)
        out << (IsBlockedHPS() ? " (    blocked)" : " (non-blocked)");
    switch (m_spec.m_type)
    {
        case REDUCE:    out << " rule " << m_spec.m_single_data << "; " << ms_rule_table_[m_spec.m_single_data].m_description;  break;
        case POP_STACK: out << ' ' << m_spec.m_single_data << " time(s)";                                                       break;
        default:                                                                                                                break;
    }
    // assert(!m_stack.empty());
    // out << ' ' << this << ", parent = " << m_parent_node << ' ' << ms_state_table_[m_stack.back()].m_description << ' ';
    if (!m_stack.empty())
        out << ' ' << ms_state_table_[m_stack.back().m_state_index].m_description << ' ';
    if (m_spec.m_type == HPS)
    {
        out << "    (";
        for (std::size_t i = 0; i < m_stack.size(); ++i)
        {
            out << m_stack[i].m_state_index;
            if (i+1 < m_stack.size())
                out << ' ';
        }
        out << "); ";
        for (std::size_t i = 1; i < m_stack.size(); ++i)
            out << ms_token_name_table_[m_stack[i].m_token_id] << ' ';
        out << ". ";
        for (std::size_t i = 0; i < m_hypothetical_lookahead_token_id_queue.size(); ++i)
            out << ms_token_name_table_[m_hypothetical_lookahead_token_id_queue[i]] << ' ';
        for (std::size_t i = m_realized_lookahead_cursor; i < parser.m_npda_.m_realized_lookahead_queue_.size(); ++i)
            out << ms_token_name_table_[parser.m_npda_.m_realized_lookahead_queue_[i].m_id] << ' ';
    }
    out << '\n';

    // Print children recursively with higher indent level
    for (ChildMap::const_iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet const &child_node_set = it->second;
        for (ParseStackTreeNodeSet::const_iterator set_it = child_node_set.begin(), set_it_end = child_node_set.end(); set_it != set_it_end; ++set_it)
            (*set_it)->Print(out, parser, indent_level+1);
    }
}

<{class_name}::Token const &<{class_name}::Lookahead_ (TokenQueue_::size_type index)<{if(!is_defined(enable_scan_actions_exceptions))} throw()<{end_if}
{
    while (index >= m_npda_.m_realized_lookahead_queue_.size())
    {
        // This does not require updating the hps-es' m_realized_lookahead_cursor.
        m_npda_.PushBackRealizedLookahead(Scan_());
<|if(is_defined(generate_debug_spew_code))

        TRISON_CPP_DEBUG_CODE_(std::cerr << <{debug_spew_prefix} << " pushed " << m_npda_.m_realized_lookahead_queue_.back() << " onto back of lookahead queue" << std::endl)
<|end_if
    }
    return m_npda_.m_realized_lookahead_queue_[index];
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::TakeHypotheticalActionOnHPS_ (ParseStackTreeNode_ const &hps, ParseStackTreeNode_::Type action_type, std::uint32_t action_data)
{
    // TODO: replace individual arguments action_type, action_data with ParseStackTreeNode_::Spec and just modify that struct below where it needs it.
    assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS && "Only a HPS type node can take an action");
    assert(hps.m_parent_node != NULL);

    // TODO: Once enough testing/verification is done, this comment and the commented-out early check code
    // should be removed.
    //
    // Because the parse tree will be recreated when the trunk action is POP_STACK, there's no need to
    // early out if the stack will be popped empty.

//     // Early check for if the stack would be popped empty, in which case, don't create the new hps.
//     if (action_type == ParseStackTreeNode_::POP_STACK && hps.m_stack.size() <= 1)
//     {
//         std::cerr << "early-out with no new HPS because POP_STACK would pop the stack all the way to empty... ";
//         return NULL;
//     }

    ParseStackTreeNode_ *new_hps = NULL;

    switch (action_type)
    {
        case ParseStackTreeNode_::ROOT: {
            assert(false && "ParseStackTreeNode_::ROOT is an invalid action type.");
            break;
        }
        case ParseStackTreeNode_::RETURN: {
            new_hps = hps.CloneLeafNode();
            break;
        }
        case ParseStackTreeNode_::REDUCE: {
            // Execute the appropriate rule on the top tokens in the stack
            std::uint32_t const &rule_index = action_data;
            Rule_ const &rule = ms_rule_table_[rule_index];

            // Avoid creating the new hps altogether if it won't be added due to a REDUCE/REDUCE conflict.
            ParseStackTreeNode_ *existing_reduce_action_node = NULL;
            ParseStackTreeNode_ *reduce_hps = NULL;
            ParseStackTreeNode_::Spec action_spec(action_type, action_data);
            if (hps.m_parent_node->HasChildrenHavingSpec(action_spec)) // Check for an existing REDUCE action
            {
                // This is a REDUCE/REDUCE conflict
                std::cerr << "TakeHypotheticalActionOnHPS_ - REDUCE/REDUCE conflict encountered ... ";

                ParseStackTreeNode_::ParseStackTreeNodeSet &reduce_node_set = hps.m_parent_node->ChildrenHavingSpec(action_spec);
                assert(reduce_node_set.size() == 1);
                existing_reduce_action_node = *reduce_node_set.begin();
                assert(existing_reduce_action_node != NULL);
                // If the new REDUCE action beats the existing one in a conflict, just replace the existing one
                // (replacement instead of creating a new one and deleting the old is an optimization which also
                // avoids an annoying traversal through m_npda_.m_hps_queue_).
                // NOTE: This depends on the fact that a [hypothetical] REDUCE node has exactly one HPS child,
                // which is what these three asserts check.  TODO: maybe make abstractions for these sorts of checks.
                assert(existing_reduce_action_node->m_child_nodes.size() == 1);
                assert(existing_reduce_action_node->m_child_nodes.begin()->second.size() == 1);
                assert((*existing_reduce_action_node->m_child_nodes.begin()->second.begin())->m_spec.m_type == ParseStackTreeNode_::HPS);
                if (CompareRuleByPrecedence(action_data, existing_reduce_action_node->m_spec.m_single_data))
                {
                    std::cerr << "resolving in favor of new hps.\n";

                    reduce_hps = *existing_reduce_action_node->m_child_nodes.begin()->second.begin();
                    assert(reduce_hps != NULL);

                    // Remove the nodes from the ParseStackTreeNode_ tree.
                    assert(existing_reduce_action_node != NULL);
                    existing_reduce_action_node->RemoveFromParent();
                    reduce_hps->RemoveFromParent();
                    // Modify the nodes.
                    existing_reduce_action_node->m_spec = action_spec; // Replace with the winning reduction rule Spec.
                    hps.CloneLeafNodeInto(*reduce_hps); // NOTE: This modifies the existing hps, so no update of m_npda_.m_hps_queue_ is necessary.
                    // Re-add them to the ParseStackTreeNode_ tree.
                    existing_reduce_action_node->AddChild(reduce_hps);
                    hps.m_parent_node->AddChild(existing_reduce_action_node);
                }
                else
                {
                    std::cerr << "resolving in favor of existing hps.\n";
                }
            }
            else
            {
                new_hps = hps.CloneLeafNode();
                reduce_hps = new_hps;
            }

            if (reduce_hps != NULL)
            {
                // Pop those stack tokens
                // std::cerr << "TakeHypotheticalActionOnHPS_ -- reducing rule " << rule_index << " \"" << rule.m_description << "\" which has " << rule.m_token_count << " tokens\n";
                // Computing the number of elements to pop is necessary because we don't guarantee that
                // the number of pops is not greater than the stack size (due to destruction and recreation
                // of parse tree upon REDUCE and POP_STACK trunk actions).
                std::size_t actual_pop_count = std::min(std::size_t(rule.m_token_count), reduce_hps->m_stack.size());
                reduce_hps->m_stack.resize(reduce_hps->m_stack.size() - actual_pop_count);
                // Push the reduced nonterminal token data onto the front of the lookahead queue
                reduce_hps->m_hypothetical_lookahead_token_id_queue.push_front(rule.m_reduction_nonterminal_token_id);
            }

            break;
        }
        case ParseStackTreeNode_::SHIFT: {
            // Move the front of the lookahead queue to the top of the stack, assigning the appropriate state index.
            std::uint32_t const &state_index = action_data;
            // TODO: probably make "Shift" method for ParseStackTreeNode_ to do all this bookkeeping and parallel LookaheadTokenId tracking.
            new_hps = hps.CloneLeafNode();
            new_hps->m_stack.push_back(HypotheticalBranchStackElement_(state_index, new_hps->LookaheadTokenId(*this)));
            action_data = ParseStackTreeNode_::UNUSED_DATA; // SHIFT action doesn't store the state, the HPS children do.
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
            new_hps = hps.CloneLeafNode();
            new_hps->m_hypothetical_lookahead_token_id_queue.push_front(Terminal::ERROR_);
            break;
        }
        case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
            new_hps = hps.CloneLeafNode();
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::POP_STACK: {
            // TODO: make separate action nodes for each pop, instead of using action data.
            std::uint32_t const &pop_count = action_data;
            new_hps = hps.CloneLeafNode();
            assert(new_hps->m_stack.size() >= pop_count);
            for (std::uint32_t i = 0; i < pop_count; ++i)
                new_hps->m_stack.pop_back();
            std::cerr << "creating HPS to be child of POP_STACK node... ";
            break;
        }
        case ParseStackTreeNode_::HPS: {
            assert(false && "ParseStackTreeNode_::HPS is an invalid action type.");
            break;
        }
        default: {
            assert(false && "invalid ParseStackTreeNode_::Type");
            break;
        }
    }

    if (new_hps != NULL)
    {
        assert(new_hps->m_parent_node == NULL);

        ParseStackTreeNode_ *action_node = NULL;

        // Ensure the action node exists, creating it if necessary.
        ParseStackTreeNode_::Spec action_spec(action_type, action_data);
        // std::cerr << "hps.m_parent_node = " << hps.m_parent_node << '\n';
        if (hps.m_parent_node->HasChildrenHavingSpec(action_spec))
        {
            ParseStackTreeNode_::ParseStackTreeNodeSet &children_of_action_type = hps.m_parent_node->ChildrenHavingSpec(action_spec);
            assert(children_of_action_type.size() == 1);
            action_node = *children_of_action_type.begin();
            std::cerr << "using existing action node of type " << ParseStackTreeNode_::AsString(action_spec.m_type) << "... ";

            // If the new hps already exists (can only happen as a child of POP_STACK), then don't add it.
            if (action_type == ParseStackTreeNode_::POP_STACK && action_node->HasChildrenHavingSpec(new_hps->m_spec))
            {
                ParseStackTreeNode_::ParseStackTreeNodeSet const &child_hps_set = action_node->ChildrenHavingSpec(new_hps->m_spec);
                if (child_hps_set.find(new_hps) != child_hps_set.end())
                {
                    std::cerr << "not adding duplicate HPS as child of POP_STACK node... ";
                    delete new_hps;
                    new_hps = NULL;
                }
            }
        }
        else
        {
            std::cerr << "creating new action node of type " << ParseStackTreeNode_::AsString(action_spec.m_type) << "... ";
            action_node = new ParseStackTreeNode_(action_spec);
            hps.m_parent_node->AddChild(action_node);
        }

        if (new_hps != NULL)
        {
            // std::cerr << "    adding new hps: ";
            // new_hps->Print(std::cerr, *this, 2);
            // std::cerr << "    to action node: ";
            // action_node->Print(std::cerr, *this, 2);
            action_node->AddChild(new_hps);
        }
    }

    return new_hps;
}

<{class_name}::Npda_::~Npda_ ()
{
    // TODO: figure out if realized stack and lookahead queue should have their tokens thrown away
    delete m_root_;
    m_root_ = NULL;
    m_hps_queue_.clear();
    m_new_hps_queue_.clear();
}

void <{class_name}::Npda_::PopFrontRealizedLookahead ()
{
    assert(!m_realized_lookahead_queue_.empty());
    // Because the contents of m_npda_.m_realized_lookahead_queue_ are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = m_hps_queue_.begin(), hps_it_end = m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        --hps.m_realized_lookahead_cursor;
    }
    m_realized_lookahead_queue_.pop_front();
}

void <{class_name}::Npda_::PushFrontRealizedLookahead (<{class_name}::Token const &lookahead)
{
    m_realized_lookahead_queue_.push_front(lookahead);
    // Because the contents of m_npda_.m_realized_lookahead_queue_ are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = m_hps_queue_.begin(), hps_it_end = m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        ++hps.m_realized_lookahead_cursor;
    }
    UpdateMaxRealizedLookaheadQueueSize();
}

void <{class_name}::Npda_::PushBackRealizedLookahead (<{class_name}::Token const &lookahead)
{
    m_realized_lookahead_queue_.push_back(lookahead);
    UpdateMaxRealizedLookaheadQueueSize();
}

void <{class_name}::Npda_::RemoveBranchIfNotTrunk (ParseStackTreeNode_ *branch_node)
{
    // Find the most root-ward ancestor that is an only child.
    ParseStackTreeNode_ *branch_root = branch_node->BranchRoot();
    assert(branch_root != NULL);
    // Only do stuff if the branch isn't the trunk (i.e. only if its root isn't the tree root).
    if (branch_root->m_parent_node != NULL)
    {
        branch_root->RemoveFromParent();
        branch_node->NullifyHPSNodeDescendantsInHPSQueue(m_hps_queue_);
    }
}

void <{class_name}::Npda_::UpdateMaxRealizedLookaheadQueueSize ()
{
    // m_realized_lookahead_cursor is an index into m_realized_lookahead_queue_ for each branch, so the number
    // of lookaheads depends on the cursor for each branch.
    for (HPSQueue_::iterator hps_it = m_hps_queue_.begin(), hps_it_end = m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
    {
        // Skip nullified elements because they have been deleted.
        if (*hps_it == NULL)
            continue;

        ParseStackTreeNode_ &hps = **hps_it;
        // The actual lookaheads are offset by the realized lookahead cursor, because the tokens before
        // the realized lookahead cursor are ones we've seen already, and therefore don't contribute to
        // the actual lookahead count.
        assert(m_realized_lookahead_queue_.size() >= hps.m_realized_lookahead_cursor);
        std::size_t hps_actual_lookahead_count = m_realized_lookahead_queue_.size() - hps.m_realized_lookahead_cursor;
        m_max_realized_lookahead_queue_size_ = std::max(m_max_realized_lookahead_queue_size_, hps_actual_lookahead_count);
    }
}

bool <{class_name}::CompareRuleByPrecedence (std::uint32_t lhs_rule_index, std::uint32_t rhs_rule_index)
{
    if (ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level != ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level)
        return ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level > ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level;
    else
        return lhs_rule_index < rhs_rule_index;
}

<{class_name}::StateVector_ const &<{class_name}::EpsilonClosureOfState_ (std::uint32_t state_index)
{
    // This function implementation depends on there not being an epsilon transition cycle.

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<std::uint32_t,StateVector_> LookupTable;
    static LookupTable s_lookup_table;
    {
        LookupTable::iterator find_it = s_lookup_table.find(state_index);
        if (find_it != s_lookup_table.end())
            return find_it->second;
    }

    // This set collects the epsilon closure with no duplicates
    StateSet_ epsilon_closure_set;
    State_ const &state = ms_state_table_[state_index];
    bool state_has_non_epsilon_transitions = false;
    for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count;
         transition != transition_end;
         ++transition)
    {
        if (transition->m_type == Transition_::EPSILON)
        {
            StateVector_ const &sub_epsilon_closure = EpsilonClosureOfState_(transition->m_data_index);
            for (StateVector_::const_iterator it = sub_epsilon_closure.begin(), it_end = sub_epsilon_closure.end(); it != it_end; ++it)
                epsilon_closure_set.insert(*it);
        }
        else
            state_has_non_epsilon_transitions = true;
    }
    // The epsilon closure of a state includes itself if it has non-epsilon transitions
    if (state_has_non_epsilon_transitions)
        epsilon_closure_set.insert(state_index);

    // Add all the elements of epsilon_closure_set to the memoized entry.
    StateVector_ &epsilon_closure = s_lookup_table[state_index];
    epsilon_closure.reserve(epsilon_closure_set.size());
    for (StateSet_::const_iterator it = epsilon_closure_set.begin(), it_end = epsilon_closure_set.end(); it != it_end; ++it)
        epsilon_closure.push_back(*it);
    return epsilon_closure;
}

<{class_name}::StateVector_ const &<{class_name}::EpsilonClosureOfStateSet_ (StateSet_ const &state_set)
{
    // This function implementation depends on there not being an epsilon transition cycle.

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<StateSet_,StateVector_> LookupTable;
    static LookupTable s_lookup_table;
    {
        LookupTable::iterator find_it = s_lookup_table.find(state_set);
        if (find_it != s_lookup_table.end())
            return find_it->second;
    }

    // This set collects the epsilon closure with no duplicates
    StateSet_ epsilon_closure_set;

    for (StateSet_::const_iterator it = state_set.begin(), it_end = state_set.end(); it != it_end; ++it)
    {
        std::uint32_t state_index = *it;
        State_ const &state = ms_state_table_[state_index];
        bool state_has_non_epsilon_transitions = false;
        for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count;
            transition != transition_end;
            ++transition)
        {
            if (transition->m_type == Transition_::EPSILON)
            {
                StateVector_ const &sub_epsilon_closure = EpsilonClosureOfState_(transition->m_data_index);
                for (StateVector_::const_iterator it = sub_epsilon_closure.begin(), it_end = sub_epsilon_closure.end(); it != it_end; ++it)
                    epsilon_closure_set.insert(*it);
            }
            else
                state_has_non_epsilon_transitions = true;
        }
        // The epsilon closure of a state includes itself if it has non-epsilon transitions
        if (state_has_non_epsilon_transitions)
            epsilon_closure_set.insert(state_index);
    }

    // Add all the elements of epsilon_closure_set to the memoized entry.
    StateVector_ &epsilon_closure = s_lookup_table[state_set];
    epsilon_closure.reserve(epsilon_closure_set.size());
    for (StateSet_::const_iterator it = epsilon_closure_set.begin(), it_end = epsilon_closure_set.end(); it != it_end; ++it)
        epsilon_closure.push_back(*it);
    return epsilon_closure;
}

<{class_name}::TransitionVector_ const &<{class_name}::NonEpsilonTransitionsOfState_ (std::uint32_t state_index, std::uint32_t sorted_type_index)
{
    assert(0 <= sorted_type_index && sorted_type_index <= 3);

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::pair<std::uint32_t,std::uint32_t> KeyType;
    typedef std::map<KeyType,TransitionVector_> LookupTable;
    static LookupTable s_lookup_table;

    KeyType key(state_index, sorted_type_index);
    LookupTable::iterator it = s_lookup_table.find(key);
    if (it != s_lookup_table.end())
        return it->second;

    // TODO: probably don't need to memoize epsilon closures because non-epsilon transitions is memoized.
    TransitionSet_ non_epsilon_transition_set;
    StateVector_ const &epsilon_closure = EpsilonClosureOfState_(state_index);
    for (StateVector_::const_iterator it = epsilon_closure.begin(), it_end = epsilon_closure.end(); it != it_end; ++it)
    {
        State_ const &state = ms_state_table_[*it];
        for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count; transition != transition_end; ++transition)
        {
            std::uint32_t transition_sorted_type_index = Transition_::Order::SortedTypeIndex(Transition_::Type(transition->m_type));
            if (transition->m_type != Transition_::EPSILON && transition_sorted_type_index == sorted_type_index)
                non_epsilon_transition_set.insert(*transition);
        }
    }

    TransitionVector_ &non_epsilon_transitions = s_lookup_table[key];
    non_epsilon_transitions.reserve(non_epsilon_transition_set.size());
    for (TransitionSet_::const_iterator it = non_epsilon_transition_set.begin(), it_end = non_epsilon_transition_set.end(); it != it_end; ++it)
        non_epsilon_transitions.push_back(*it);
    return non_epsilon_transitions;
}

<{class_name}::Precedence_ const <{class_name}::ms_precedence_table_[] =
{
<|loop(i, _precedence_count)
    { <{_precedence_level[i]}, <{_precedence_associativity_index[i]}<{if(is_defined(generate_debug_spew_code))}, "<{_precedence_name[i]}"<{end_if} }<{if(i < _precedence_count-1)},<{end_if}
<|end_loop
};

std::size_t const <{class_name}::ms_precedence_count_ = sizeof(<{class_name}::ms_precedence_table_) / sizeof(*<{class_name}::ms_precedence_table_);

<{class_name}::Rule_ const <{class_name}::ms_rule_table_[] =
{
<|loop(i, _rule_count)
    { <{class_name}::Nonterminal::<{_rule_reduction_nonterminal_name[i]}, <{_rule_token_count[i]}, <{_rule_precedence_index[i]}<{if(is_defined(generate_debug_spew_code))}, <{_rule_description[i]}<{end_if} }<{if(i < _rule_count-1)},<{end_if}
<|end_loop
};
std::size_t const <{class_name}::ms_rule_count_ = sizeof(<{class_name}::ms_rule_table_) / sizeof(*<{class_name}::ms_rule_table_);

<{class_name}::State_ const <{class_name}::ms_state_table_[] =
{
<|loop(i, _npda_state_count)
    { <{_npda_state_transition_count[i]}, ms_transition_table_+<{_npda_state_transition_offset[i]}, <{_npda_state_rule_index[i]}<{if(is_defined(generate_debug_spew_code))}, <{_npda_state_description[i]}<{end_if} }<{if(i < _npda_state_count-1)},<{end_if}
<|end_loop
};
std::size_t const <{class_name}::ms_state_count_ = sizeof(<{class_name}::ms_state_table_) / sizeof(*<{class_name}::ms_state_table_);

<{class_name}::Transition_ const <{class_name}::ms_transition_table_[] =
{
<|loop(i, _npda_transition_count)
    { <{class_name}::Transition_::<{_npda_transition_type_name[i]}, <{_npda_transition_token_index[i]}, std::uint32_t(<{_npda_transition_data_index[i]}) }<{if(i < _npda_transition_count-1)},<{end_if}
<|end_loop
};
std::size_t const <{class_name}::ms_transition_count_ = sizeof(<{class_name}::ms_transition_table_) / sizeof(*<{class_name}::ms_transition_table_);
