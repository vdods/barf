<|if(is_defined(generate_debug_spew_code))
template <typename T>
std::ostream &operator << (std::ostream &out, std::set<T> const &s)
{
    out << "{ ";
    for (typename std::set<T>::const_iterator it = s.begin(), it_end = s.end(); it != it_end; ++it)
        out << *it << ", ";
    out << '}';
    return out;
}

template <typename T>
std::ostream &operator << (std::ostream &out, std::vector<T> const &s)
{
    out << "[ ";
    for (typename std::vector<T>::const_iterator it = s.begin(), it_end = s.end(); it != it_end; ++it)
        out << *it << ", ";
    out << ']';
    return out;
}

<|end_if
std::uint32_t <{class_name}::NonterminalStartStateIndex_ (<{class_name}::Nonterminal::Name nonterminal)
{
    switch (nonterminal)
    {
<|for_each(key, _npda_nonterminal_start_state_index)
        case Nonterminal::<{key}: return <{_npda_nonterminal_start_state_index[key]};
<|end_for_each
        default: assert(false && "invalid nonterminal"); return 0;
    }
}

<{class_name}::ParserReturnCode <{class_name}::Parse_ (<{token_data_type} *return_token, Nonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Starting parse\n")

<|end_if
    ParserReturnCode parser_return_code_ = PRC_INTERNAL_ERROR;
    *return_token = <{token_data_default};

<|if(is_defined(enable_scan_actions_exceptions) || is_defined(enable_reduction_rule_exceptions))
    // this is the try {} block generated by specifying the
    // %target.cpp.enable_scan_actions_exceptions or
    // %target.cpp.enable_reduction_rule_exceptions directives in the
    // primary source, to allow necessary cleanup if the scan actions
    // or a reduction rule code block throws an exception.
    try {

<|end_if

    m_npda_ = new Npda_(nonterminal_to_parse);

    bool should_return = false;
<|if(is_defined(generate_debug_spew_code))
    std::size_t iteration_index = 0;
<|end_if
    while (!should_return)
    {
<|if(is_defined(generate_debug_spew_code))
        TRISON_CPP_DEBUG_CODE_(
            *DebugSpewStream() << <{debug_spew_prefix} << "\n";
            *DebugSpewStream() << <{debug_spew_prefix} << "---------- ITERATION " << iteration_index << " --------------\n";
            PrintParserStatus_(*DebugSpewStream());
            *DebugSpewStream() << <{debug_spew_prefix} << '\n';
        )

<|end_if
        if (<{max_allowable_lookahead_count} >= 0 && m_npda_->m_realized_state.MaxRealizedLookaheadQueueSize() > <{max_allowable_lookahead_count})
        {
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Exceeded max allowable lookahead token count (<{max_allowable_lookahead_count}); aborting with error.\n")
<|end_if
            parser_return_code_ = PRC_EXCEEDED_MAX_ALLOWABLE_LOOKAHEADS;
            break;
        }

        if (m_npda_->m_hypothetical_state.m_root->HasTrunkChild())
            ExecuteAndRemoveTrunkActions_(should_return, parser_return_code_, return_token);
        else
            ContinueNPDAParse_(should_return);
<|if(is_defined(generate_debug_spew_code))

        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << '\n')
        ++iteration_index;
<|end_if
    }

<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(
        *DebugSpewStream() << <{debug_spew_prefix} << "\n";
        *DebugSpewStream() << <{debug_spew_prefix} << "---------- RETURNING --------------\n";
        PrintParserStatus_(*DebugSpewStream());
        *DebugSpewStream() << <{debug_spew_prefix} << '\n';
    )

<|end_if
<|if(is_defined(enable_scan_actions_exceptions) || is_defined(enable_reduction_rule_exceptions))
    // this is the catch {} block generated by specifying the
    // %target.cpp.enable_scan_actions_exceptions or
    // %target.cpp.enable_reduction_rule_exceptions directives in the
    // primary source, to allow necessary cleanup if the scan actions
    // or a reduction rule code block throws an exception.
    } catch (...) {
        // // clear the stack, because we won't need it for the next parse.
        // // we don't clear the lookahead queue here because we might want to
        // // parse multiple times from the same input, and the lookahead queue
        // // could have the next few tokens in it.
        // ClearStack_();
        // rethrow the (unknown) exception.
        throw;
    }

<|end_if
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(
        *DebugSpewStream() << <{debug_spew_prefix} << "Parse() is returning ";
        switch (parser_return_code_)
        {
            case PRC_SUCCESS:               *DebugSpewStream() << "PRC_SUCCESS\n";               break;
            case PRC_UNHANDLED_PARSE_ERROR: *DebugSpewStream() << "PRC_UNHANDLED_PARSE_ERROR\n"; break;
            default:                        assert(false && "this should never happen");
                                            parser_return_code_ = PRC_INTERNAL_ERROR; // fall through
            case PRC_INTERNAL_ERROR:        *DebugSpewStream() << "PRC_INTERNAL_ERROR\n";        break;
        }
    )

<|end_if
    return parser_return_code_;
}

void <{class_name}::ExecuteAndRemoveTrunkActions_ (bool &should_return, ParserReturnCode &parser_return_code_, <{token_data_type} *&return_token)
{
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Parse stack tree has trunk; executing trunk actions.\n")
<|end_if
    //while (m_npda_->m_hypothetical_state.m_root->HasTrunkChild())
    // HIPPO TEMP -- just do one at a time so that the parser state has a chance to be printed after each.
    if (m_npda_->m_hypothetical_state.m_root->HasTrunkChild())
    {
        ParseStackTreeNode_ *trunk_child = m_npda_->m_hypothetical_state.m_root->PopTrunkChild();
        bool destroy_and_recreate_parse_tree = false;
        switch (trunk_child->m_spec.m_type)
        {
            case ParseStackTreeNode_::RETURN: {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Executing trunk action RETURN.\n")
<|end_if
                assert(m_npda_->m_realized_state.TokenStack().size() == 2);
                parser_return_code_ = PRC_SUCCESS;
                *return_token = m_npda_->m_realized_state.TokenStack().back().m_data;
                should_return = true;
                break;
            }
            case ParseStackTreeNode_::REDUCE: {
                // Execute the appropriate rule on the top tokens in the stack
                std::uint32_t const &rule_index = trunk_child->m_spec.m_single_data;
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Executing trunk action REDUCE rule " << rule_index << "; " << ms_rule_table_[rule_index].m_description << '\n')
<|end_if
                Rule_ const &rule = ms_rule_table_[rule_index];
                Token::Data reduced_nonterminal_token_data = ExecuteReductionRule_(rule_index, m_npda_->m_realized_state.TokenStack());
                m_npda_->m_realized_state.ExecuteActionReduce(rule, reduced_nonterminal_token_data, m_npda_->m_hypothetical_state.m_hps_queue);

                // Because REDUCE involves popping the stack, indicate that the parse tree should be destroyed and
                // recreated.  This is draconian and non-optimal, but simple and effective.  TODO: Because HPS branches
                // are blocked right after a REDUCE or POP_STACK, maybe don't bother adding any children below REDUCE
                // or POP_STACK nodes.
                //destroy_and_recreate_parse_tree = true; // HIPPO
                break;
            }
            case ParseStackTreeNode_::SHIFT: {
                //TEMP HIPPO assert(trunk_child->m_spec.m_single_data == ParseStackTreeNode_::UNUSED_DATA); // m_single_data is not used for SHIFT.
<|if(is_defined(generate_debug_spew_code))
                std::uint32_t const &shifted_token_id = trunk_child->m_spec.m_single_data;
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Executing trunk action SHIFT " << Token(shifted_token_id) << '\n')
<|end_if
                m_npda_->m_realized_state.ExecuteActionShift(trunk_child->m_child_branch_node_ptr_set, m_npda_->m_hypothetical_state.m_hps_queue);
                break;
            }
            case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Executing trunk action INSERT_LOOKAHEAD_ERROR, and setting has-encountered-error-state flag.\n")
<|end_if
                m_npda_->m_realized_state.ExecuteActionInsertLookaheadError(m_npda_->m_hypothetical_state.m_hps_queue);
                break;
            }
            case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Executing trunk action DISCARD_LOOKAHEAD.\n")
<|end_if
                m_npda_->m_realized_state.ExecuteActionDiscardLookahead(m_npda_->m_hypothetical_state.m_hps_queue);
                break;
            }
            case ParseStackTreeNode_::POP_STACK: {
                std::uint32_t const &pop_count = trunk_child->m_spec.m_single_data;
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Executing trunk action POP_STACK " << pop_count << ".\n")
<|end_if

                // This one is tricky to implement within RealizedState_ alone, mainly because
                // of the ThrowAwayToken_ call.
                if (m_npda_->m_realized_state.TokenStack().size() > pop_count)
                {
                    for (std::uint32_t i = 0; i < pop_count; ++i)
                    {
                        // TODO: make this call (this is really just for the printing, since
                        // ThrowAwayToken_ is called below)
                        //ThrowAwayRealizedStateStackElement_(m_npda_->m_realized_state.m_branch_node_ptr_set, m_);

                        // TODO: Print the realized state branch node ptr set (this is complicated
                        // because it's a collection of stacks), so do it later.
                        ThrowAwayToken_(m_npda_->m_realized_state.PopStack());
                    }
                }
                else
                {
                    // We're popping more than the whole stack, which is an error
                    parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
                    should_return = true;
                }

                // Because POP_STACK involves popping the stack, indicate that the parse tree should be destroyed and
                // recreated (from the states in the top element of m_realized_stack_).  This is draconian and non-optimal,
                // but simple and effective.
                destroy_and_recreate_parse_tree = true; // HIPPO
                break;
            }

            default:
                assert(false && "this should not happen");
                break;
        }
        assert(trunk_child->m_parent_node == NULL);
        assert(trunk_child->m_child_nodes.empty());
        delete trunk_child;

        if (destroy_and_recreate_parse_tree)
        {
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Destroying and recreating parse tree based on top element of realized stack.\n")
<|end_if
            // Destroy the whole parse tree and reconstruct HPSes based on top of m_realized_stack_,
            // but preserve m_realized_stack_ and m_realized_lookahead_queue_.  This is rather draconian and is
            // non-optimal in terms of memory allocation operations, but it is simple and effective, and should
            // only occur during error handling.
            assert(m_npda_->m_hypothetical_state.m_new_hps_queue.empty());
            m_npda_->m_hypothetical_state.m_hps_queue.clear();
            delete m_npda_->m_hypothetical_state.m_root;
            m_npda_->m_hypothetical_state.m_root = NULL;
            // At this point, the parse tree should be destroyed.  Create a new root node
            m_npda_->m_hypothetical_state.m_root = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::ROOT));
            // Then add HPS nodes for each npda state in the top element of m_realized_stack_.
            // TODO: assert that there is at least one branch and its depth is nonzero.
            BranchNodePtrSet_ const &reconstruct_branch_node_ptr_set = m_npda_->m_realized_state.BranchNodePtrSetStack().back();
<|if(is_defined(generate_debug_spew_code))
            //TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        reconstructing branches " << reconstruct_branch_node_ptr_set << '\n')
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        reconstructing branches " << "(branch values omitted)" << '\n')
<|end_if
            for (BranchNodePtrSet_::const_iterator it = reconstruct_branch_node_ptr_set.begin(),
                                                   it_end = reconstruct_branch_node_ptr_set.end();
                 it != it_end;
                 ++it)
            {
                BranchNodePtr_ const &branch_node_ptr = *it;
                ParseStackTreeNode_ *hps = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::HPS));
                hps->m_branch_node_ptr = branch_node_ptr;
<|if(is_defined(generate_debug_spew_code))
                hps->m_branch_node_token_id_ptr = nullptr; // TODO: FIGURE THIS OUT
<|end_if

                m_npda_->m_hypothetical_state.m_root->AddChild(hps);
                m_npda_->m_hypothetical_state.m_hps_queue.push_back(hps);
            }

            // TODO: Because HPS branches are blocked right after a REDUCE or POP_STACK, maybe don't bother
            // adding any children below REDUCE or POP_STACK nodes.  This would reduce the number of memory
            // operations.
        }
    }
}

void <{class_name}::ContinueNPDAParse_ (bool &should_return)
{
    // If there are no non-blocked hps-es, then the parse should stop.  If any non-blocked hps-es
    // are processed, then this flag will be set to false.
    should_return = true;

<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Parse stack tree does not have trunk; continuing parse.\n")

<|end_if
    // If there's a SHIFT/REDUCE conflict, then see if it can be resolved first.
    {
        ParseStackTreeNode_ *shift  = NULL;
        ParseStackTreeNode_ *reduce = NULL;
        // TODO: Move this handling into its own function
        if (m_npda_->m_hypothetical_state.m_root->HasShiftReduceConflict(shift, reduce))
        {
            assert(shift != NULL);
            assert(reduce != NULL);
            ParseStackTreeNode_::PrecedenceLevelRange shift_precedence_level_range = shift->ComputePrecedenceLevelRange(1);
            ParseStackTreeNode_::PrecedenceLevelRange reduce_precedence_level_range = reduce->ComputePrecedenceLevelRange(1);
            assert(reduce_precedence_level_range.first == reduce_precedence_level_range.second);

<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    SHIFT/REDUCE conflict encountered. REDUCE precedence level range: [" << ms_precedence_table_[reduce_precedence_level_range.first].m_name << ", " << ms_precedence_table_[reduce_precedence_level_range.second].m_name << "], SHIFT precedence level range: [" << ms_precedence_table_[shift_precedence_level_range.first].m_name << ", " << ms_precedence_table_[shift_precedence_level_range.second].m_name << "]\n")

<|end_if
            // 6 possibilities (the higher lines indicate higher precedence level.  same line
            // indicates equality).  there is always exactly one reduce hps, and at least
            // one shift hps.
            //
            // note that if a shift and a reduce have the same precedence level, then they also
            // have the same associativity.
            //
            // 1.     shift        2.     shift        3.
            //        shift               shift
            // reduce              reduce shift        reduce shift
            //
            // 4.                  5.                  6.
            //                                                shift
            // reduce shift        reduce              reduce shift
            //        shift               shift               shift
            //        shift               shift
            //
            // cases 1 and 5 can be trivially resolved -- by pruning the reduce
            // and by pruning the shift respectively.
            //
            // case 2 can only be resolved if the associativity of the reduction rule
            // is RIGHT, in which case the reduce is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 3 may be trivially resolved via rule associativity (LEFT causes the
            // shift to be pruned, RIGHT causes the reduce to be pruned, and NONASSOC
            // should cause an error).
            //
            // case 4 can only be resolved if the associativity of the reduction rule
            // is LEFT, in which case the shift is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 6 can not be resolved at this point.

            bool conflict_resolved = false;

            // Case 1
            if (reduce_precedence_level_range.second < shift_precedence_level_range.first)
            {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        Case 1; REDUCE < SHIFT; pruning REDUCE and continuing.\n")
<|end_if
                m_npda_->m_hypothetical_state.RemoveBranchIfNotTrunk(reduce);
                delete reduce;
                reduce = NULL;
                conflict_resolved = true;
            }
            // Case 2
            else if (reduce_precedence_level_range.first == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        Case 2; REDUCE <= SHIFT; ")
<|end_if
                Rule_ const &reduction_rule = ms_rule_table_[reduce->m_spec.m_single_data];
                Precedence_ const &reduction_rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity_index == 2) // 2 is right-associative
                {
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "pruning right-associative REDUCE and continuing.\n")
<|end_if
                    m_npda_->m_hypothetical_state.RemoveBranchIfNotTrunk(reduce);
                    delete reduce;
                    reduce = NULL;
                    conflict_resolved = true;
                }
                else
                {
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "can't resolve conflict at this time.\n")
<|else
                    // Can't resolve the conflict at this time.
<|end_if
                }
            }
            // Case 3
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first == shift_precedence_level_range.second)
            {
            /* HIPPO temp disabled
                Rule_ const &reduction_rule = ms_rule_table_[reduce->m_spec.m_single_data];
                Precedence_ const &reduction_rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        Case 3; REDUCE == SHIFT; rule " << reduce->m_spec.m_single_data << " associativity index: " <<
 reduction_rule_precedence.m_associativity_index << '\n')
<|end_if
                switch (reduction_rule_precedence.m_associativity_index)
                {
                    case 0: // 0 is left-associative
<|if(is_defined(generate_debug_spew_code))
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "pruning left-associative SHIFT and continuing.\n")
<|end_if
                        m_npda_->m_hypothetical_state.RemoveBranchIfNotTrunk(shift);
                        delete shift;
                        shift = NULL;
                        conflict_resolved = true;
                        break;

                    case 1: // 1 is non-associative
<|if(is_defined(generate_debug_spew_code))
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "composition of non-associative rules is an error.\n")
<|end_if
                        assert(false && "TODO: implement nonassoc error handling");
                        break;

                    case 2: // 2 is right-associative
<|if(is_defined(generate_debug_spew_code))
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "pruning right-associative REDUCE and continuing.\n")
<|end_if
                        m_npda_->m_hypothetical_state.RemoveBranchIfNotTrunk(reduce);
                        delete reduce;
                        reduce = NULL;
                        conflict_resolved = true;
                        break;

                    default:
                        assert(false && "this should never happen");
                        break;
                }
                */
            }
            // Case 4
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.second &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        Case 4; REDUCE >= SHIFT; ")
<|end_if
                Rule_ const &reduction_rule = ms_rule_table_[reduce->m_spec.m_single_data];
                Precedence_ const &reduction_rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity_index == 0) // 0 is left-associative
                {
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "pruning left-associative SHIFT and continuing.\n")
<|end_if
                    m_npda_->m_hypothetical_state.RemoveBranchIfNotTrunk(shift);
                    delete shift;
                    shift = NULL;
                    conflict_resolved = true;
                }
                else
                {
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "can't resolve conflict at this time.\n")
<|else
                    // Can't resolve the conflict at this time.
<|end_if
                }
            }
            // Case 5
            else if (reduce_precedence_level_range.first > shift_precedence_level_range.second)
            {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        Case 5; REDUCE > SHIFT; pruning SHIFT and continuing.\n")
<|end_if
                m_npda_->m_hypothetical_state.RemoveBranchIfNotTrunk(shift);
                delete shift;
                shift = NULL;
                conflict_resolved = true;
            }
            // Case 6
            else {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        Case 6; ambiguous SHIFT/REDUCE precedence comparison; can't resolve conflict at this time.\n")
<|else
                // Ambiguous SHIFT/REDUCE precedence comparison; can't resolve the conflict at this time.
<|end_if
                assert(reduce_precedence_level_range.first > shift_precedence_level_range.first);
                assert(reduce_precedence_level_range.second < shift_precedence_level_range.second);
            }

            if (conflict_resolved)
            {
                should_return = false;

                assert(m_npda_->m_hypothetical_state.m_new_hps_queue.empty());
                // Take new hps-es and clear old ones.
                for (HPSQueue_::iterator hps_it = m_npda_->m_hypothetical_state.m_hps_queue.begin(), hps_it_end = m_npda_->m_hypothetical_state.m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                {
                    ParseStackTreeNode_ *hps = *hps_it;
                    if (hps != NULL)
                        m_npda_->m_hypothetical_state.m_new_hps_queue.push_back(hps);
                }
                m_npda_->m_hypothetical_state.m_hps_queue.clear();
                std::swap(m_npda_->m_hypothetical_state.m_hps_queue, m_npda_->m_hypothetical_state.m_new_hps_queue);
                assert(m_npda_->m_hypothetical_state.m_new_hps_queue.empty());
                // TODO: Break this large function up into smaller logical units
                return;
            }
        }
    }

    // Compute the minimum of all hps-es' m_realized_lookahead_cursor values, in order
    // to determine which ones have processed the lowest number of lookaheads.  This is
    // done so that one hps doesn't get way ahead of the others.
    //
    // Note that because min_realized_lookahead_cursor is only used within the loop over non-nullified
    // HPS nodes, it doesn't matter if min_realized_lookahead_cursor is not set to a value different
    // from std::numeric_limits<std::uint32_t>::max(), because it won't be used.
    std::uint32_t min_realized_lookahead_cursor = std::numeric_limits<std::uint32_t>::max();
    for (HPSQueue_::iterator hps_it = m_npda_->m_hypothetical_state.m_hps_queue.begin(), hps_it_end = m_npda_->m_hypothetical_state.m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        // Skip nullified HPS nodes.
        if (*hps_it == NULL)
            continue;

        ParseStackTreeNode_ &hps = **hps_it;
        if (hps.m_realized_lookahead_cursor < min_realized_lookahead_cursor)
            min_realized_lookahead_cursor = hps.m_realized_lookahead_cursor;
    }

    // Process transitions in order of their SortedTypeIndex.  Only process HPSes that are at min_realized_lookahead_cursor.
    assert(m_npda_->m_hypothetical_state.m_new_hps_queue.empty()); // This is the starting condition
    for (std::uint32_t current_sorted_type_index = 0; current_sorted_type_index <= 3; ++current_sorted_type_index)
    {
<|if(is_defined(generate_debug_spew_code))
        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Processing transitions having SortedTypeIndex equal to " << current_sorted_type_index << " and m_realized_lookahead_cursor equal to " << min_realized_lookahead_cursor << ".\n")

<|end_if
        if (!m_npda_->m_hypothetical_state.m_new_hps_queue.empty())
        {
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "        Early-out based on sorted type index.\n")
<|end_if
            break;
        }

        // Process non-blocked hps-es.
        for (HPSQueue_::iterator hps_it = m_npda_->m_hypothetical_state.m_hps_queue.begin(), hps_it_end = m_npda_->m_hypothetical_state.m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
        {
            // Skip nullified HPS nodes.
            if (*hps_it == NULL)
                continue;

            ParseStackTreeNode_ &hps = **hps_it;

            assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS);
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(
                *DebugSpewStream() << <{debug_spew_prefix} << "        Processing HPS: ";
                hps.Print(*DebugSpewStream(), *this, DebugSpewPrefix(), 0);
            )

<|end_if
            // If a hps is blocked, then save it for the next parse iteration but don't do anything with it.
            if (hps.IsBlockedHPS())
            {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "            Hypothetical Parser State is blocked; preserving for next iteration.\n")
<|end_if
                m_npda_->m_hypothetical_state.m_new_hps_queue.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // If a hps' m_realized_lookahead_cursor is greater than min_realized_lookahead_cursor, then
            // save it for the next parse iteration but don't do anything with it.
            if (hps.m_realized_lookahead_cursor > min_realized_lookahead_cursor)
            {
<|if(is_defined(generate_debug_spew_code))
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "            Hypothetical Parser State isn't at min_realized_lookahead_cursor (which is " << min_realized_lookahead_cursor << "); preserving for next iteration.\n")
<|end_if
                m_npda_->m_hypothetical_state.m_new_hps_queue.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // This hps isn't blocked, so indicate that the parse should continue.
            should_return = false;

//             assert(!hps.m_stack.empty());
//             std::uint32_t hps_state_index = hps.m_stack.back().m_state_index;
            // TEMP HACK HIPPO
            std::uint32_t hps_state_index;
            // if (hps.m_stack.empty())
            // {
            //     // This doesn't hold in all cases.
            //     //assert(m_npda_->m_realized_stack_.size() == 1 && "This may not hold in all cases");
            //     assert(!m_npda_->m_realized_stack_.empty());
            //     assert(m_npda_->m_realized_stack_.back().m_npda_state_vector.size() == 1 && "This may not hold in all cases");
            //     hps_state_index = m_npda_->m_realized_stack_.back().m_npda_state_vector[0];
            // }
            // else
            // {
            //     hps_state_index = hps.m_stack.back().m_state_index;
            // }
            hps_state_index = hps.m_branch_node_ptr->Data();

            // Retrieve all transitions whose SortedTypeIndex is current_sorted_type_index.
            TransitionVector_ const &non_epsilon_transitions = NonEpsilonTransitionsOfState_(hps_state_index, current_sorted_type_index);
            // Exercise all valid transitions whose SortedTypeIndex is current_sorted_type_index.
            for (TransitionVector_::const_iterator transition_it = non_epsilon_transitions.begin(), transition_it_end = non_epsilon_transitions.end(); transition_it != transition_it_end; ++transition_it)
            {
                Transition_ const &transition = *transition_it;
                assert(transition.m_type >= Transition_::RETURN);
                assert(transition.m_type <= Transition_::POP_STACK);
                std::uint32_t transition_sorted_type_index = Transition_::Order::SortedTypeIndex(Transition_::Type(transition.m_type));
                assert(transition_sorted_type_index == current_sorted_type_index);

<|if(is_defined(generate_debug_spew_code))
/*
                TRISON_CPP_DEBUG_CODE_(
                    *DebugSpewStream() << <{debug_spew_prefix} << "            Processing transition " << ParseStackTreeNode_::AsString(ParseStackTreeNode_::Type(transition.m_type)) << " with transition token " << Token(transition.m_token_index) << " and data ";
                    if (transition.m_data_index == ParseStackTreeNode_::UNUSED_DATA)
                        *DebugSpewStream() << "<N/A>";
                    else
                        *DebugSpewStream() << transition.m_data_index;
                    *DebugSpewStream() << " and sorted type index " << Transition_::Order::SortedTypeIndex(Transition_::Type(transition.m_type)) << '\n';
                )
*/
<|end_if

                ParseStackTreeNode_ *resulting_hps = NULL;
                // If it's a default transition, there's no need to access the lookahead.
                if (transition.m_token_index == Nonterminal::none_)
                {
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "            Exercising transition without accessing lookahead... ")
<|end_if
                    resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << '\n')
<|end_if
                }
                // Otherwise, the lookahead must be accessed.
                else
                {
                    Token::Id lookahead_token_id = hps.LookaheadTokenId(*this);
<|if(is_defined(generate_debug_spew_code))
/*
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "                Lookahead is " << Token(lookahead_token_id) << '\n')
*/
<|end_if
                    if (transition.m_token_index == lookahead_token_id)
                    {
<|if(is_defined(generate_debug_spew_code))
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "            Exercising transition using lookahead " << Token(lookahead_token_id) << " ... ")
<|end_if
                        resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
<|if(is_defined(generate_debug_spew_code))
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << '\n')
<|end_if
                    }
                }
                if (resulting_hps != NULL)
                    m_npda_->m_hypothetical_state.m_new_hps_queue.push_back(resulting_hps);
            }
        }
    }

    // Take new hps-es and clear old ones.
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "    Removing defunct HPSes...\n")
<|end_if
    for (HPSQueue_::iterator hps_it = m_npda_->m_hypothetical_state.m_hps_queue.begin(), hps_it_end = m_npda_->m_hypothetical_state.m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ *hps = *hps_it;
        if (hps != NULL)
        {
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(
                hps->Print(*DebugSpewStream(), *this, DebugSpewPrefix(), 2);
            )
<|end_if
            hps->RemoveFromParent();
            delete hps;
        }
    }
    m_npda_->m_hypothetical_state.m_hps_queue.clear();
    std::swap(m_npda_->m_hypothetical_state.m_hps_queue, m_npda_->m_hypothetical_state.m_new_hps_queue);
    assert(m_npda_->m_hypothetical_state.m_new_hps_queue.empty());
}

<{class_name}::Token::Data <{class_name}::ExecuteReductionRule_ (std::uint32_t const rule_index_, TokenStack_ const &token_stack)<{if(!is_defined(enable_reduction_rule_exceptions))} throw()<{end_if}
{
    assert(rule_index_ < ms_rule_count_);
<|if(is_defined(generate_debug_spew_code))
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Executing reduction rule " << rule_index_ << '\n')
<|end_if
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return <{token_data_default};

<|loop(i, _rule_count)
        case <{i}:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < token_stack.size());
<|loop(j, _rule_token_table_count[i])
<|if(_rule_token_assigned_id[_rule_token_table_offset[i]+j] != "")
            <{if(_rule_token_assigned_type[_rule_token_table_offset[i]+j] != "")}<{_rule_token_assigned_type[_rule_token_table_offset[i]+j]}<{else}<{token_data_type}<{end_if} <{_rule_token_assigned_id[_rule_token_table_offset[i]+j]}(<{if(_rule_token_assigned_type[_rule_token_table_offset[i]+j] != "")}<{custom_token_data_type_cast}<<{_rule_token_assigned_type[_rule_token_table_offset[i]+j]}>(token_stack[token_stack.size()-<{_rule_token_count[i]-j}].m_data)<{else}token_stack[token_stack.size()-<{_rule_token_count[i]-j}].m_data<{end_if});
<|end_if
<|end_loop
<|_rule_code[i]
            break;
        }

<|end_loop
    }

<|if(!is_defined(dont_assert_if_reduction_rule_code_doesnt_return))
    assert(false && "no value returned from reduction rule code block");
<|end_if
    return <{token_data_default};
}

// void <{class_name}::ThrowAwayRealizedStateStackElement_ (BranchNodePtrSet_ const &branch_node_ptr_set, Token_ &token) throw()
// {
<|if(is_defined(generate_debug_spew_code))
<|if(0)
//     TRISON_CPP_DEBUG_CODE_(
//         *DebugSpewStream() << <{debug_spew_prefix} << "Executing throw-away-token actions on token " << m_token << " corresponding to realized stack element with npda state set ( ";
//         for (NpdaStateIndexVector_::const_iterator it = stack_element.m_npda_state_vector.begin(),
//                                                    it_end = stack_element.m_npda_state_vector.end();
//                 it != it_end;
//                 ++it)
//         {
//             std::uint32_t npda_state = *it;
//             *DebugSpewStream() << npda_state << ' ';
//         }
//         *DebugSpewStream() << ")\n";
//     )
//
<|end_if
<|end_if
//     ThrowAwayTokenData_(stack_element.m_token.m_data);
// }

<|if(is_defined(generate_debug_spew_code))
void <{class_name}::PrintParserStatus_ (std::ostream &out) const
{
    assert(m_npda_->m_hypothetical_state.m_root != NULL);

    // TODO: Print full stack (this is quite a lot)
    out << <{debug_spew_prefix} << "Realized state branch node stacks are (each listed bottom to top):\n";
    for (BranchNodePtrSet_::const_iterator it = m_npda_->m_realized_state.BranchNodePtrSetStack().back().begin(),
                                           it_end = m_npda_->m_realized_state.BranchNodePtrSetStack().back().end();
         it != it_end;
         ++it)
    {
        BranchNodePtr_ const &branch_node_ptr = *it;
        // This is sort of dumb, but this is an effective way to traverse a singly-linked list backwards.
        {
            out << <{debug_spew_prefix} << "    (";
            std::vector<NpdaStateIndex_> npda_state_stack_reversed;
            branch_node_ptr->PopulateVector(npda_state_stack_reversed);
            for (std::vector<NpdaStateIndex_>::reverse_iterator it = npda_state_stack_reversed.rbegin(),
                                                                it_end = npda_state_stack_reversed.rend();
                 it != it_end;
                 ++it)
            {
                // TODO: Set the output width to be the max of any state
                out << *it;
                std::vector<NpdaStateIndex_>::reverse_iterator next_it = it;
                ++next_it;
                if (next_it != it_end)
                    out << ' ';
            }
            out << ")\n";
        }
    }

<|if(0)
    // out << <{debug_spew_prefix} << "Realized state stack (bottom to top) is:\n";
    // for (std::size_t i = 0; i < m_npda_->m_realized_stack_.size(); ++i)
    // {
    //     RealizedBranchStackElement_ const &stack_element = m_npda_->m_realized_stack_[i];
    //     out << <{debug_spew_prefix} << "    ( ";
    //     for (NpdaStateIndexVector_::const_iterator it = stack_element.m_npda_state_vector.begin(),
    //                                       it_end = stack_element.m_npda_state_vector.end();
    //          it != it_end;
    //          ++it)
    //     {
    //         std::uint32_t npda_state = *it;
    //         out << npda_state << ' ';
    //     }
    //     out << ")\n";
    // }
<|end_if
    out << <{debug_spew_prefix} << "Max realized lookahead count (so far) is:\n";
    out << <{debug_spew_prefix} << "    " << m_npda_->m_realized_state.MaxRealizedLookaheadQueueSize() << '\n';
    out << <{debug_spew_prefix} << "Has-encountered-error-state (so far) is:\n";
    out << <{debug_spew_prefix} << "    " << (m_npda_->m_realized_state.HasEncounteredErrorState() ? "true" : "false") << '\n';
    out << <{debug_spew_prefix} << "Realized stack tokens then realized lookahead queue is:\n";
    out << <{debug_spew_prefix} << "    ";
    // for (std::size_t i = 1; i < m_npda_->m_realized_stack_.size(); ++i)
    //     out << m_npda_->m_realized_stack_[i].m_token << ' ';
    for (TokenStack_::const_iterator it = m_npda_->m_realized_state.TokenStack().begin(),
                                     it_end = m_npda_->m_realized_state.TokenStack().end();
         it != it_end;
         ++it)
    {
        Token const &token = *it;
        out << token << ' ';
    }
    out << ". ";
    // for (std::size_t i = 0; i < m_npda_->m_realized_lookahead_queue_.size(); ++i)
    //     out << m_npda_->m_realized_lookahead_queue_[i] << ' ';
    for (TokenQueue_::const_iterator it = m_npda_->m_realized_state.LookaheadQueue().begin(),
                                     it_end = m_npda_->m_realized_state.LookaheadQueue().end();
         it != it_end;
         ++it)
    {
        Token const &token = *it;
        out << token << ' ';
    }
    out << '\n';

    m_npda_->m_hypothetical_state.m_root->Print(out, *this, DebugSpewPrefix());
    out << <{debug_spew_prefix} << '\n';

    out << <{debug_spew_prefix} << "HPS queue:\n";
    for (HPSQueue_::const_iterator it = m_npda_->m_hypothetical_state.m_hps_queue.begin(), it_end = m_npda_->m_hypothetical_state.m_hps_queue.end(); it != it_end; ++it)
    {
        ParseStackTreeNode_ *hps = *it;
        assert(hps != NULL);
        hps->Print(out, *this, DebugSpewPrefix(), 1);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// <{class_name}::RealizedState_
// ////////////////////////////////////////////////////////////////////////////

<{class_name}::RealizedState_::RealizedState_ (std::uint32_t initial_state)
    :   m_max_realized_lookahead_queue_size(0)
    ,   m_has_encountered_error_state(false)
{
    BranchNodePtrSet_ initial_branch_node_ptr_set;
    initial_branch_node_ptr_set.insert(BranchNode_::Create(initial_state));
    m_branch_node_ptr_set_stack.push_back(initial_branch_node_ptr_set);
    m_token_stack.push_back(Token(Nonterminal::none_));
}

void <{class_name}::RealizedState_::PushBackLookahead (Token const &lookahead, HPSQueue_ const &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out into Npda_

    m_lookahead_queue.push_back(lookahead);
    UpdateMaxRealizedLookaheadQueueSize(hps_queue);
}

<{class_name}::Token <{class_name}::RealizedState_::PopStack ()
{
    // There is a dummy token at the bottom of the stack which corresponds with the start state.
    assert(m_token_stack.size() >= 2);

    Token popped_token(m_token_stack.back());
    m_token_stack.pop_back();

    // // TODO: Maybe make a "Branch" abstraction that can handle pushing and popping
    // BranchNodePtrSet_ new_branch_set;
    // for (BranchNodePtrSet_::iterator it = m_branch_node_ptr_set.begin(), it_end = m_branch_node_ptr_set.end(); it != it_end; ++it)
    // {
    //     std::shared_ptr<BranchNode_> const &branch_node = *it;
    //     // In this context, "branch_node->Next()" is the element in the stack below branch_node.
    //     assert(branch_node->HasNext());
    //     new_branch_set.insert(branch_node->Next());
    // }
    // // Replace the contents of m_branch_node_ptr_set with the popped branches.
    // std::swap(new_branch_set, m_branch_node_ptr_set);

    assert(!m_branch_node_ptr_set_stack.empty());
    m_branch_node_ptr_set_stack.pop_back();

    return popped_token;
}

// void <{class_name}::RealizedState_::ExecuteAction (Transition_::Type action, ActionData_ action_data)
// {
// }

void <{class_name}::RealizedState_::ExecuteActionReduce (Rule_ const &rule, Token::Data const &reduced_nonterminal_token_data, HPSQueue_ &hps_queue)
{
    for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
        PopStack();
    // Push the reduced nonterminal token data onto the front of the lookahead queue
    PushFrontLookahead(Token(rule.m_reduction_nonterminal_token_id, reduced_nonterminal_token_data), hps_queue);
}

void <{class_name}::RealizedState_::ExecuteActionShift (BranchNodePtrSet_ const &shifted_branch_node_ptr_set, HPSQueue_ &hps_queue)
{
    // Ensure that each of the branch nodes in the shifted set are actually children of the current
    // set of branch nodes.
    assert(!m_branch_node_ptr_set_stack.empty());
    BranchNodePtrSet_ const &stack_top = m_branch_node_ptr_set_stack.back();
    for (BranchNodePtrSet_::const_iterator it = shifted_branch_node_ptr_set.begin(), it_end = shifted_branch_node_ptr_set.end(); it != it_end; ++it)
    {
        BranchNodePtr_ const &branch_node_ptr = *it;
        assert(stack_top.find(branch_node_ptr->Next()) != stack_top.end());
    }
    // Ensure that there's actually a lookahead.
    assert(!m_lookahead_queue.empty());


    // Simply assign the shifted branch node set to this one.  This is effectively pushing onto the stack.
    m_branch_node_ptr_set_stack.push_back(shifted_branch_node_ptr_set);
    //m_branch_node_ptr_set = shifted_branch_node_ptr_set;
    // Push the token onto the stack.
    m_token_stack.push_back(m_lookahead_queue.front());
    // Pop the shifted lookahead from the queue
    PopFrontLookahead(hps_queue);
}

void <{class_name}::RealizedState_::ExecuteActionInsertLookaheadError (HPSQueue_ &hps_queue)
{
    PushFrontLookahead(Token(Terminal::ERROR_), hps_queue);
    SetHasEncounteredErrorState();
}

void <{class_name}::RealizedState_::ExecuteActionDiscardLookahead (HPSQueue_ &hps_queue)
{
    assert(!m_lookahead_queue.empty());
    PopFrontLookahead(hps_queue);
}

void <{class_name}::RealizedState_::PopFrontLookahead (HPSQueue_ &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out into Npda_

    assert(!m_lookahead_queue.empty());
    // Because the contents of m_lookahead_queue are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        --hps.m_realized_lookahead_cursor;
    }
    m_lookahead_queue.pop_front();
}

void <{class_name}::RealizedState_::PushFrontLookahead (Token const &lookahead, HPSQueue_ &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out into Npda_

    m_lookahead_queue.push_front(lookahead);
    // Because the contents of m_lookahead_queue_ are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        ++hps.m_realized_lookahead_cursor;
    }
    UpdateMaxRealizedLookaheadQueueSize(hps_queue);
}

void <{class_name}::RealizedState_::UpdateMaxRealizedLookaheadQueueSize (HPSQueue_ const &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out into Npda_

    // HPS's m_realized_lookahead_cursor is an index into RealizedState::m_lookahead_queue, so the number
    // of lookaheads depends on the cursor for each branch.
    for (HPSQueue_::const_iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        // Skip nullified elements because they have been deleted.
        if (*hps_it == NULL)
            continue;

        ParseStackTreeNode_ const &hps = **hps_it;
        // The actual lookaheads are offset by the realized lookahead cursor, because the tokens before
        // the realized lookahead cursor are ones we've seen already, and therefore don't contribute to
        // the actual lookahead count.
        assert(m_lookahead_queue.size() >= hps.m_realized_lookahead_cursor);
        std::size_t hps_actual_lookahead_count = m_lookahead_queue.size() - hps.m_realized_lookahead_cursor;
        m_max_realized_lookahead_queue_size = std::max(m_max_realized_lookahead_queue_size, hps_actual_lookahead_count);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// <{class_name}::HypotheticalState_
// ////////////////////////////////////////////////////////////////////////////

<{class_name}::HypotheticalState_::HypotheticalState_ (std::uint32_t initial_state)
{
    m_root = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::ROOT));

    ParseStackTreeNode_ *hps = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::HPS));
    hps->m_branch_node_ptr = BranchNode_::Create(initial_state);
    hps->m_branch_node_token_id_ptr = BranchNodeTokenId_::Create(Nonterminal::none_);

    m_root->AddChild(hps);
    m_hps_queue.push_back(hps);
}

<{class_name}::HypotheticalState_::~HypotheticalState_ ()
{
    delete m_root;
    m_root = NULL;
    m_hps_queue.clear();
    m_new_hps_queue.clear();
}

void <{class_name}::HypotheticalState_::RemoveBranchIfNotTrunk (ParseStackTreeNode_ *branch_node)
{
    // Find the most root-ward ancestor that is an only child.
    ParseStackTreeNode_ *branch_root = branch_node->BranchRoot();
    assert(branch_root != NULL);
    // Only do stuff if the branch isn't the trunk (i.e. only if its root isn't the tree root).
    if (branch_root->m_parent_node != NULL)
    {
        branch_root->RemoveFromParent();
        branch_node->NullifyHPSNodeDescendantsInHPSQueue(m_hps_queue);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// <{class_name}::ParseStackTreeNode_
// ////////////////////////////////////////////////////////////////////////////

char const *<{class_name}::ParseStackTreeNode_::AsString (Type type)
{
    static char const *const LOOKUP_TABLE[COUNT_] =
    {
        "ROOT",
        "RETURN",
        "REDUCE",
        "SHIFT",
        "INSERT_LOOKAHEAD_ERROR",
        "DISCARD_LOOKAHEAD",
        "POP_STACK",
        "HPS"
    };
    assert(std::uint32_t(type) < COUNT_);
    return LOOKUP_TABLE[std::uint32_t(type)];
}

<|end_if

bool <{class_name}::ParseStackTreeNode_::ParseStackTreeNodeOrder::operator () (<{class_name}::ParseStackTreeNode_ const *lhs, <{class_name}::ParseStackTreeNode_ const *rhs) const
{
    assert(lhs != NULL);
    assert(rhs != NULL);
    assert(lhs->m_spec.m_type == rhs->m_spec.m_type); // ParseStackTreeNodeSet should contain only nodes of the same type.
    // for HPS, their contents must be compared.
    if (lhs->m_spec.m_type == HPS)
    {
        assert(lhs->m_child_nodes.empty());
        assert(rhs->m_child_nodes.empty());
        // hps-es are equal if their m_realized_lookahead_cursor and m_hypothetical_lookahead_token_id_queue members are.
        if (lhs->m_realized_lookahead_cursor != rhs->m_realized_lookahead_cursor)
            return lhs->m_realized_lookahead_cursor < rhs->m_realized_lookahead_cursor;
        else if (lhs->m_branch_node_ptr != rhs->m_branch_node_ptr)
            return lhs->m_branch_node_ptr < rhs->m_branch_node_ptr;
        else
            return std::lexicographical_compare(
                lhs->m_hypothetical_lookahead_token_id_queue.begin(), lhs->m_hypothetical_lookahead_token_id_queue.end(),
                rhs->m_hypothetical_lookahead_token_id_queue.begin(), rhs->m_hypothetical_lookahead_token_id_queue.end(),
                CompareTokenId
            );
    }
    // For REDUCE, their contents must be compared.
    else if (lhs->m_spec.m_type == REDUCE)
    {
        // m_single_data contains the reduction rule index.
        Rule_ const &lhs_rule = ms_rule_table_[lhs->m_spec.m_single_data];
        Rule_ const &rhs_rule = ms_rule_table_[rhs->m_spec.m_single_data];
        // Sort first by rule precedence, then by rule index (lower has higher priority).
        if (ms_precedence_table_[lhs_rule.m_precedence_index].m_level != ms_precedence_table_[rhs_rule.m_precedence_index].m_level)
            return ms_precedence_table_[lhs_rule.m_precedence_index].m_level > ms_precedence_table_[rhs_rule.m_precedence_index].m_level;
        else // Sort based on rule index.
            return lhs->m_spec.m_single_data < rhs->m_spec.m_single_data;
    }
    // Otherwise just use pointer value.
    else
        return lhs < rhs;
}

<{class_name}::ParseStackTreeNode_::~ParseStackTreeNode_ ()
{
    // TODO: figure out if stack element tokens should be thrown away
    // TODO: figure out if local lookahead queue tokens should be thrown away
    // TODO: are they actually uninitialized (default value)?
    for (ChildMap::iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet &child_node_set = it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            assert(child != NULL);
            assert(child->m_parent_node == this);
            delete child;
        }
        child_node_set.clear(); // not strictly necessary, but is cleaner.
    }
}

bool <{class_name}::ParseStackTreeNode_::HasTrunkChild () const
{
    if (m_spec.m_type != ROOT || m_child_nodes.size() != 1)
        return false;
    ParseStackTreeNodeSet const &single_type_child_node_set = m_child_nodes.begin()->second;
    if (single_type_child_node_set.size() != 1)
        return false;
    ParseStackTreeNode_ *single_child = *single_type_child_node_set.begin();
    assert(single_child != NULL);
    assert(single_child->m_spec.m_type != ROOT);
    return single_child->m_spec.m_type != HPS;
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::ParseStackTreeNode_::PopTrunkChild ()
{
    assert(HasTrunkChild());
    ParseStackTreeNode_ *trunk_child = *m_child_nodes.begin()->second.begin();
    assert(trunk_child != NULL);
    assert(trunk_child->m_parent_node == this);
    // Reassign the children of the trunk child to this node (root).
    m_child_nodes = trunk_child->m_child_nodes;
    trunk_child->m_child_nodes.clear();
    // Set the reassigned child nodes' parent to be this node (root).
    for (ChildMap::iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseStackTreeNodeSet &child_node_set = child_map_it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            assert(child != NULL);
            child->m_parent_node = this;
        }
    }
    trunk_child->m_parent_node = NULL;
    return trunk_child;
}

bool <{class_name}::ParseStackTreeNode_::HasExactlyOneChild () const
{
    return m_child_nodes.size() == 1 && m_child_nodes.begin()->second.size() == 1;
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::ParseStackTreeNode_::BranchRoot ()
{
    ParseStackTreeNode_ *node = this;
    while (node->m_parent_node != NULL && node->m_parent_node->HasExactlyOneChild())
    {
        node = node->m_parent_node;
        assert(node->m_spec.m_type != HPS);
    }
    return node;
}

<{class_name}::Token::Id <{class_name}::ParseStackTreeNode_::LookaheadTokenId (<{class_name} &parser) const
{
    if (m_hypothetical_lookahead_token_id_queue.empty())
        return parser.Lookahead_(m_realized_lookahead_cursor).m_id;
    else
        return m_hypothetical_lookahead_token_id_queue.front();
}

bool <{class_name}::ParseStackTreeNode_::IsBlockedHPS () const
{
    assert(m_spec.m_type == HPS);
    if (m_parent_node == NULL)
        return false;
    switch (m_parent_node->m_spec.m_type)
    {
        case RETURN:
        //case REDUCE: // HIPPO
        case POP_STACK: return true;

        default:        return false;
    }
}

<{class_name}::ParseStackTreeNode_::PrecedenceLevelRange <{class_name}::ParseStackTreeNode_::ComputePrecedenceLevelRange (std::uint32_t current_child_depth) const
{
    if (m_spec.m_type == HPS)
    {
        // Need to look back at the rule of the (current_child_depth-1)th ancestor of this node in order
        // to get the correct rule precedence, because that's where the conflict occurred.

        assert(current_child_depth >= 2);
        // These asserts are equivalent to checking that the stack depth is at least 2.
        //assert(bool(m_branch_node_ptr)); // HIPPO this assumption is wrong
        assert(m_branch_node_ptr->HasNext());

        //assert(m_stack.size() >= current_child_depth); // HIPPO no good way to check this now
//         std::uint32_t state_index = m_stack.back().m_state_index;
        //std::uint32_t state_index = m_stack[m_stack.size()-(current_child_depth-1)].m_state_index;

        // Thinking of m_branch_node_ptr as the top of the state stack, we want to get the
        // (current_child_depth-1)th element from the top.
        BranchNodePtr_ child_branch_node_ptr = m_branch_node_ptr;
        for (std::uint32_t i = 0; i < current_child_depth-2; ++i)
        {
            // This assert checks that the stack depth is sufficient.
            assert(child_branch_node_ptr->HasNext());
            child_branch_node_ptr = child_branch_node_ptr->Next();
        }
        std::uint32_t state_index = child_branch_node_ptr->Data();

        assert(state_index < ms_state_count_);
        State_ const &state = ms_state_table_[state_index];
        assert(state.m_associated_rule_index < ms_rule_count_);
        Rule_ const &associated_rule = ms_rule_table_[state.m_associated_rule_index];
        assert(associated_rule.m_precedence_index < ms_precedence_count_);
        Precedence_ const &rule_precedence = ms_precedence_table_[associated_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == REDUCE)
    {
        std::uint32_t reduction_rule_index = m_spec.m_single_data;
        Rule_ const &reduction_rule = ms_rule_table_[reduction_rule_index];
        assert(reduction_rule.m_precedence_index < ms_precedence_count_);
        Precedence_ const &rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == SHIFT)
    {
        PrecedenceLevelRange retval(std::numeric_limits<std::int32_t>::max(), std::numeric_limits<std::int32_t>::min());
        assert(!m_child_nodes.empty());
        // The range is the smallest range encompassing the range of each child node.
        for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
        {
            ParseStackTreeNodeSet const &child_node_set = child_map_it->second;
            for (ParseStackTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
            {
                assert(*child_it != NULL);
                ParseStackTreeNode_ const &child = **child_it;
                PrecedenceLevelRange child_precedence_level_range(child.ComputePrecedenceLevelRange(current_child_depth+1));
                retval.first = std::min(retval.first, child_precedence_level_range.first);
                retval.second = std::max(retval.second, child_precedence_level_range.second);
            }
        }
        //std::cerr << "HIPPO: retval = " << retval.first << ", " << retval.second << '\n';
        assert(retval.first <= retval.second);
        return retval;
    }
    else
    {
        // TODO: Probably need to do something to determine if this can't happen or prevent it.
        assert(false);
        return PrecedenceLevelRange(0, 0);
    }
}

bool <{class_name}::ParseStackTreeNode_::HasShiftReduceConflict (ParseStackTreeNode_ *&shift, ParseStackTreeNode_ *&reduce)
{
    ChildMap::iterator shift_children_it = m_child_nodes.find(Spec(SHIFT));
    ChildMap::iterator reduce_children_it = m_child_nodes.find(Spec(REDUCE));
    if (shift_children_it == m_child_nodes.end() || reduce_children_it == m_child_nodes.end())
        return false;

    ParseStackTreeNodeSet &shift_children = shift_children_it->second;
    ParseStackTreeNodeSet &reduce_children = reduce_children_it->second;
    assert(shift_children.size() == 1);
    assert(reduce_children.size() == 1);

    shift = *shift_children.begin();
    reduce = *reduce_children.begin();
    return true;
}

void <{class_name}::ParseStackTreeNode_::AddChild (ParseStackTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == NULL);
    assert(child->m_spec.m_type != ROOT);

<|if(is_defined(generate_debug_spew_code))
    // child->m_branch_node_ptr and child->m_branch_node_token_id_ptr must both be set or both not be set.
    // assert(bool(child->m_branch_node_ptr) == bool(child->m_branch_node_token_id_ptr));
<|end_if
<|if(0)
    // If set, then parent must already be hooked up correctly.
    if (bool(child->m_branch_node_ptr))
    {
        // Note that Next() will return null if there is no next, and this is fine.
        assert(child->m_branch_node_ptr->Next() == m_branch_node_ptr);
<|if(is_defined(generate_debug_spew_code))
        //assert(child->m_branch_node_token_id_ptr->Next() == m_branch_node_token_id_ptr);
<|end_if
    }
<|end_if

    // // std::cerr << "ParseStackTreeNode_::AddChild; this = " << this << ", child = " << child << ", m_child_branch_node_ptr_set = " << m_child_branch_node_ptr_set << '\n';
    // std::cerr << "ParseStackTreeNode_::AddChild; this = " << this << ", child = " << child << ", m_child_branch_node_ptr_set = " << "(branch values omitted)" << '\n';
    // std::cerr << "this:\n";
    // this->PrintBasic(std::cerr, "HIPPO", 1);
    // std::cerr << "child:\n";
    // child->PrintBasic(std::cerr, "HIPPO", 1);

    m_child_nodes[child->m_spec].insert(child);
    child->m_parent_node = this;

    // If this node is SHIFT and the child is HPS, then add the child's NPDA state to this node's
    // m_child_branch_node_ptr_set.  This is the only situation in which
    // m_child_branch_node_ptr_set is added to.
    if (m_spec.m_type == SHIFT && child->m_spec.m_type == HPS)
    {
        //assert(bool(m_branch_node_ptr)); // HIPPO this assumption is wrong.  SHIFT action nodes should probably even have m_branch_node_ptr == nullptr
        assert(bool(child->m_branch_node_ptr));
        //assert(!child->m_stack.empty());
        //std::uint32_t child_npda_state_index = child->m_stack.back().m_state_index;
        // child_npda_state_index is not guaranteed to be unique in m_npda_state_set, because the
        // deeper elements of child->m_stack may be different from HPS to HPS.
        // NOTE: This code was already commented out, but the refactor to use SharedLinkedListElement
        // caused it to be deprecated -- it's less obvious how to check for the existence of a
        // branch node now.
        //assert(m_npda_state_set.find(child_npda_state_index) == m_npda_state_set.end() && "NPDA state should not already be in the set");
        assert(m_child_branch_node_ptr_set.find(child->m_branch_node_ptr) == m_child_branch_node_ptr_set.end() && "child branch node should not already be in the set");
        m_child_branch_node_ptr_set.insert(child->m_branch_node_ptr);
        // // Make sure that child->m_branch_node_ptr links back to this node's one
        // child->m_branch_node_ptr.Append(m_branch_node_ptr);
    }
//    std::cerr << '\n';
}

void <{class_name}::ParseStackTreeNode_::RemoveChild (ParseStackTreeNode_ *child)
{
    //std::cerr << "ParseStackTreeNode_::RemoveChild; this = " << this << ", child = " << child << '\n'; // HIPPO
    assert(child != NULL);
    assert(child->m_parent_node == this);
    assert(HasChildrenHavingSpec(child->m_spec));
    assert(m_child_nodes[child->m_spec].find(child) != m_child_nodes[child->m_spec].end());
    m_child_nodes[child->m_spec].erase(child);
    if (m_child_nodes[child->m_spec].empty())
    {
        //std::cerr << "    all child nodes of spec " << AsString(child->m_spec.m_type) << " are gone; removing that subset\n"; // HIPPO
        m_child_nodes.erase(child->m_spec);
    }
    child->m_parent_node = NULL;

    // QUESTION: Should this be removed?  The recovery set is used in error recovery, so maybe
    // it should be kept.  Keep it for now since it wasn't in the old code.
    //assert(m_child_branch_node_ptr_set.find(child->m_branch_node_ptr) != m_child_branch_node_ptr_set.end());
    //m_child_branch_node_ptr_set.erase(child->m_branch_node_ptr);

    // If there are no children and this isn't the root node, remove it from its parent.
    if (m_child_nodes.empty() && m_parent_node != NULL)
        RemoveFromParent();
}

void <{class_name}::ParseStackTreeNode_::RemoveFromParent ()
{
    assert(m_parent_node != NULL);
    //std::cerr << "ParseStackTreeNode_::RemoveFromParent; this = " << this << '\n'; // HIPPO
    m_parent_node->RemoveChild(this);
}

void <{class_name}::ParseStackTreeNode_::NullifyHPSNodeDescendantsInHPSQueue (HPSQueue_ &hps_queue) const
{
    if (m_spec.m_type == HPS)
    {
        // NOTE: This is a linear search, which is not as efficient as a different way of handling this.
        HPSQueue_::iterator it = std::find(hps_queue.begin(), hps_queue.end(), this);
        if (it != hps_queue.end())
            *it = NULL;
    }
    for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseStackTreeNodeSet const &child_node_set = child_map_it->second;
        for (ParseStackTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            assert(*child_it != NULL);
            ParseStackTreeNode_ const &child = **child_it;
            child.NullifyHPSNodeDescendantsInHPSQueue(hps_queue);
        }
    }
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::ParseStackTreeNode_::CloneLeafNode () const
{
    ParseStackTreeNode_ *retval = new ParseStackTreeNode_(m_spec);
    CloneLeafNodeInto(*retval);
    return retval;
}

void <{class_name}::ParseStackTreeNode_::CloneLeafNodeInto (<{class_name}::ParseStackTreeNode_ &orphan_target) const
{
    assert(orphan_target.m_parent_node == NULL);
    assert(m_child_nodes.empty());
    orphan_target.m_spec                                    = m_spec;
    orphan_target.m_child_branch_node_ptr_set               = m_child_branch_node_ptr_set;
    orphan_target.m_branch_node_ptr                         = m_branch_node_ptr;
    orphan_target.m_branch_node_token_id_ptr                = m_branch_node_token_id_ptr;
    orphan_target.m_hypothetical_lookahead_token_id_queue   = m_hypothetical_lookahead_token_id_queue;
    orphan_target.m_realized_lookahead_cursor               = m_realized_lookahead_cursor;
}

<|if(is_defined(generate_debug_spew_code))
void <{class_name}::ParseStackTreeNode_::PrintBasic (std::ostream &out, std::string const &prefix, std::uint32_t indent_level) const
{
    out << prefix;
    for (std::uint32_t i = 0; i < indent_level; ++i)
        out << "    ";
    out << AsString(m_spec.m_type) << ' ' << this;
    if (m_spec.m_type == HPS)
    {
        out << (IsBlockedHPS() ? " (    blocked, " : " (non-blocked, ");
        out << " m_realized_lookahead_cursor = " << m_realized_lookahead_cursor << ')';
    }
    switch (m_spec.m_type)
    {
        case REDUCE:    out << " rule " << m_spec.m_single_data << "; " << ms_rule_table_[m_spec.m_single_data].m_description;  break;
        case SHIFT:     out << ' ' << Token(m_spec.m_single_data); break;
        case POP_STACK: out << ' ' << m_spec.m_single_data << " time(s)";                                                       break;
        default:                                                                                                                break;
    }
    // out << ' ' << this << ", parent = " << m_parent_node << ' ' << ms_state_table_[m_branch_node_ptr->Data()].m_description << ' ';
    //assert(bool(m_branch_node_ptr)); // NOTE This isn't true for root node
    if (bool(m_branch_node_ptr))
        out << ' ' << ms_state_table_[m_branch_node_ptr->Data()].m_description << ' ';
    if (m_spec.m_type == HPS)
    {
        out << "    (";
        // This is sort of dumb, but this is an effective way to traverse a singly-linked list backwards.
        {
            std::vector<NpdaStateIndex_> npda_state_stack_reversed;
            m_branch_node_ptr->PopulateVector(npda_state_stack_reversed);
            for (std::vector<NpdaStateIndex_>::reverse_iterator it = npda_state_stack_reversed.rbegin(),
                                                                it_end = npda_state_stack_reversed.rend();
                 it != it_end;
                 ++it)
            {
                out << *it;
                std::vector<NpdaStateIndex_>::reverse_iterator next_it = it;
                ++next_it;
                if (next_it != it_end)
                    out << ' ';
            }
        }
        out << "); ";
        // This is sort of dumb, but this is an effective way to traverse a singly-linked list backwards.
        if (bool(m_branch_node_token_id_ptr)) // TEMP
        {
            std::vector<Token::Id> token_id_stack_reversed;
            m_branch_node_token_id_ptr->PopulateVector(token_id_stack_reversed);
            for (std::vector<Token::Id>::reverse_iterator it = token_id_stack_reversed.rbegin(),
                                                          it_end = token_id_stack_reversed.rend();
                 it != it_end;
                 ++it)
            {
                out << ms_token_name_table_[*it] << ' ';
            }
        }
        else // TEMP
        {
            out << "<<branch node tokens omitted>> ";
        }
        out << ". ";
        for (std::size_t i = 0; i < m_hypothetical_lookahead_token_id_queue.size(); ++i)
            out << ms_token_name_table_[m_hypothetical_lookahead_token_id_queue[i]] << ' ';
        out << "<realized-lookaheads-not-printed>";
    }
    out << '\n';

    // Print children recursively with higher indent level
    for (ChildMap::const_iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet const &child_node_set = it->second;
        for (ParseStackTreeNodeSet::const_iterator set_it = child_node_set.begin(), set_it_end = child_node_set.end(); set_it != set_it_end; ++set_it)
            (*set_it)->PrintBasic(out, prefix, indent_level+1);
    }
}

void <{class_name}::ParseStackTreeNode_::Print (std::ostream &out, <{class_name} const &parser, std::string const &prefix, std::uint32_t indent_level) const
{
    out << prefix;
    for (std::uint32_t i = 0; i < indent_level; ++i)
        out << "    ";
    out << AsString(m_spec.m_type) << ' ' << this;
    if (m_spec.m_type == HPS)
    {
        out << (IsBlockedHPS() ? " (    blocked, " : " (non-blocked, ");
        out << " m_realized_lookahead_cursor = " << m_realized_lookahead_cursor << ')';
    }
    switch (m_spec.m_type)
    {
        case REDUCE:    out << " rule " << m_spec.m_single_data << "; " << ms_rule_table_[m_spec.m_single_data].m_description;  break;
        //case SHIFT:     out << " to (?) state " << m_spec.m_single_data << "; " << ms_state_table_[m_spec.m_single_data].m_description; break;
        case SHIFT:     out << ' ' << Token(m_spec.m_single_data); break;
        case POP_STACK: out << ' ' << m_spec.m_single_data << " time(s)";                                                       break;
        default:                                                                                                                break;
    }
    // out << ' ' << this << ", parent = " << m_parent_node << ' ' << ms_state_table_[m_branch_node_ptr->Data()].m_description << ' ';
    //assert(bool(m_branch_node_ptr)); // NOTE: This isn't true for the root node
    if (bool(m_branch_node_ptr))
        out << ' ' << ms_state_table_[m_branch_node_ptr->Data()].m_description << ' ';
    if (m_spec.m_type == HPS)
    {
        out << "    (";
        // This is sort of dumb, but this is an effective way to traverse a singly-linked list backwards.
        {
            std::vector<NpdaStateIndex_> npda_state_stack_reversed;
            m_branch_node_ptr->PopulateVector(npda_state_stack_reversed);
            for (std::vector<NpdaStateIndex_>::reverse_iterator it = npda_state_stack_reversed.rbegin(),
                                                                it_end = npda_state_stack_reversed.rend();
                 it != it_end;
                 ++it)
            {
                out << *it;
                std::vector<NpdaStateIndex_>::reverse_iterator next_it = it;
                ++next_it;
                if (next_it != it_end)
                    out << ' ';
            }
        }
        out << "); ";
        // This is sort of dumb, but this is an effective way to traverse a singly-linked list backwards.
        if (bool(m_branch_node_token_id_ptr)) // TEMP
        {
            std::vector<Token::Id> token_id_stack_reversed;
            m_branch_node_token_id_ptr->PopulateVector(token_id_stack_reversed);
            for (std::vector<Token::Id>::reverse_iterator it = token_id_stack_reversed.rbegin(),
                                                          it_end = token_id_stack_reversed.rend();
                 it != it_end;
                 ++it)
            {
                out << ms_token_name_table_[*it] << ' ';
            }
        }
        else // TEMP
        {
            out << "<<branch node tokens omitted>> ";
        }
        out << ". ";
        for (std::size_t i = 0; i < m_hypothetical_lookahead_token_id_queue.size(); ++i)
            out << ms_token_name_table_[m_hypothetical_lookahead_token_id_queue[i]] << ' ';
        for (std::size_t i = m_realized_lookahead_cursor; i < parser.m_npda_->m_realized_state.LookaheadQueue().size(); ++i)
            out << ms_token_name_table_[parser.m_npda_->m_realized_state.LookaheadQueue()[i].m_id] << ' ';
    }
    out << '\n';

    // Print children recursively with higher indent level
    for (ChildMap::const_iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet const &child_node_set = it->second;
        for (ParseStackTreeNodeSet::const_iterator set_it = child_node_set.begin(), set_it_end = child_node_set.end(); set_it != set_it_end; ++set_it)
            (*set_it)->Print(out, parser, prefix, indent_level+1);
    }
}

<|end_if
// ////////////////////////////////////////////////////////////////////////////
// End of <{class_name}::ParseStackTreeNode_
// ////////////////////////////////////////////////////////////////////////////

<{class_name}::Token const &<{class_name}::Lookahead_ (TokenQueue_::size_type index)<{if(!is_defined(enable_scan_actions_exceptions))} throw()<{end_if}
{
    while (index >= m_npda_->m_realized_state.LookaheadQueue().size())
    {
        // This does not require updating the hps-es' m_realized_lookahead_cursor.
        m_npda_->m_realized_state.PushBackLookahead(Scan_(), m_npda_->m_hypothetical_state.m_hps_queue);
<|if(is_defined(generate_debug_spew_code))

        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "Pushed " << m_npda_->m_realized_state.LookaheadQueue().back() << " onto back of lookahead queue\n")
<|end_if
    }
    return m_npda_->m_realized_state.LookaheadQueue()[index];
}

<{class_name}::ParseStackTreeNode_ *<{class_name}::TakeHypotheticalActionOnHPS_ (ParseStackTreeNode_ const &hps, ParseStackTreeNode_::Type action_type, std::uint32_t action_data)
{
    // TODO: replace individual arguments action_type, action_data with ParseStackTreeNode_::Spec and just modify that struct below where it needs it.
    assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS && "Only a HPS type node can take an action");
    assert(hps.m_parent_node != NULL);

    // TODO: Once enough testing/verification is done, this comment and the commented-out early check code
    // should be removed.
    //
    // Because the parse tree will be recreated when the trunk action is POP_STACK, there's no need to
    // early out if the stack will be popped empty.

//     // Early check for if the stack would be popped empty, in which case, don't create the new hps.
//     if (action_type == ParseStackTreeNode_::POP_STACK && hps.m_stack.size() <= 1)
//     {
<|if(is_defined(generate_debug_spew_code))
<|if(0)
        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "early-out with no new HPS because POP_STACK would pop the stack all the way to empty... ")
<|end_if
<|end_if
//         return NULL;
//     }

    ParseStackTreeNode_ *new_hps = NULL;

    switch (action_type)
    {
        case ParseStackTreeNode_::ROOT: {
            assert(false && "ParseStackTreeNode_::ROOT is an invalid action type.");
            break;
        }
        case ParseStackTreeNode_::RETURN: {
            new_hps = hps.CloneLeafNode();
            break;
        }
        case ParseStackTreeNode_::REDUCE: {
            // Execute the appropriate rule on the top tokens in the stack
            std::uint32_t const &rule_index = action_data;
            Rule_ const &rule = ms_rule_table_[rule_index];

            // Avoid creating the new hps altogether if it won't be added due to a REDUCE/REDUCE conflict.
            ParseStackTreeNode_ *existing_reduce_action_node = NULL;
            ParseStackTreeNode_ *reduce_hps = NULL;
            ParseStackTreeNode_::Spec action_spec(action_type, action_data);
            if (hps.m_parent_node->HasChildrenHavingSpec(action_spec)) // Check for an existing REDUCE action
            {
                // This may or may not be a conflict.  Need to determine that.

                ParseStackTreeNode_::ParseStackTreeNodeSet &reduce_node_set = hps.m_parent_node->ChildrenHavingSpec(action_spec);
                assert(reduce_node_set.size() == 1);
                existing_reduce_action_node = *reduce_node_set.begin();
                assert(existing_reduce_action_node != NULL);
                assert(existing_reduce_action_node->m_spec.m_type == ParseStackTreeNode_::REDUCE);

                // If the hypothetical action is identical to the existing one, then there's no problem,
                // just add it as a child to the existing one.
                if (existing_reduce_action_node->m_spec.m_single_data == rule_index)
                {
                    new_hps = hps.CloneLeafNode();
                    reduce_hps = new_hps;
                }
                // Otherwise this is a REDUCE/REDUCE conflict
                else
                {
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << <{debug_spew_prefix} << "TakeHypotheticalActionOnHPS_ - REDUCE/REDUCE conflict encountered ... ")

<|end_if
                    // If the new REDUCE action beats the existing one in a conflict, just replace the existing one
                    // (replacement instead of creating a new one and deleting the old is an optimization which also
                    // avoids an annoying traversal through m_npda_->m_hypothetical_state.m_hps_queue).
                    // NOTE: This depends on the fact that a REDUCE node has exactly one HPS child,
                    // which is what these three asserts check.  TODO: maybe make abstractions for these sorts of checks.
                    assert(existing_reduce_action_node->m_child_nodes.size() == 1);
                    assert(existing_reduce_action_node->m_child_nodes.begin()->second.size() == 1);
                    assert((*existing_reduce_action_node->m_child_nodes.begin()->second.begin())->m_spec.m_type == ParseStackTreeNode_::HPS);
                    if (CompareRuleByPrecedence(action_data, existing_reduce_action_node->m_spec.m_single_data))
                    {
<|if(is_defined(generate_debug_spew_code))
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "resolving in favor of new hps.\n")

<|end_if
                        reduce_hps = *existing_reduce_action_node->m_child_nodes.begin()->second.begin();
                        assert(reduce_hps != NULL);

                        // Remove the nodes from the ParseStackTreeNode_ tree.
                        assert(existing_reduce_action_node != NULL);
                        existing_reduce_action_node->RemoveFromParent();
                        reduce_hps->RemoveFromParent();
                        // Modify the nodes.
                        existing_reduce_action_node->m_spec = action_spec; // Replace with the winning reduction rule Spec.
                        hps.CloneLeafNodeInto(*reduce_hps); // NOTE: This modifies the existing hps, so no update of m_npda_->m_hypothetical_state.m_hps_queue is necessary.
                        // Re-add them to the ParseStackTreeNode_ tree.
                        existing_reduce_action_node->AddChild(reduce_hps);
                        hps.m_parent_node->AddChild(existing_reduce_action_node);
                    }
                    else
                    {
<|if(is_defined(generate_debug_spew_code))
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "resolving in favor of existing hps.\n")
<|else
                        // Resolving in favor of existing HPS.
<|end_if
                    }
                }
            }
            else
            {
                new_hps = hps.CloneLeafNode();
                reduce_hps = new_hps;
            }

            if (reduce_hps != NULL)
            {
                // Pop those stack tokens.
                for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
                {
                    assert(reduce_hps->m_branch_node_ptr->HasNext());
                    reduce_hps->m_branch_node_ptr = reduce_hps->m_branch_node_ptr->Next();
<|if(is_defined(generate_debug_spew_code))
                    if (bool(reduce_hps->m_branch_node_token_id_ptr)) // TEMP Condition
                        reduce_hps->m_branch_node_token_id_ptr = reduce_hps->m_branch_node_token_id_ptr->Next();
<|end_if
                }
                // Push the reduced nonterminal token data onto the front of the lookahead queue
                reduce_hps->m_hypothetical_lookahead_token_id_queue.push_front(rule.m_reduction_nonterminal_token_id);
            }

            break;
        }
        case ParseStackTreeNode_::SHIFT: {
            // Move the front of the lookahead queue to the top of the stack, assigning the appropriate state index.
            std::uint32_t const &state_index = action_data;
            // TODO: probably make "Shift" method for ParseStackTreeNode_ to do all this bookkeeping and parallel LookaheadTokenId tracking.
            new_hps = hps.CloneLeafNode();
            Token::Id lookahead_token_id = new_hps->LookaheadTokenId(*this);
            // Create a new BranchNodePtr_ and link it to the parent node's.
            new_hps->m_branch_node_ptr = BranchNode_::Create(state_index);
            new_hps->m_branch_node_ptr->Append(hps.m_branch_node_ptr);
<|if(is_defined(generate_debug_spew_code))
            // Create a new BranchNodeTokenIdPtr and link it to the parent node's
            new_hps->m_branch_node_token_id_ptr = BranchNodeTokenId_::Create(lookahead_token_id);
            new_hps->m_branch_node_token_id_ptr->Append(hps.m_branch_node_token_id_ptr);
<|end_if
            // TEMP HIPPO action_data = ParseStackTreeNode_::UNUSED_DATA; // SHIFT action doesn't store the state, the HPS children do.
            // Store the lookahead token id in action_data so it can printed.
            action_data = std::uint32_t(lookahead_token_id);
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
            new_hps = hps.CloneLeafNode();
            new_hps->m_hypothetical_lookahead_token_id_queue.push_front(Terminal::ERROR_);
            break;
        }
        case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
            new_hps = hps.CloneLeafNode();
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::POP_STACK: {
            // TODO: make separate action nodes for each pop, instead of using action data,
            // since for example two branches may agree on popping at least once, even if
            // one of them is killed later.
            std::uint32_t const &pop_count = action_data;
            // Check if there are actually enough stack elements to pop successfully.
            // If not, then don't create an HPS, and break early.
            if (pop_count >= hps.m_branch_node_ptr->ReachableElementCount())
            {
                new_hps = NULL;
                break;
            }

            new_hps = hps.CloneLeafNode();
            for (std::uint32_t i = 0; i < pop_count; ++i)
            {
                assert(new_hps->m_branch_node_ptr->HasNext());
<|if(is_defined(generate_debug_spew_code))
                //assert(new_hps->m_branch_node_token_id_ptr->HasNext());
<|end_if
                new_hps->m_branch_node_ptr = new_hps->m_branch_node_ptr->Next();
<|if(is_defined(generate_debug_spew_code))
                //new_hps->m_branch_node_token_id_ptr = new_hps->m_branch_node_token_id_ptr->Next();
                if (bool(new_hps->m_branch_node_token_id_ptr)) // TEMP
                    new_hps->m_branch_node_token_id_ptr = new_hps->m_branch_node_token_id_ptr->Next();
<|end_if
            }
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "creating HPS to be child of POP_STACK node... ")
<|end_if
            break;
        }
        case ParseStackTreeNode_::HPS: {
            assert(false && "ParseStackTreeNode_::HPS is an invalid action type.");
            break;
        }
        default: {
            assert(false && "invalid ParseStackTreeNode_::Type");
            break;
        }
    }

    if (new_hps != NULL)
    {
        assert(new_hps->m_parent_node == NULL);

        ParseStackTreeNode_ *action_node = NULL;

        // Ensure the action node exists, creating it if necessary.
        ParseStackTreeNode_::Spec action_spec(action_type, action_data);
        if (hps.m_parent_node->HasChildrenHavingSpec(action_spec))
        {
            ParseStackTreeNode_::ParseStackTreeNodeSet &children_of_action_type = hps.m_parent_node->ChildrenHavingSpec(action_spec);
            assert(children_of_action_type.size() == 1);
            action_node = *children_of_action_type.begin();
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "using existing action node of type " << ParseStackTreeNode_::AsString(action_spec.m_type) << "... ")

<|end_if
            // If the new hps already exists (can only happen as a child of POP_STACK), then don't add it.
            if (action_type == ParseStackTreeNode_::POP_STACK && action_node->HasChildrenHavingSpec(new_hps->m_spec))
            {
                ParseStackTreeNode_::ParseStackTreeNodeSet const &child_hps_set = action_node->ChildrenHavingSpec(new_hps->m_spec);
                if (child_hps_set.find(new_hps) != child_hps_set.end())
                {
<|if(is_defined(generate_debug_spew_code))
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "not adding duplicate HPS as child of POP_STACK node... ")
<|end_if
                    delete new_hps;
                    new_hps = NULL;
                }
            }
        }
        else
        {
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "creating new action node of type " << ParseStackTreeNode_::AsString(action_spec.m_type) << "... ")
<|end_if
            action_node = new ParseStackTreeNode_(action_spec);
<|if(is_defined(generate_debug_spew_code))
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "(action_node = " << action_node << ") ")
<|end_if
            hps.m_parent_node->AddChild(action_node);
        }

        if (new_hps != NULL)
            action_node->AddChild(new_hps);
    }

    return new_hps;
}

// ////////////////////////////////////////////////////////////////////////////
// <{class_name}::Npda_
// ////////////////////////////////////////////////////////////////////////////

<{class_name}::Npda_::Npda_ (Nonterminal::Name nonterminal_to_parse)
    :   m_realized_state(NonterminalStartStateIndex_(nonterminal_to_parse))
    ,   m_hypothetical_state(NonterminalStartStateIndex_(nonterminal_to_parse))
{ }

<{class_name}::Npda_::~Npda_ ()
{
    // TODO: almost certainly need to throw away tokens from realized stack and lookahead queue
}

bool <{class_name}::CompareRuleByPrecedence (std::uint32_t lhs_rule_index, std::uint32_t rhs_rule_index)
{
    if (ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level != ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level)
        return ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level > ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level;
    else
        return lhs_rule_index < rhs_rule_index;
}

<{class_name}::NpdaStateIndexVector_ const &<{class_name}::EpsilonClosureOfState_ (std::uint32_t state_index)
{
    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<std::uint32_t,NpdaStateIndexVector_> LookupTable;
    static LookupTable s_lookup_table;

    LookupTable::iterator find_it = s_lookup_table.find(state_index);
    if (find_it != s_lookup_table.end())
        return find_it->second;

    // Compute the epsilon closure as a set
    NpdaStateIndexSet_ epsilon_closure_set;
    ComputeEpsilonClosureOfState_(state_index, epsilon_closure_set);

    // Copy the states in the set into the memoized vector.
//    std::cerr << "EpsilonClosureOfState_(" << state_index << "):"; // HIPPO
    NpdaStateIndexVector_ &epsilon_closure = s_lookup_table[state_index];
    epsilon_closure.reserve(epsilon_closure_set.size());
    for (NpdaStateIndexSet_::const_iterator it = epsilon_closure_set.begin(), it_end = epsilon_closure_set.end(); it != it_end; ++it)
    {
//        std::cerr << ' ' << *it; // HIPPO
        epsilon_closure.push_back(*it);
    }
//    std::cerr << ";\n"; // HIPPO
    // Return the memoized value.
    return epsilon_closure;
}

void <{class_name}::ComputeEpsilonClosureOfState_ (std::uint32_t state_index, NpdaStateIndexSet_ &epsilon_closure)
{
    // NOTE: The working definition of epsilon closure in this implementation used to only include
    // states that had non-epsilon transitions, but has been changed to include all epsilon-reachable
    // states, including those having no non-epsilon transitions.

    // This implementation allows epsilon cycles.

    // If this state has already been visited, there's no reason to continue.
    if (epsilon_closure.find(state_index) != epsilon_closure.end())
        return;
    // Otherwise, mark it as visited.  This also prevents infinite recursion.
    else
        epsilon_closure.insert(state_index);

    // This set collects the epsilon closure with no duplicates
    State_ const &state = ms_state_table_[state_index];
    for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count;
         transition != transition_end;
         ++transition)
    {
        if (transition->m_type == Transition_::EPSILON)
            ComputeEpsilonClosureOfState_(transition->m_data_index, epsilon_closure);
    }
}

<{class_name}::NpdaStateIndexVector_ const &<{class_name}::EpsilonClosureOfStateSet_ (NpdaStateIndexSet_ const &state_set)
{
    // This function implementation depends on there not being an epsilon transition cycle.

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<NpdaStateIndexSet_,NpdaStateIndexVector_> LookupTable;
    static LookupTable s_lookup_table;
    {
        LookupTable::iterator find_it = s_lookup_table.find(state_set);
        if (find_it != s_lookup_table.end())
            return find_it->second;
    }

    // This set collects the epsilon closure with no duplicates
    NpdaStateIndexSet_ epsilon_closure_set;

    for (NpdaStateIndexSet_::const_iterator it = state_set.begin(), it_end = state_set.end(); it != it_end; ++it)
    {
        std::uint32_t state_index = *it;
        State_ const &state = ms_state_table_[state_index];
        bool state_has_non_epsilon_transitions = false;
        for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count;
            transition != transition_end;
            ++transition)
        {
            if (transition->m_type == Transition_::EPSILON)
            {
                NpdaStateIndexVector_ const &sub_epsilon_closure = EpsilonClosureOfState_(transition->m_data_index);
                for (NpdaStateIndexVector_::const_iterator it = sub_epsilon_closure.begin(), it_end = sub_epsilon_closure.end(); it != it_end; ++it)
                    epsilon_closure_set.insert(*it);
            }
            else
                state_has_non_epsilon_transitions = true;
        }
        // The epsilon closure of a state includes itself if it has non-epsilon transitions
        if (state_has_non_epsilon_transitions)
            epsilon_closure_set.insert(state_index);
    }

    // Add all the elements of epsilon_closure_set to the memoized entry.
    NpdaStateIndexVector_ &epsilon_closure = s_lookup_table[state_set];
    epsilon_closure.reserve(epsilon_closure_set.size());
    for (NpdaStateIndexSet_::const_iterator it = epsilon_closure_set.begin(), it_end = epsilon_closure_set.end(); it != it_end; ++it)
        epsilon_closure.push_back(*it);
    return epsilon_closure;
}

<{class_name}::TransitionVector_ const &<{class_name}::NonEpsilonTransitionsOfState_ (std::uint32_t state_index, std::uint32_t sorted_type_index)
{
    assert(0 <= sorted_type_index && sorted_type_index <= 3);

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::pair<std::uint32_t,std::uint32_t> KeyType;
    typedef std::map<KeyType,TransitionVector_> LookupTable;
    static LookupTable s_lookup_table;

    KeyType key(state_index, sorted_type_index);
    LookupTable::iterator it = s_lookup_table.find(key);
    if (it != s_lookup_table.end())
        return it->second;

    // TODO: probably don't need to memoize epsilon closures because non-epsilon transitions is memoized.
    TransitionSet_ non_epsilon_transition_set;
    NpdaStateIndexVector_ const &epsilon_closure = EpsilonClosureOfState_(state_index);
    for (NpdaStateIndexVector_::const_iterator it = epsilon_closure.begin(), it_end = epsilon_closure.end(); it != it_end; ++it)
    {
        State_ const &state = ms_state_table_[*it];
        for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count; transition != transition_end; ++transition)
        {
            std::uint32_t transition_sorted_type_index = Transition_::Order::SortedTypeIndex(Transition_::Type(transition->m_type));
            if (transition->m_type != Transition_::EPSILON && transition_sorted_type_index == sorted_type_index)
                non_epsilon_transition_set.insert(*transition);
        }
    }

    TransitionVector_ &non_epsilon_transitions = s_lookup_table[key];
    non_epsilon_transitions.reserve(non_epsilon_transition_set.size());
    for (TransitionSet_::const_iterator it = non_epsilon_transition_set.begin(), it_end = non_epsilon_transition_set.end(); it != it_end; ++it)
        non_epsilon_transitions.push_back(*it);
    return non_epsilon_transitions;
}

<{class_name}::Precedence_ const <{class_name}::ms_precedence_table_[] =
{
<|loop(i, _precedence_count)
    { <{_precedence_level[i]}, <{_precedence_associativity_index[i]}<{if(is_defined(generate_debug_spew_code))}, "<{_precedence_name[i]}"<{end_if} }<{if(i < _precedence_count-1)},<{end_if}
<|end_loop
};

std::size_t const <{class_name}::ms_precedence_count_ = sizeof(<{class_name}::ms_precedence_table_) / sizeof(*<{class_name}::ms_precedence_table_);

<{class_name}::Rule_ const <{class_name}::ms_rule_table_[] =
{
<|loop(i, _rule_count)
    { <{class_name}::Nonterminal::<{_rule_reduction_nonterminal_name[i]}, <{_rule_token_count[i]}, <{_rule_precedence_index[i]}<{if(is_defined(generate_debug_spew_code))}, <{_rule_description[i]}<{end_if} }<{if(i < _rule_count-1)},<{end_if}
<|end_loop
};
std::size_t const <{class_name}::ms_rule_count_ = sizeof(<{class_name}::ms_rule_table_) / sizeof(*<{class_name}::ms_rule_table_);

<{class_name}::State_ const <{class_name}::ms_state_table_[] =
{
<|loop(i, _npda_state_count)
    { <{_npda_state_transition_count[i]}, ms_transition_table_+<{_npda_state_transition_offset[i]}, <{_npda_state_rule_index[i]}<{if(is_defined(generate_debug_spew_code))}, <{_npda_state_description[i]}<{end_if} }<{if(i < _npda_state_count-1)},<{end_if}
<|end_loop
};
std::size_t const <{class_name}::ms_state_count_ = sizeof(<{class_name}::ms_state_table_) / sizeof(*<{class_name}::ms_state_table_);

<{class_name}::Transition_ const <{class_name}::ms_transition_table_[] =
{
<|loop(i, _npda_transition_count)
    { <{class_name}::Transition_::<{_npda_transition_type_name[i]}, <{_npda_transition_token_index[i]}, std::uint32_t(<{_npda_transition_data_index[i]}) }<{if(i < _npda_transition_count-1)},<{end_if}
<|end_loop
};
std::size_t const <{class_name}::ms_transition_count_ = sizeof(<{class_name}::ms_transition_table_) / sizeof(*<{class_name}::ms_transition_table_);
