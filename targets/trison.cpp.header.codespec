<|if(header_filename == implementation_filename)
<|error("collision between header_filename \"" . header_filename . "\" and implementation_filename \"" . implementation_filename . "\"")
<|end_if
<|if(is_defined(parse_method_access))
<|if(parse_method_access != "public:" && parse_method_access != "protected:" && parse_method_access != "private:")
<|error("invalid parse_method_access \"" . parse_method_access . "\"")
<|end_if
<|else
<{define(parse_method_access)}public:<|end_define
<|end_if
<|if(!is_defined(debug_spew_prefix))
<{define(debug_spew_prefix)}"<{class_name}:"<|end_define
<|end_if
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// <{header_filename} generated by trison<{if(!is_defined(dont_generate_timestamps))} at <{_creation_timestamp}<{end_if}
// from <{_source_filename} using <{_targetspec_filename} and <{_codespec_filename}
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include <cassert>
#include <deque>
<|if(is_defined(generate_debug_spew_code))
#include <iostream>
<|end_if

<|include("barf.cpp.include.codespec")

<|top_of_header_file?

/** A parser class generated by trison<{if(!is_defined(dont_generate_timestamps))} at <{_creation_timestamp}<{end_if}
  * from <{_source_filename} using <{_targetspec_filename} and <{_codespec_filename}.
  *
  * The term "primary source" will be used to refer to the .trison source file from which
  * this file was generated.  Specifically, the primary source is <{_source_filename}.
  *
  * The term "client" will be used to refer to the programmer who is writing the trison
  * primary source file to generate a parser (e.g. "the client shouldn't return X from Y"
  * or "the client must provide a way to X and Y").
  *
  * @brief A parser class.
  */
class <{class_name}<{if(is_defined(class_inheritance))} : <{class_inheritance}<{end_if}
{
public:

    /// Return values for Parse().
    enum ParserReturnCode
    {
        /// Indicates the Parse() method returned successfully.
        PRC_SUCCESS = 0,
        /// Indicates an unhandled parse error occurred (i.e. no %error-accepting
        /// rules were encountered).
        PRC_UNHANDLED_PARSE_ERROR = 1
    }; // end of enum <{class_name}::ParserReturnCode

    /// "Namespace" for <{class_name}::Terminal::Name, which enumerates all valid
    /// token ids which this parser will accept as lookaheads.
    struct Terminal
    {
        /** There are two special terminals: END_ and ERROR_.
          *
          * <{class_name}::Terminal::END_ should be returned in %target.cpp.scan_actions
          * by the client when the input source has reached the end of input.  The parser
          * will not request any more input after <{class_name}::Terminal::END_ is received.
          *
          * <{class_name}::Terminal::ERROR_ should not ever be used by the client, as
          * it is used internally by the parser.
          *
          * The rest are the terminals as declared in the primary source, and should
          * be used by the client when returning from %target.cpp.scan_actions.
          *
          * @brief Acceptable values returnable to the parser in %target.cpp.scan_actions.
          */
        enum Name
        {
<|if(sizeof(_terminal_name_list) < 1)
<|error("the terminal list should always have at least one element")
<|end_if
<|if(sizeof(_terminal_name_list) != sizeof(_terminal_index_list))
<|error("mismatch in size of _terminal_name_list and _terminal_index_list")
<|end_if
<|loop(i, sizeof(_terminal_name_list))
            <{_terminal_name_list[i]} = <{_terminal_index_list[i]}<{if(i+1 < sizeof(_terminal_name_list))},<{end_if}
<|end_loop
        }; // end of enum <{class_name}::Terminal::Name
    }; // end of struct <{class_name}::Terminal

    /// "Namespace" for <{class_name}::ParseNonterminal::Name, which enumerates
    /// all valid nonterminals this parser can recognize.
    struct ParseNonterminal
    {
        /** The Parse() method doesn't necessarily have to start with the
          * value of the %default_parse_nonterminal directive; it can
          * attempt to parse any of the nonterminals defined in the primary
          * source file.  These enums are the way to specify which nonterminal
          * to parse.
          *
          * @brief Acceptable nonterminals recognizable by this parser.
          */
        enum Name
        {
<|for_each(key, _dpda_nonterminal_start_state_index)
            <{key} = <{_dpda_nonterminal_start_state_index[key]},
<|end_for_each
            /// Nonterminal which will be attempted to be parsed by the Parse()
            /// method by default (specified by the %default_parse_nonterminal
            /// directive).
            default_ = <{_default_parse_nonterminal}
        }; // end of enum <{class_name}::ParseNonterminal::Name
    }; // end of struct <{class_name}::ParseNonterminal

    /** The client should package-up and return a <{class_name}::Token from
      * the code specified by %target.cpp.scan_actions, which delivers the
      * token type and token data to the parser for input.  The constructor
      * takes one or two parameters; the second can be omitted, indicating
      * that the %target.cpp.token_data_default value will be used.
      *
      * @brief Return type for %target.cpp.scan_actions.
      */
    struct Token
    {
        typedef BarfCpp_::Uint32 Id; // TODO -- smallest int
        typedef <{token_data_type} Data;

        Id m_id;
        Data m_data;

        /** @param id Gives the token id, e.g. Terminal::END_ or whatever
          *        other terminals were declared in the primary source.
          * @param data Gives the data associated with this token, e.g. if
          *        you were constructing an AST, data would point to an AST
          *        node constructed during scanning.
          *
          * @brief Constructor for Token struct.
          */
        Token (Id id, Data const &data = <{token_data_default})
            :
            m_id(id),
            m_data(data)
        {
            assert(m_id != Nonterminal_::none_ &&
                   m_id != Terminal::ERROR_ &&
                   "do not construct a token with this id");
        }
    }; // end of struct <{class_name}::Token

<|if(is_defined(top_of_class))
<|top_of_class

<|end_if
public:

    /// Constructor.  The client can specify parameters in the primary source
    /// via the %target.cpp.constructor_parameters directive.
    <{class_name} (<{constructor_parameters?});
<|if(is_defined(force_virtual_destructor))
    /// Destructor.  The client can cause the destructor to not be declared
    /// virtual by removing the %target.cpp.force_virtual_destructor directive
    /// from the primary source.
<|else
    /// Destructor.  The client can force the destructor to be declared virtual
    /// by specifying the %target.cpp.force_virtual_destructor directive in the
    /// primary source.
<|end_if
    <{if(is_defined(force_virtual_destructor))}virtual <{end_if}~<{class_name} ();

<|if(is_defined(generate_debug_spew_code))
    /// Returns true if and only if "debug spew" is enabled (which prints, to
    /// std::cerr, exactly what the parser is doing at each step).  This method,
    /// along with all other debug spew code can be removed by removing the
    /// %target.cpp.generate_debug_spew_code directive from the primary source.
    bool DebugSpew () const { return m_debug_spew_; }
    /// Sets the debug spew flag (see DebugSpew()).  This method,
    /// along with all other debug spew code can be removed by removing the
    /// %target.cpp.generate_debug_spew_code directive from the primary source.
    void DebugSpew (bool debug_spew) { m_debug_spew_ = debug_spew; }

<|end_if
    /** This parser is capable of attempting multiple contiguous parses from the
      * same input source.  The lookahead queue is preserved between calls to
      * Parse().  Therefore, if the input source changes, the lookahead queue
      * must be cleared so that the new input source can be read.  The client
      * must call this method if the input source changes.
      *
      * @brief This method must be called if the input source changes.
      */
    void ResetForNewInput ();

<|if(parse_method_access == "public:")
    /** The %target.cpp.parse_method_access directive can be used to specify the
      * access level of this method.
      *
      * The %target.cpp.start_of_parse_method_actions and
      * %target.cpp.end_of_parse_method_actions directives can be used to specify
      * code to execute at the beginning and end, respectively, of the Parse() method.
      * This includes the ability to enclose the body of the Parse() method within a
      * try {} block, for exception handling (if exceptions are thrown in reduction
      * rule code, then the %target.cpp.enable_parse_method_exception_handling directive
      * must be specified; this will cause the parser to catch and rethrow any exceptions
      * thrown in reduction rule code, allowing it to clean up dynamically allocated
      * memory, etc.
      *
      * @param return_token A pointer to the value which will be assigned to upon
      *        successfully parsing the requested nonterminal. If the parse fails,
      *        the value of the %target.cpp.token_data_default directive will
      *        be assigned.
      * @param nonterminal_to_parse The Parse() method can attempt to parse any
      *        nonterminal declared in the primary source.  If unspecified, the
      *        Parse() method will attempt to parse the nonterminal specified by the
      *        %default_parse_nonterminal directive.
      * @return <{class_name}::PRC_SUCCESS if the parse was successful (which includes
      *         occurrences of parse errors which were handled by client-specified
      *         %error-accepting rules), or <{class_name}::PRC_UNHANDLED_PARSE_ERROR
      *         if a parse error was not handled by any %error-accepting rules.
      *
      * @brief This is the main method of the parser; it will attempt to parse
      *        the nonterminal specified.
      */
    ParserReturnCode Parse (<{token_data_type} *return_token, ParseNonterminal::Name nonterminal_to_parse = ParseNonterminal::<{_default_parse_nonterminal});

<|end_if
<|if(is_defined(bottom_of_class))
<{bottom_of_class}

<|end_if
<|if(parse_method_access == "protected:")
protected:

    /** The %target.cpp.parse_method_access directive can be used to specify the
      * access level of this method.
      *
      * The %target.cpp.start_of_parse_method_actions and
      * %target.cpp.end_of_parse_method_actions directives can be used to specify
      * code to execute at the beginning and end, respectively, of the Parse() method.
      * This includes the ability to enclose the body of the Parse() method within a
      * try {} block, for exception handling (if exceptions are thrown in reduction
      * rule code, then the %target.cpp.enable_parse_method_exception_handling directive
      * must be specified; this will cause the parser to catch and rethrow any exceptions
      * thrown in reduction rule code, allowing it to clean up dynamically allocated
      * memory, etc.
      *
      * @param return_token A pointer to the value which will be assigned to upon
      *        successfully parsing the requested nonterminal. If the parse fails,
      *        the value of the %target.cpp.token_data_default directive will
      *        be assigned.
      * @param nonterminal_to_parse The Parse() method can attempt to parse any
      *        nonterminal declared in the primary source.  If unspecified, the
      *        Parse() method will attempt to parse the nonterminal specified by the
      *        %default_parse_nonterminal directive.
      * @return <{class_name}::PRC_SUCCESS if the parse was successful (which includes
      *         occurrences of parse errors which were handled by client-specified
      *         %error-accepting rules), or <{class_name}::PRC_UNHANDLED_PARSE_ERROR
      *         if a parse error was not handled by any %error-accepting rules.
      *
      * @brief This is the main method of the parser; it will attempt to parse
      *        the nonterminal specified.
      */
    ParserReturnCode Parse (<{token_data_type} *return_token, ParseNonterminal::Name nonterminal_to_parse = ParseNonterminal::<{_default_parse_nonterminal});

<|end_if
private:

<|if(parse_method_access == "private:")
    /** The %target.cpp.parse_method_access directive can be used to specify the
      * access level of this method.
      *
      * The %target.cpp.start_of_parse_method_actions and
      * %target.cpp.end_of_parse_method_actions directives can be used to specify
      * code to execute at the beginning and end, respectively, of the Parse() method.
      * This includes the ability to enclose the body of the Parse() method within a
      * try {} block, for exception handling (if exceptions are thrown in reduction
      * rule code, then the %target.cpp.enable_parse_method_exception_handling directive
      * must be specified; this will cause the parser to catch and rethrow any exceptions
      * thrown in reduction rule code, allowing it to clean up dynamically allocated
      * memory, etc.
      *
      * @param return_token A pointer to the value which will be assigned to upon
      *        successfully parsing the requested nonterminal. If the parse fails,
      *        the value of the %target.cpp.token_data_default directive will
      *        be assigned.
      * @param nonterminal_to_parse The Parse() method can attempt to parse any
      *        nonterminal declared in the primary source.  If unspecified, the
      *        Parse() method will attempt to parse the nonterminal specified by the
      *        %default_parse_nonterminal directive.
      * @return <{class_name}::PRC_SUCCESS if the parse was successful (which includes
      *         occurrences of parse errors which were handled by client-specified
      *         %error-accepting rules), or <{class_name}::PRC_UNHANDLED_PARSE_ERROR
      *         if a parse error was not handled by any %error-accepting rules.
      *
      * @brief This is the main method of the parser; it will attempt to parse
      *        the nonterminal specified.
      */
    ParserReturnCode Parse (<{token_data_type} *return_token, ParseNonterminal::Name nonterminal_to_parse = ParseNonterminal::<{_default_parse_nonterminal});

<|end_if
    // ///////////////////////////////////////////////////////////////////////
    // begin internal trison-generated parser guts -- don't use
    // ///////////////////////////////////////////////////////////////////////

    struct Nonterminal_
    {
        enum Name
        {
<|if(sizeof(_nonterminal_name_list) < 1)
<|error("the nonterminal list should always have at least one element")
<|end_if
<|if(sizeof(_nonterminal_name_list) != sizeof(_nonterminal_index_list))
<|error("mismatch in size of _nonterminal_name_list and _nonterminal_index_list")
<|end_if
<|loop(i, sizeof(_nonterminal_name_list))
            <{_nonterminal_name_list[i]} = <{_nonterminal_index_list[i]}<{if(i+1 < sizeof(_nonterminal_name_list))},<{end_if}
<|end_loop
        }; // end of enum <{class_name}::Nonterminal_::Name
    }; // end of struct <{class_name}::Nonterminal_
    struct Transition_;

    struct StackElement_
    {
        BarfCpp_::Uint32 m_state_index;
        Token::Data m_token_data;

        StackElement_ ()
            :
            m_state_index(BarfCpp_::Uint32(-1)),
            m_token_data(<{token_data_default})
        { }
        StackElement_ (BarfCpp_::Uint32 state_index, Token::Data token_data)
            :
            m_state_index(state_index),
            m_token_data(token_data)
        { }
    }; // end of struct <{class_name}::StackElement_

    typedef std::deque<StackElement_> Stack_;
    typedef std::deque<Token> LookaheadQueue_;

    ParserReturnCode Parse_ (<{token_data_type} *return_token, ParseNonterminal::Name nonterminal_to_parse);
    void ThrowAwayToken_ (Token::Data &token_data) throw();
    void ResetForNewInput_ () throw();
    Token Scan_ () throw();
    void ClearStack_ () throw();
    void ClearLookaheadQueue_ () throw();
    Token const &Lookahead_ (LookaheadQueue_::size_type index) throw();
    bool ExerciseTransition_ (Transition_ const &transition);
    Token::Data ExecuteReductionRule_ (BarfCpp_::Uint32 const rule_index_);
<|if(is_defined(generate_debug_spew_code))
    // debug spew methods
    void PrintParserStatus_ (std::ostream &stream) const;
    void PrintIndented_ (std::ostream &stream, char const *string) const;
<|end_if

    struct Rule_
    {
        Token::Id m_reduction_nonterminal_token_id;
        BarfCpp_::Uint32 m_token_count;
<|if(is_defined(generate_debug_spew_code))
        char const *m_description;
<|end_if
    }; // end of struct <{class_name}::Rule_

    struct State_
    {
        BarfCpp_::Size const m_transition_count; // TODO: smallest int
        Transition_ const *m_transition_table;
<|if(is_defined(generate_debug_spew_code))
        char const *m_description;
<|end_if
    }; // end of struct <{class_name}::State_

    struct Transition_
    {
        enum Type { ERROR_PANIC = 0, RETURN, REDUCE, SHIFT };
        BarfCpp_::Uint8 m_type;
        BarfCpp_::Uint32 m_data; // TODO: smallest int
        BarfCpp_::Uint32 m_lookahead_count; // TODO smallest int
        Token::Id const *m_lookahead_sequence;
    }; // end of struct <{class_name}::Transition_

    Stack_ m_stack_;
    LookaheadQueue_ m_lookahead_queue_;
    bool m_is_in_error_panic_;
<|if(is_defined(generate_debug_spew_code))
    bool m_debug_spew_;
<|end_if

    static Rule_ const ms_rule_table_[];
    static BarfCpp_::Size const ms_rule_count_;
    static State_ const ms_state_table_[];
    static BarfCpp_::Size const ms_state_count_;
    static Transition_ const ms_transition_table_[];
    static BarfCpp_::Size const ms_transition_count_;
    static Token::Id const ms_lookahead_table_[];
    static BarfCpp_::Size const ms_lookahead_count_;
<|if(is_defined(generate_debug_spew_code))
    static char const *const ms_token_name_table_[];
    static BarfCpp_::Size const ms_token_name_count_;

    friend std::ostream &operator << (std::ostream &stream, <{class_name}::Token const &token);
<|end_if

    // ///////////////////////////////////////////////////////////////////////
    // end of internal trison-generated parser guts
    // ///////////////////////////////////////////////////////////////////////
}; // end of class <{class_name}

<|if(is_defined(generate_debug_spew_code))
std::ostream &operator << (std::ostream &stream, <{class_name}::Token const &token);

<|end_if
<|bottom_of_header_file?
