    struct Npda_
    {
        struct Transition_;

        // TODO: Get rid of trailing _ chars
        struct State_
        {
            std::size_t         m_transition_count; // TODO: smallest int
            Transition_ const * m_transition_table;
            std::uint32_t       m_associated_rule_index;
<|          if(is_defined(generate_debug_spew_code))
            char const *        m_description;
<|          end_if
        }; // end of struct <{class_name}::Grammar_::State_

        struct Transition_
        {
            // TODO: Make this into a strong enum (C++11)
            enum Type { RETURN = 1, ABORT, REDUCE, SHIFT, INSERT_LOOKAHEAD_ERROR, DISCARD_LOOKAHEAD, POP_STACK, EPSILON };
            std::uint8_t    m_type;
            // TODO: Rename this to m_token_id
            std::uint32_t   m_token_index;  // TODO: smallest int
            std::uint32_t   m_data_index;   // TODO: smallest int

            // TODO: Make a typedef for sorted type index?

            // Lexicographic ordering on the tuple (m_type, m_token_index, m_data_index).
            struct Order
            {
                static std::uint32_t const MIN_SORTED_TYPE_INDEX = 0;
                static std::uint32_t const MAX_SORTED_TYPE_INDEX = 3;
                //static std::uint32_t const MAX_SORTED_TYPE_INDEX = 4;

                // TODO: Rename SortedTypeIndex to OrderedActionIndex?
                static std::uint32_t SortedTypeIndex (Transition_ const &transition)
                {
                    switch (transition.m_type)
                    {
                        case REDUCE:
                        case SHIFT:
                            return 0;

                        case POP_STACK:
                            // POP_STACK 2 has higher precedence than DISCARD_LOOKAHEAD
                            if (transition.m_data_index == 2)
                                return 1;
                            // POP_STACK 1 has equal precedence as DISCARD_LOOKAHEAD
                            else
                            {
                                assert(transition.m_data_index == 1);
                                return 2;
                            }

                        case DISCARD_LOOKAHEAD:
                        case RETURN:
                        case ABORT:
                            return 2;

                        case INSERT_LOOKAHEAD_ERROR:
                        case EPSILON:
                            return 3;

                        default:
                            assert(false && "this should never happen");
                            return 4; // Arbitrary
                    }
                    // switch (type)
                    // {
                    //     case REDUCE:
                    //     case SHIFT:
                    //         return 0;
                    //
                    //     case POP_STACK:
                    //         return 1;
                    //
                    //     case DISCARD_LOOKAHEAD:
                    //         return 2;
                    //
                    //     case RETURN:
                    //     case ABORT:
                    //         return 3;
                    //
                    //     case INSERT_LOOKAHEAD_ERROR:
                    //     case EPSILON:
                    //         return 4;
                    //
                    //     default:
                    //         assert(false && "this should never happen");
                    //         return 5; // Arbitrary
                    // }
                }

                bool operator () (Transition_ const &lhs, Transition_ const &rhs) const
                {
                    std::uint32_t sorted_type_index_lhs = SortedTypeIndex(lhs);
                    std::uint32_t sorted_type_index_rhs = SortedTypeIndex(rhs);
                    if (sorted_type_index_lhs != sorted_type_index_rhs)
                        return sorted_type_index_lhs < sorted_type_index_rhs;
                    else if (lhs.m_type != rhs.m_type)
                        return lhs.m_type < rhs.m_type;
                    else if (lhs.m_token_index != rhs.m_token_index)
                        return lhs.m_token_index < rhs.m_token_index;
                    else
                        return lhs.m_data_index < rhs.m_data_index;
                }
            }; // end of struct <{class_name}::Grammar_::Transition_::Order
        }; // end of struct <{class_name}::Grammar_::Transition_

        typedef std::set<Transition_,Transition_::Order>    TransitionSet_;
        typedef std::vector<Transition_>                    TransitionVector_;

        typedef std::uint32_t                               StateIndex_;
        typedef std::set<StateIndex_>                       StateIndexSet_;
        typedef std::vector<StateIndex_>                    StateIndexVector_;

    private:

        // These functions are used in the implementation of NonEpsilonTransitionsOfState_.

        // Returns the epsilon closure of the given NPDA state.  Return value is memoized.
        static StateIndexVector_ const &EpsilonClosureOfState_ (StateIndex_ state_index);
        // Computes the epsilon closure of the given NPDA state, placing the computed value in epsilon_closure.
        static void ComputeEpsilonClosureOfState_ (StateIndex_ state_index, StateIndexSet_ &epsilon_closure);

    public:

        // Returns the transitions, matching given sorted_type_index, for the epsilon closure of the given NPDA state.  Return value is memoized.
        static TransitionVector_ const &NonEpsilonTransitionsOfState_ (StateIndex_ state_index, std::uint32_t sorted_type_index);

        // TODO: rename to STATE_TABLE and TRANSITION_TABLE ?
        static State_ const         ms_state_table_[];
        static std::size_t const    ms_state_count_;
        static Transition_ const    ms_transition_table_[];
        static std::size_t const    ms_transition_count_;
    }; // end of struct <{class_name}::Npda_
