###############################################################################
# BARF (Bison Awesomely Replaced, Flex) -- a suite of sweet compiler tools.
###############################################################################

cmake_minimum_required(VERSION 3.10)
project(barf)
# The VERSION argument of cmake's project function is not semver compliant.
# See https://gitlab.kitware.com/cmake/cmake/issues/16716
set(PROJECT_VERSION "2.0.0-dev")

# This includes the reflex and trison source file rules (for generating C++).
# Other projects that want to define cmake rules for compiling reflex or trison
# source to C++ should copy the barf/cmake dir into their project and include it.
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
include(barf)

# This is the root dir for files to be installed (notably the barf target files)
set(BARF_TARGETS_DIR ${CMAKE_INSTALL_PREFIX}/barf/targets)

# This indicates all executables should be put in the bin subdir of the build dir.
# Normally this wouldn't be done, but there's a stupid bug in find_program, where
# it searches the current directory for executables, instead of only searching
# the path like a reasonable person would.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# This property is set so that the cpp and hpp files generated by reflex and
# trison aren't cleaned during `make clean`.  This is because those files
# should be checked into the source repo and stay there, only being re-generated
# if the corresponding reflex or trison source (or other source files) changes.
set_directory_properties(PROPERTIES CLEAN_NO_CUSTOM true)

option(I_MAKE_BARF "Enable (and require) BARF developer configuration options.  Not necessary to simply build this package from source." OFF)
if(I_MAKE_BARF)
    find_program(STABLE_REFLEX_BINARY reflex DOC "absolute path to stable reflex binary")
    find_program(STABLE_TRISON_BINARY trison DOC "absolute path to stable trison binary")

    option(SPECIFY_STABLE_BARF_TARGETS_DIR "Enable specification of an alternate targets include path in invocations of the stable reflex and trison binaries (see -I option in reflex and trison help messages)." OFF)
    if(SPECIFY_STABLE_BARF_TARGETS_DIR)
        find_path(STABLE_BARF_TARGETS_DIR DOC "absolute path to stable barf targets directory")
    endif()

    if(NOT EXISTS ${STABLE_REFLEX_BINARY})
        message(FATAL_ERROR "If I_MAKE_BARF is ON, then STABLE_REFLEX_BINARY must be set.")
    endif()
    if(NOT EXISTS ${STABLE_TRISON_BINARY})
        message(FATAL_ERROR "If I_MAKE_BARF is ON, then STABLE_TRISON_BINARY must be set.")
    endif()
endif()

# This sets the DOXYGEN_EXECUTABLE and DOXYGEN_DOT_EXECUTABLE vars.
find_package(Doxygen REQUIRED dot)
# TODO: Hook up doxygen config and generation

# Options to correctly link the standard C++ lib on Mac.
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin") # This is the correct way to detect Mac OS X operating system -- see http://www.openguru.com/2009/04/cmake-detecting-platformoperating.html
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
    if(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang") # GCC ("GNU") probably would require a different option
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    endif()
endif()

###############################################################################
# Doxygen doc rules
###############################################################################

doxygen_add_docs(doc ${PROJECT_SOURCE_DIR}/doc/doxygen_pages)

###############################################################################
# BARF-development specific functions
###############################################################################

function(add_reflex_source_dev SOURCE_FILE TARGET_NAME)
    get_filename_component(SOURCE_FILE_EXT ${SOURCE_FILE} EXT)
    if(NOT (${SOURCE_FILE_EXT} STREQUAL ".reflex"))
        message(FATAL_ERROR "Source file \"${SOURCE_FILE}\" in call to add_reflex_source_dev does not have extension \".reflex\"")
    endif()
    get_filename_component(SOURCE_DIR ${SOURCE_FILE} DIRECTORY)
    get_filename_component(SOURCE_BASENAME ${SOURCE_FILE} NAME_WE)
    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/dev)
    __add_reflex_source__impl(${PROJECT_BINARY_DIR}/bin/reflex ${SOURCE_DIR} ${SOURCE_BASENAME} TRUE ${PROJECT_SOURCE_DIR}/targets ${PROJECT_BINARY_DIR}/dev)

    set(OUTPUT_FILES ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.dfa.dot ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.nfa.dot)
    add_custom_target(${TARGET_NAME} DEPENDS ${OUTPUT_FILES})
    add_custom_target(clean_${TARGET_NAME} COMMAND rm -f ${OUTPUT_FILES} ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.dfa.png ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.nfa.png)

    add_custom_target(
            diff_${TARGET_NAME}
        DEPENDS
            ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.cpp
            ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.hpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.cpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.hpp
    )

    if(DEFINED DOXYGEN_DOT_EXECUTABLE)
        add_custom_target(${TARGET_NAME}_dfa_png DEPENDS ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.dfa.png)
        add_custom_target(clean_${TARGET_NAME}_dfa_png COMMAND rm -f ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.dfa.png)

        add_custom_target(${TARGET_NAME}_nfa_png DEPENDS ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.nfa.png)
        add_custom_target(clean_${TARGET_NAME}_nfa_png COMMAND rm -f ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.nfa.png)

        add_custom_target(${TARGET_NAME}_dot_png DEPENDS ${TARGET_NAME}_dfa_png ${TARGET_NAME}_nfa_png)
        add_custom_target(clean_${TARGET_NAME}_dot_png DEPENDS clean_${TARGET_NAME}_dfa_png clean_${TARGET_NAME}_nfa_png)
    endif()
endfunction()

function(add_trison_source_dev SOURCE_FILE TARGET_NAME)
    get_filename_component(SOURCE_FILE_EXT ${SOURCE_FILE} EXT)
    if(NOT (${SOURCE_FILE_EXT} STREQUAL ".trison"))
        message(FATAL_ERROR "Source file \"${SOURCE_FILE}\" in call to add_trison_source_dev does not have extension \".trison\"")
    endif()
    get_filename_component(SOURCE_DIR ${SOURCE_FILE} DIRECTORY)
    get_filename_component(SOURCE_BASENAME ${SOURCE_FILE} NAME_WE)
    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/dev)
    __add_trison_source__impl(${PROJECT_BINARY_DIR}/bin/trison ${SOURCE_DIR} ${SOURCE_BASENAME} TRUE ${PROJECT_SOURCE_DIR}/targets ${PROJECT_BINARY_DIR}/dev)

    set(OUTPUT_FILES ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.npda.dot ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.npda.states)
    add_custom_target(${TARGET_NAME} DEPENDS ${OUTPUT_FILES})
    add_custom_target(clean_${TARGET_NAME} COMMAND rm -f ${OUTPUT_FILES})

    add_custom_target(
            diff_${TARGET_NAME}
        DEPENDS
            ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.cpp
            ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.hpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.cpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.hpp
    )

    if(DEFINED DOXYGEN_DOT_EXECUTABLE)
        add_custom_target(${TARGET_NAME}_npda_png DEPENDS ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.npda.png)
        add_custom_target(clean_${TARGET_NAME}_npda_png COMMAND rm -f ${PROJECT_BINARY_DIR}/dev/${SOURCE_BASENAME}.npda.png)

        add_custom_target(${TARGET_NAME}_dot_png DEPENDS ${TARGET_NAME}_npda_png)
        add_custom_target(clean_${TARGET_NAME}_dot_png DEPENDS clean_${TARGET_NAME}_npda_png)
    endif()
endfunction()

###############################################################################
# Dependencies
###############################################################################

# Helper target(s)

# add_library(C++11 INTERFACE)
# if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
#     target_compile_options(C++11 INTERFACE -std=c++11)
# endif()

add_library(Strict INTERFACE)
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_compile_options(Strict INTERFACE -Wall -Werror)
endif()

add_library(SaveTemps INTERFACE)
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_compile_options(SaveTemps INTERFACE -save-temps)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    # TODO
endif()

###############################################################################
# Libraries
###############################################################################

#
# barf_commonlang_and_targetspec
#

if(I_MAKE_BARF)
    add_reflex_source(${PROJECT_SOURCE_DIR}/lib/commonlang/barf_commonlang_scanner.reflex barf_commonlang_scanner)
    add_trison_source(${PROJECT_SOURCE_DIR}/lib/targetspec/barf_targetspec_parser.trison barf_targetspec_parser)
endif()

add_reflex_source_dev(${PROJECT_SOURCE_DIR}/lib/commonlang/barf_commonlang_scanner.reflex dev_barf_commonlang_scanner)
add_trison_source_dev(${PROJECT_SOURCE_DIR}/lib/targetspec/barf_targetspec_parser.trison dev_barf_targetspec_parser)

set(barf_commonlang_and_targetspec_SOURCES
    lib/commonlang/barf_commonlang.hpp
    lib/commonlang/barf_commonlang_ast.cpp
    lib/commonlang/barf_commonlang_ast.hpp
    lib/commonlang/barf_commonlang_scanner.cpp
    lib/commonlang/barf_commonlang_scanner.hpp
    lib/commonlang/barf_commonlang_scanner.reflex
    lib/targetspec/barf_targetspec.hpp
    lib/targetspec/barf_targetspec_ast.cpp
    lib/targetspec/barf_targetspec_ast.hpp
    lib/targetspec/barf_targetspec_parser.cpp
    lib/targetspec/barf_targetspec_parser.hpp
    lib/targetspec/barf_targetspec_parser.trison
)

add_library(barf_commonlang_and_targetspec ${barf_commonlang_and_targetspec_SOURCES})
target_compile_definitions(barf_commonlang_and_targetspec PUBLIC PACKAGE_VERSION="${PROJECT_VERSION}" BARF_TARGETS_DIR="${BARF_TARGETS_DIR}")
target_include_directories(barf_commonlang_and_targetspec PUBLIC ${PROJECT_SOURCE_DIR}/lib/commonlang)
target_include_directories(barf_commonlang_and_targetspec PUBLIC ${PROJECT_SOURCE_DIR}/lib/targetspec)
target_link_libraries(barf_commonlang_and_targetspec PUBLIC Strict barf_core barf_preprocessor)

#
# barf_core
#

set(barf_core_SOURCES
    lib/core/barf.cpp
    lib/core/barf.hpp
    lib/core/barf_ast.cpp
    lib/core/barf_ast.hpp
    lib/core/barf_commandlineparser.cpp
    lib/core/barf_commandlineparser.hpp
    lib/core/barf_compiletimeasserts.cpp
    lib/core/barf_compiletimeasserts.hpp
    lib/core/barf_enums.cpp
    lib/core/barf_enums.hpp
    lib/core/barf_filoc.cpp
    lib/core/barf_filoc.hpp
    lib/core/barf_graph.cpp
    lib/core/barf_graph.hpp
    lib/core/barf_inputbase.cpp
    lib/core/barf_inputbase.hpp
    lib/core/barf_list.hpp
    lib/core/barf_message.cpp
    lib/core/barf_message.hpp
    lib/core/barf_optionsbase.cpp
    lib/core/barf_optionsbase.hpp
    lib/core/barf_pointer.hpp
    lib/core/barf_searchpath.cpp
    lib/core/barf_searchpath.hpp
    lib/core/barf_types.hpp
    lib/core/barf_util.cpp
    lib/core/barf_util.hpp
    lib/core/barf_weakreference.hpp
)

add_library(barf_core ${barf_core_SOURCES})
target_compile_definitions(barf_core PUBLIC PACKAGE_VERSION="${PROJECT_VERSION}" BARF_TARGETS_DIR="${BARF_TARGETS_DIR}")
target_include_directories(barf_core PUBLIC ${PROJECT_SOURCE_DIR}/lib/core)
target_link_libraries(barf_core PUBLIC Strict)

#
# barf_preprocessor
#

if(I_MAKE_BARF)
    add_reflex_source(${PROJECT_SOURCE_DIR}/lib/preprocessor/barf_preprocessor_scanner.reflex barf_preprocessor_scanner)
    add_trison_source(${PROJECT_SOURCE_DIR}/lib/preprocessor/barf_preprocessor_parser.trison barf_preprocessor_parser)
endif()

add_reflex_source_dev(${PROJECT_SOURCE_DIR}/lib/preprocessor/barf_preprocessor_scanner.reflex dev_barf_preprocessor_scanner)
add_trison_source_dev(${PROJECT_SOURCE_DIR}/lib/preprocessor/barf_preprocessor_parser.trison dev_barf_preprocessor_parser)

set(barf_preprocessor_SOURCES
    lib/preprocessor/barf_preprocessor.hpp
    lib/preprocessor/barf_preprocessor_ast.cpp
    lib/preprocessor/barf_preprocessor_ast_execute.cpp
    lib/preprocessor/barf_preprocessor_ast.hpp
    lib/preprocessor/barf_preprocessor_ast_print.cpp
    lib/preprocessor/barf_preprocessor_parser.cpp
    lib/preprocessor/barf_preprocessor_parser.hpp
    lib/preprocessor/barf_preprocessor_parser.trison
    lib/preprocessor/barf_preprocessor_scanner.cpp
    lib/preprocessor/barf_preprocessor_scanner.hpp
    lib/preprocessor/barf_preprocessor_scanner.reflex
    lib/preprocessor/barf_preprocessor_symboltable.cpp
    lib/preprocessor/barf_preprocessor_symboltable.hpp
    lib/preprocessor/barf_preprocessor_textifier.cpp
    lib/preprocessor/barf_preprocessor_textifier.hpp
)

add_library(barf_preprocessor ${barf_preprocessor_SOURCES})
target_compile_definitions(barf_preprocessor PUBLIC PACKAGE_VERSION="${PROJECT_VERSION}" BARF_TARGETS_DIR="${BARF_TARGETS_DIR}")
target_include_directories(barf_preprocessor PUBLIC ${PROJECT_SOURCE_DIR}/lib/preprocessor)
target_link_libraries(barf_preprocessor PUBLIC Strict barf_core)

#
# barf_regex
#

if(I_MAKE_BARF)
    add_trison_source(${PROJECT_SOURCE_DIR}/lib/regex/barf_regex_parser.trison barf_regex_parser)
endif()

add_trison_source_dev(${PROJECT_SOURCE_DIR}/lib/regex/barf_regex_parser.trison dev_barf_regex_parser)

set(barf_regex_SOURCES
    lib/regex/barf_regex.cpp
    lib/regex/barf_regex.hpp
    lib/regex/barf_regex_ast.cpp
    lib/regex/barf_regex_ast.hpp
    lib/regex/barf_regex_dfa.cpp
    lib/regex/barf_regex_dfa.hpp
    lib/regex/barf_regex_graph.cpp
    lib/regex/barf_regex_graph.hpp
    lib/regex/barf_regex_nfa.cpp
    lib/regex/barf_regex_nfa.hpp
    lib/regex/barf_regex_parser.cpp
    lib/regex/barf_regex_parser.hpp
    lib/regex/barf_regex_parser.trison
)

add_library(barf_regex ${barf_regex_SOURCES})
target_compile_definitions(barf_regex PUBLIC PACKAGE_VERSION="${PROJECT_VERSION}" BARF_TARGETS_DIR="${BARF_TARGETS_DIR}")
target_include_directories(barf_regex PUBLIC ${PROJECT_SOURCE_DIR}/lib/regex)
target_link_libraries(barf_regex PUBLIC Strict barf_core)

###############################################################################
# Executables
###############################################################################

#
# bpp (BARF Pre-Processor)
#

set(BPP_SOURCES
    app/bpp/bpp.hpp
    app/bpp/bpp_main.cpp
    app/bpp/bpp_options.cpp
    app/bpp/bpp_options.hpp
)
add_executable(bpp ${BPP_SOURCES})
target_compile_definitions(bpp PUBLIC PACKAGE_VERSION="${PROJECT_VERSION}" BARF_TARGETS_DIR="${BARF_TARGETS_DIR}")
target_include_directories(bpp PUBLIC ${PROJECT_SOURCE_DIR}/app/bpp)
target_link_libraries(bpp PUBLIC Strict barf_core barf_preprocessor)

#
# reflex (scanner generator)
#

if(I_MAKE_BARF)
    add_trison_source(${PROJECT_SOURCE_DIR}/app/reflex/reflex_parser.trison reflex_parser)
endif()

add_trison_source_dev(${PROJECT_SOURCE_DIR}/app/reflex/reflex_parser.trison dev_reflex_parser)

set(REFLEX_SOURCES
    app/reflex/reflex.hpp
    app/reflex/reflex_ast.cpp
    app/reflex/reflex_ast.hpp
    app/reflex/reflex_automaton.cpp
    app/reflex/reflex_automaton.hpp
    app/reflex/reflex_codespecsymbols.cpp
    app/reflex/reflex_codespecsymbols.hpp
    app/reflex/reflex_main.cpp
    app/reflex/reflex_options.cpp
    app/reflex/reflex_options.hpp
    app/reflex/reflex_parser.cpp
    app/reflex/reflex_parser.hpp
    app/reflex/reflex_parser.trison
)
add_executable(reflex ${REFLEX_SOURCES})
target_compile_definitions(reflex PUBLIC PACKAGE_VERSION="${PROJECT_VERSION}" BARF_TARGETS_DIR="${BARF_TARGETS_DIR}")
target_include_directories(reflex PUBLIC ${PROJECT_SOURCE_DIR}/app/reflex)
target_link_libraries(reflex PUBLIC Strict barf_commonlang_and_targetspec barf_core barf_preprocessor barf_regex)

#
# trison (parser generator)
#

if(I_MAKE_BARF)
    add_trison_source(${PROJECT_SOURCE_DIR}/app/trison/trison_parser.trison trison_parser)
endif()

add_trison_source_dev(${PROJECT_SOURCE_DIR}/app/trison/trison_parser.trison dev_trison_parser)

set(TRISON_SOURCES
    app/trison/trison.hpp
    app/trison/trison_ast.cpp
    app/trison/trison_ast.hpp
    app/trison/trison_codespecsymbols.cpp
    app/trison/trison_codespecsymbols.hpp
    app/trison/trison_dpda.cpp
    app/trison/trison_dpda.hpp
    app/trison/trison_enums.cpp
    app/trison/trison_enums.hpp
    app/trison/trison_graph.cpp
    app/trison/trison_graph.hpp
    app/trison/trison_main.cpp
    app/trison/trison_npda.cpp
    app/trison/trison_npda.hpp
    app/trison/trison_options.cpp
    app/trison/trison_options.hpp
    app/trison/trison_parser.cpp
    app/trison/trison_parser.hpp
    app/trison/trison_parser.trison
)
add_executable(trison ${TRISON_SOURCES})
target_compile_definitions(trison PUBLIC PACKAGE_VERSION="${PROJECT_VERSION}" BARF_TARGETS_DIR="${BARF_TARGETS_DIR}")
target_include_directories(trison PUBLIC ${PROJECT_SOURCE_DIR}/app/trison)
target_link_libraries(trison PUBLIC Strict barf_commonlang_and_targetspec barf_core barf_preprocessor)

###############################################################################
# Install rules
###############################################################################

install(
    TARGETS bpp reflex trison
    RUNTIME DESTINATION bin # This is relative to CMAKE_INSTALL_PREFIX
)
install(
    DIRECTORY targets # This holds all the reflex and trison targets (targetspec and codespec files)
    DESTINATION barf # This is relative to CMAKE_INSTALL_PREFIX
)
install(
    DIRECTORY cmake # This has all cmake modules for barf
    DESTINATION barf # This is relative to CMAKE_INSTALL_PREFIX
)
install(
    DIRECTORY extra # This holds "extras" (e.g. syntax highlighting files)
    DESTINATION barf # This is relative to CMAKE_INSTALL_PREFIX
)
install(
    FILES LICENSE README TODO
    DESTINATION . # This is relative to CMAKE_INSTALL_PREFIX
)
# TODO: install rules for doxygen docs

###############################################################################
# Helper targets (this defines a hierarchy of related build rules)
###############################################################################

if(I_MAKE_BARF)
    add_custom_target(all_parsers DEPENDS barf_preprocessor_parser barf_regex_parser barf_targetspec_parser reflex_parser trison_parser)
    add_custom_target(all_scanners DEPENDS barf_commonlang_scanner barf_preprocessor_scanner)
    add_custom_target(all_thingies DEPENDS all_parsers all_scanners)

    add_custom_target(clean_all_parsers DEPENDS clean_barf_preprocessor_parser clean_barf_regex_parser clean_barf_targetspec_parser clean_reflex_parser clean_trison_parser)
    add_custom_target(clean_all_scanners DEPENDS clean_barf_commonlang_scanner clean_barf_preprocessor_scanner)
    add_custom_target(clean_all_thingies DEPENDS clean_all_parsers clean_all_scanners)

    add_custom_target(all_parser_dot_pngs DEPENDS barf_preprocessor_parser_dot_png barf_regex_parser_dot_png barf_targetspec_parser_dot_png reflex_parser_dot_png trison_parser_dot_png)
    add_custom_target(all_parser_npda_pngs DEPENDS barf_preprocessor_parser_npda_png barf_regex_parser_npda_png barf_targetspec_parser_npda_png reflex_parser_npda_png trison_parser_npda_png)
    add_custom_target(all_scanner_dfa_pngs DEPENDS barf_commonlang_scanner_dfa_png barf_preprocessor_scanner_dfa_png)
    add_custom_target(all_scanner_nfa_pngs DEPENDS barf_commonlang_scanner_nfa_png barf_preprocessor_scanner_nfa_png)
    add_custom_target(all_scanner_dot_pngs DEPENDS barf_commonlang_scanner_dot_png barf_preprocessor_scanner_dot_png)
    add_custom_target(all_thingy_dot_pngs DEPENDS all_parser_dot_pngs all_scanner_dot_pngs)

    add_custom_target(clean_all_parser_dot_pngs DEPENDS clean_barf_preprocessor_parser_dot_png clean_barf_regex_parser_dot_png clean_barf_targetspec_parser_dot_png clean_reflex_parser_dot_png clean_trison_parser_dot_png)
    add_custom_target(clean_all_parser_npda_pngs DEPENDS clean_barf_preprocessor_parser_npda_png clean_barf_regex_parser_npda_png clean_barf_targetspec_parser_npda_png clean_reflex_parser_npda_png clean_trison_parser_npda_png)
    add_custom_target(clean_all_scanner_dfa_pngs DEPENDS clean_barf_commonlang_scanner_dfa_png clean_barf_preprocessor_scanner_dfa_png)
    add_custom_target(clean_all_scanner_nfa_pngs DEPENDS clean_barf_commonlang_scanner_nfa_png clean_barf_preprocessor_scanner_nfa_png)
    add_custom_target(clean_all_scanner_dot_pngs DEPENDS clean_barf_commonlang_scanner_dot_png clean_barf_preprocessor_scanner_dot_png)
    add_custom_target(clean_all_thingy_dot_pngs DEPENDS clean_all_parser_dot_pngs clean_all_scanner_dot_pngs)
endif()

add_custom_target(all_dev_parsers DEPENDS dev_barf_preprocessor_parser dev_barf_regex_parser dev_barf_targetspec_parser dev_reflex_parser dev_trison_parser)
add_custom_target(all_dev_scanners DEPENDS dev_barf_commonlang_scanner dev_barf_preprocessor_scanner)
add_custom_target(all_dev_thingies DEPENDS all_dev_parsers all_dev_scanners)

add_custom_target(diff_all_dev_parsers DEPENDS diff_dev_barf_preprocessor_parser diff_dev_barf_regex_parser diff_dev_barf_targetspec_parser diff_dev_reflex_parser diff_dev_trison_parser)
add_custom_target(diff_all_dev_scanners DEPENDS diff_dev_barf_commonlang_scanner diff_dev_barf_preprocessor_scanner)
add_custom_target(diff_all_dev_thingies DEPENDS diff_all_dev_parsers diff_all_dev_scanners)

add_custom_target(clean_all_dev_parsers DEPENDS clean_dev_barf_preprocessor_parser clean_dev_barf_regex_parser clean_dev_barf_targetspec_parser clean_dev_reflex_parser clean_dev_trison_parser)
add_custom_target(clean_all_dev_scanners DEPENDS clean_dev_barf_commonlang_scanner clean_dev_barf_preprocessor_scanner)
add_custom_target(clean_all_dev_thingies DEPENDS clean_all_dev_parsers clean_all_dev_scanners)

add_custom_target(all_dev_parser_dot_pngs DEPENDS dev_barf_preprocessor_parser_dot_png dev_barf_regex_parser_dot_png dev_barf_targetspec_parser_dot_png dev_reflex_parser_dot_png dev_trison_parser_dot_png)
add_custom_target(all_dev_parser_npda_pngs DEPENDS dev_barf_preprocessor_parser_npda_png dev_barf_regex_parser_npda_png dev_barf_targetspec_parser_npda_png dev_reflex_parser_npda_png dev_trison_parser_npda_png)
add_custom_target(all_dev_scanner_dfa_pngs DEPENDS dev_barf_commonlang_scanner_dfa_png dev_barf_preprocessor_scanner_dfa_png)
add_custom_target(all_dev_scanner_nfa_pngs DEPENDS dev_barf_commonlang_scanner_nfa_png dev_barf_preprocessor_scanner_nfa_png)
add_custom_target(all_dev_scanner_dot_pngs DEPENDS dev_barf_commonlang_scanner_dot_png dev_barf_preprocessor_scanner_dot_png)
add_custom_target(all_dev_thingy_dot_pngs DEPENDS all_dev_parser_dot_pngs all_dev_scanner_dot_pngs)

add_custom_target(clean_all_dev_parser_dot_pngs DEPENDS clean_dev_barf_preprocessor_parser_dot_png clean_dev_barf_regex_parser_dot_png clean_dev_barf_targetspec_parser_dot_png clean_dev_reflex_parser_dot_png clean_dev_trison_parser_dot_png)
add_custom_target(clean_all_dev_parser_npda_pngs DEPENDS clean_dev_barf_preprocessor_parser_npda_png clean_dev_barf_regex_parser_npda_png clean_dev_barf_targetspec_parser_npda_png clean_dev_reflex_parser_npda_png clean_dev_trison_parser_npda_png)
add_custom_target(clean_all_dev_scanner_dfa_pngs DEPENDS clean_dev_barf_commonlang_scanner_dfa_png clean_dev_barf_preprocessor_scanner_dfa_png)
add_custom_target(clean_all_dev_scanner_nfa_pngs DEPENDS clean_dev_barf_commonlang_scanner_nfa_png clean_dev_barf_preprocessor_scanner_nfa_png)
add_custom_target(clean_all_dev_scanner_dot_pngs DEPENDS clean_dev_barf_commonlang_scanner_dot_png clean_dev_barf_preprocessor_scanner_dot_png)
add_custom_target(clean_all_dev_thingy_dot_pngs DEPENDS clean_all_dev_parser_dot_pngs clean_all_dev_scanner_dot_pngs)
