###############################################################################
# BARF (Bison Awesomely Replaced, Flex) -- a suite of sweet compiler tools.
###############################################################################

cmake_minimum_required(VERSION 3.10)
project(barf)

# This property is set so that the cpp and hpp files generated by reflex and
# trison aren't cleaned during `make clean`.  This is because those files
# should be checked into the source repo and stay there, only being re-generated
# if the corresponding reflex or trison source (or other source files) changes.
set_directory_properties(PROPERTIES CLEAN_NO_CUSTOM true)

find_path(STABLE_REFLEX_BINARY "absolute path to stable reflex binary (only needed for barf developers)" PATHS $ENV{STABLE_REFLEX_BINARY} NO_DEFAULT_PATH)
find_path(STABLE_TRISON_BINARY "absolute path to stable trison binary (only needed for barf developers)" PATHS $ENV{STABLE_TRISON_BINARY} NO_DEFAULT_PATH)
find_path(STABLE_BARF_TARGETS_DIR "absolute path to stable targets directory (only needed for barf developers)" PATHS $ENV{STABLE_BARF_TARGETS_DIR} NO_DEFAULT_PATH)

# Options to correctly link the standard C++ lib on Mac.
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin") # This is the correct way to detect Mac OS X operating system -- see http://www.openguru.com/2009/04/cmake-detecting-platformoperating.html
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
    if(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang") # GCC ("GNU") probably would require a different option
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    endif()
endif()

###############################################################################
# Dependencies
###############################################################################

find_package(Doxygen REQUIRED dot)
# TODO: Hook up doxygen config and generation

# Helper target(s)

# add_library(C++11 INTERFACE)
# if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
#     target_compile_options(C++11 INTERFACE -std=c++11)
# endif()

add_library(Strict INTERFACE)
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_compile_options(Strict INTERFACE -Wall -Werror)
endif()

add_library(SaveTemps INTERFACE)
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_compile_options(SaveTemps INTERFACE -save-temps)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    # TODO
endif()

###############################################################################
# CMake functions for compiling reflex and trison sources into C++ as well
# as creating named targets for them and for diff-based tests for them.
###############################################################################

# Don't use this function directly.  Use one of add_reflex_source, add_reflex_source_test, add_reflex_source_and_test instead.
function(__add_reflex_source__impl REFLEX_BINARY SOURCE_DIR SOURCE_BASENAME TARGETS_DIR OUTPUT_DIR)
    add_custom_command(
        OUTPUT
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.cpp
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.hpp
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.nfa.dot
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.dfa.dot
        COMMAND
            ${REFLEX_BINARY}
            -I ${TARGETS_DIR}
            ${SOURCE_DIR}/${SOURCE_BASENAME}.reflex
            -o ${OUTPUT_DIR}
            --generate-nfa-dot-graph ${SOURCE_BASENAME}.nfa.dot
            --generate-dfa-dot-graph ${SOURCE_BASENAME}.dfa.dot
        MAIN_DEPENDENCY
            ${SOURCE_DIR}/${SOURCE_BASENAME}.reflex
        DEPENDS
            ${TARGETS_DIR}/reflex.cpp.header.codespec
            ${TARGETS_DIR}/reflex.cpp.implementation.codespec
            ${TARGETS_DIR}/reflex.cpp.targetspec
    )
endfunction()

function(add_reflex_source SOURCE_FILE)
    get_filename_component(SOURCE_FILE_EXT ${SOURCE_FILE} EXT)
    if(NOT (${SOURCE_FILE_EXT} STREQUAL ".reflex"))
        message(FATAL_ERROR "Source file \"${SOURCE_FILE}\" in call to add_reflex_source does not have extension \".reflex\"")
    endif()
    get_filename_component(SOURCE_DIR ${SOURCE_FILE} DIRECTORY)
    get_filename_component(SOURCE_BASENAME ${SOURCE_FILE} NAME_WE)
    __add_reflex_source__impl(${STABLE_REFLEX_BINARY} ${SOURCE_DIR} ${SOURCE_BASENAME} ${STABLE_BARF_TARGETS_DIR} ${SOURCE_DIR})

    set(OUTPUT_FILES ${SOURCE_DIR}/${SOURCE_BASENAME}.cpp ${SOURCE_DIR}/${SOURCE_BASENAME}.hpp ${SOURCE_DIR}/${SOURCE_BASENAME}.dfa.dot ${SOURCE_DIR}/${SOURCE_BASENAME}.nfa.dot)
    add_custom_target(${SOURCE_BASENAME} DEPENDS ${OUTPUT_FILES})
    add_custom_target(clean_${SOURCE_BASENAME} COMMAND rm -f ${OUTPUT_FILES})
endfunction()

function(add_reflex_source_test SOURCE_FILE)
    get_filename_component(SOURCE_FILE_EXT ${SOURCE_FILE} EXT)
    if(NOT (${SOURCE_FILE_EXT} STREQUAL ".reflex"))
        message(FATAL_ERROR "Source file \"${SOURCE_FILE}\" in call to add_reflex_source_test does not have extension \".reflex\"")
    endif()
    get_filename_component(SOURCE_DIR ${SOURCE_FILE} DIRECTORY)
    get_filename_component(SOURCE_BASENAME ${SOURCE_FILE} NAME_WE)
    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/test)
    __add_reflex_source__impl(${PROJECT_BINARY_DIR}/reflex ${SOURCE_DIR} ${SOURCE_BASENAME} ${PROJECT_SOURCE_DIR}/targets ${PROJECT_BINARY_DIR}/test)

    set(OUTPUT_FILES ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.dfa.dot ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.nfa.dot)
    add_custom_target(test_${SOURCE_BASENAME} DEPENDS ${OUTPUT_FILES})
    add_custom_target(clean_test_${SOURCE_BASENAME} COMMAND rm -f ${OUTPUT_FILES})
    add_custom_target(
            diff_test_${SOURCE_BASENAME}
        DEPENDS
            ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.cpp
            ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.hpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.cpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.hpp
    )
endfunction()

function(add_reflex_source_and_test SOURCE_FILE)
    add_reflex_source(${SOURCE_FILE})
    add_reflex_source_test(${SOURCE_FILE})
endfunction()

# Don't use this function directly.  Use one of add_trison_source, add_trison_source_test, add_trison_source_and_test instead.
function(__add_trison_source__impl TRISON_BINARY SOURCE_DIR SOURCE_BASENAME TARGETS_DIR OUTPUT_DIR)
    add_custom_command(
        OUTPUT
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.cpp
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.hpp
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.npda.dot
            ${OUTPUT_DIR}/${SOURCE_BASENAME}.npda.states
        COMMAND
            ${TRISON_BINARY}
            -I ${TARGETS_DIR}
            ${SOURCE_DIR}/${SOURCE_BASENAME}.trison
            -o ${OUTPUT_DIR}
            --generate-npda-dot-graph ${SOURCE_BASENAME}.npda.dot
            --generate-npda-states-file ${SOURCE_BASENAME}.npda.states
        MAIN_DEPENDENCY
            ${SOURCE_DIR}/${SOURCE_BASENAME}.trison
        DEPENDS
            ${TARGETS_DIR}/trison.cpp.header.codespec
            ${TARGETS_DIR}/trison.cpp.implementation.codespec
            ${TARGETS_DIR}/trison.cpp.npda.grammar.header.codespec
            ${TARGETS_DIR}/trison.cpp.npda.grammar.implementation.codespec
            ${TARGETS_DIR}/trison.cpp.npda.header.codespec
            ${TARGETS_DIR}/trison.cpp.npda.implementation.codespec
            ${TARGETS_DIR}/trison.cpp.npda.npda.header.codespec
            ${TARGETS_DIR}/trison.cpp.npda.npda.implementation.codespec
            ${TARGETS_DIR}/trison.cpp.targetspec
    )
endfunction()

function(add_trison_source SOURCE_FILE)
    get_filename_component(SOURCE_FILE_EXT ${SOURCE_FILE} EXT)
    if(NOT (${SOURCE_FILE_EXT} STREQUAL ".trison"))
        message(FATAL_ERROR "Source file \"${SOURCE_FILE}\" in call to add_trison_source does not have extension \".trison\"")
    endif()
    get_filename_component(SOURCE_DIR ${SOURCE_FILE} DIRECTORY)
    get_filename_component(SOURCE_BASENAME ${SOURCE_FILE} NAME_WE)
    __add_trison_source__impl(${STABLE_TRISON_BINARY} ${SOURCE_DIR} ${SOURCE_BASENAME} ${STABLE_BARF_TARGETS_DIR} ${SOURCE_DIR})

    set(OUTPUT_FILES ${SOURCE_DIR}/${SOURCE_BASENAME}.cpp ${SOURCE_DIR}/${SOURCE_BASENAME}.hpp ${SOURCE_DIR}/${SOURCE_BASENAME}.npda.dot ${SOURCE_DIR}/${SOURCE_BASENAME}.npda.states)
    add_custom_target(${SOURCE_BASENAME} DEPENDS ${OUTPUT_FILES})
    add_custom_target(clean_${SOURCE_BASENAME} COMMAND rm -f ${OUTPUT_FILES})
endfunction()

function(add_trison_source_test SOURCE_FILE)
    get_filename_component(SOURCE_FILE_EXT ${SOURCE_FILE} EXT)
    if(NOT (${SOURCE_FILE_EXT} STREQUAL ".trison"))
        message(FATAL_ERROR "Source file \"${SOURCE_FILE}\" in call to add_trison_source_test does not have extension \".trison\"")
    endif()
    get_filename_component(SOURCE_DIR ${SOURCE_FILE} DIRECTORY)
    get_filename_component(SOURCE_BASENAME ${SOURCE_FILE} NAME_WE)
    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/test)
    __add_trison_source__impl(${PROJECT_BINARY_DIR}/trison ${SOURCE_DIR} ${SOURCE_BASENAME} ${PROJECT_SOURCE_DIR}/targets ${PROJECT_BINARY_DIR}/test)

    set(OUTPUT_FILES ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.npda.dot ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.npda.states)
    add_custom_target(test_${SOURCE_BASENAME} DEPENDS ${OUTPUT_FILES})
    add_custom_target(clean_test_${SOURCE_BASENAME} COMMAND rm -f ${OUTPUT_FILES})
    add_custom_target(
            diff_test_${SOURCE_BASENAME}
        DEPENDS
            ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.cpp
            ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.hpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.cpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.cpp
        COMMAND
            diff ${SOURCE_DIR}/${SOURCE_BASENAME}.hpp ${PROJECT_BINARY_DIR}/test/${SOURCE_BASENAME}.hpp
    )
endfunction()

function(add_trison_source_and_test SOURCE_FILE)
    add_trison_source(${SOURCE_FILE})
    add_trison_source_test(${SOURCE_FILE})
endfunction()

###############################################################################
# Libraries
###############################################################################

#
# barf_commonlang_and_targetspec
#

add_reflex_source_and_test(${PROJECT_SOURCE_DIR}/lib/commonlang/barf_commonlang_scanner.reflex)
add_trison_source_and_test(${PROJECT_SOURCE_DIR}/lib/targetspec/barf_targetspec_parser.trison)

set(barf_commonlang_and_targetspec_SOURCES
    lib/commonlang/barf_commonlang.hpp
    lib/commonlang/barf_commonlang_ast.cpp
    lib/commonlang/barf_commonlang_ast.hpp
    lib/commonlang/barf_commonlang_scanner.cpp
    lib/commonlang/barf_commonlang_scanner.hpp
    lib/commonlang/barf_commonlang_scanner.reflex
    lib/targetspec/barf_targetspec.hpp
    lib/targetspec/barf_targetspec_ast.cpp
    lib/targetspec/barf_targetspec_ast.hpp
    lib/targetspec/barf_targetspec_parser.cpp
    lib/targetspec/barf_targetspec_parser.hpp
    lib/targetspec/barf_targetspec_parser.trison
)

add_library(barf_commonlang_and_targetspec ${barf_commonlang_and_targetspec_SOURCES})
target_include_directories(barf_commonlang_and_targetspec PUBLIC ${PROJECT_SOURCE_DIR}/lib/commonlang)
target_include_directories(barf_commonlang_and_targetspec PUBLIC ${PROJECT_SOURCE_DIR}/lib/targetspec)
target_link_libraries(barf_commonlang_and_targetspec PUBLIC Strict barf_core barf_preprocessor)

#
# barf_core
#

set(barf_core_SOURCES
    lib/core/barf.cpp
    lib/core/barf.hpp
    lib/core/barf_ast.cpp
    lib/core/barf_ast.hpp
    lib/core/barf_commandlineparser.cpp
    lib/core/barf_commandlineparser.hpp
    lib/core/barf_compiletimeasserts.cpp
    lib/core/barf_compiletimeasserts.hpp
    lib/core/barf_enums.cpp
    lib/core/barf_enums.hpp
    lib/core/barf_filoc.cpp
    lib/core/barf_filoc.hpp
    lib/core/barf_graph.cpp
    lib/core/barf_graph.hpp
    lib/core/barf_inputbase.cpp
    lib/core/barf_inputbase.hpp
    lib/core/barf_list.hpp
    lib/core/barf_message.cpp
    lib/core/barf_message.hpp
    lib/core/barf_optionsbase.cpp
    lib/core/barf_optionsbase.hpp
    lib/core/barf_pointer.hpp
    lib/core/barf_searchpath.cpp
    lib/core/barf_searchpath.hpp
    lib/core/barf_types.hpp
    lib/core/barf_util.cpp
    lib/core/barf_util.hpp
    lib/core/barf_weakreference.hpp
)

add_library(barf_core ${barf_core_SOURCES})
target_include_directories(barf_core PUBLIC ${PROJECT_SOURCE_DIR}/lib/core)
target_link_libraries(barf_core PUBLIC Strict)

#
# barf_preprocessor
#

add_reflex_source_and_test(${PROJECT_SOURCE_DIR}/lib/preprocessor/barf_preprocessor_scanner.reflex)
add_trison_source_and_test(${PROJECT_SOURCE_DIR}/lib/preprocessor/barf_preprocessor_parser.trison)

set(barf_preprocessor_SOURCES
    lib/preprocessor/barf_preprocessor.hpp
    lib/preprocessor/barf_preprocessor_ast.cpp
    lib/preprocessor/barf_preprocessor_ast_execute.cpp
    lib/preprocessor/barf_preprocessor_ast.hpp
    lib/preprocessor/barf_preprocessor_ast_print.cpp
    lib/preprocessor/barf_preprocessor_parser.cpp
    lib/preprocessor/barf_preprocessor_parser.hpp
    lib/preprocessor/barf_preprocessor_parser.trison
    lib/preprocessor/barf_preprocessor_scanner.cpp
    lib/preprocessor/barf_preprocessor_scanner.hpp
    lib/preprocessor/barf_preprocessor_scanner.reflex
    lib/preprocessor/barf_preprocessor_symboltable.cpp
    lib/preprocessor/barf_preprocessor_symboltable.hpp
    lib/preprocessor/barf_preprocessor_textifier.cpp
    lib/preprocessor/barf_preprocessor_textifier.hpp
)

add_library(barf_preprocessor ${barf_preprocessor_SOURCES})
target_include_directories(barf_preprocessor PUBLIC ${PROJECT_SOURCE_DIR}/lib/preprocessor)
target_link_libraries(barf_preprocessor PUBLIC Strict barf_core)

#
# barf_regex
#

add_trison_source_and_test(${PROJECT_SOURCE_DIR}/lib/regex/barf_regex_parser.trison)

set(barf_regex_SOURCES
    lib/regex/barf_regex.cpp
    lib/regex/barf_regex.hpp
    lib/regex/barf_regex_ast.cpp
    lib/regex/barf_regex_ast.hpp
    lib/regex/barf_regex_dfa.cpp
    lib/regex/barf_regex_dfa.hpp
    lib/regex/barf_regex_graph.cpp
    lib/regex/barf_regex_graph.hpp
    lib/regex/barf_regex_nfa.cpp
    lib/regex/barf_regex_nfa.hpp
    lib/regex/barf_regex_parser.cpp
    lib/regex/barf_regex_parser.hpp
    lib/regex/barf_regex_parser.trison
)

add_library(barf_regex ${barf_regex_SOURCES})
target_include_directories(barf_regex PUBLIC ${PROJECT_SOURCE_DIR}/lib/regex)
target_link_libraries(barf_regex PUBLIC Strict barf_core)

###############################################################################
# Executables
###############################################################################

#
# bpp (BARF Pre-Processor)
#

set(BPP_SOURCES
    app/bpp/bpp.hpp
    app/bpp/bpp_main.cpp
    app/bpp/bpp_options.cpp
    app/bpp/bpp_options.hpp
)
add_executable(bpp ${BPP_SOURCES})
target_include_directories(bpp PUBLIC ${PROJECT_SOURCE_DIR}/app/bpp)
target_link_libraries(bpp PUBLIC Strict barf_core barf_preprocessor)

#
# reflex (scanner generator)
#

add_trison_source_and_test(${PROJECT_SOURCE_DIR}/app/reflex/reflex_parser.trison)

set(REFLEX_SOURCES
    app/reflex/reflex.hpp
    app/reflex/reflex_ast.cpp
    app/reflex/reflex_ast.hpp
    app/reflex/reflex_automaton.cpp
    app/reflex/reflex_automaton.hpp
    app/reflex/reflex_codespecsymbols.cpp
    app/reflex/reflex_codespecsymbols.hpp
    app/reflex/reflex_main.cpp
    app/reflex/reflex_options.cpp
    app/reflex/reflex_options.hpp
    app/reflex/reflex_parser.cpp
    app/reflex/reflex_parser.hpp
    app/reflex/reflex_parser.trison
)
add_executable(reflex ${REFLEX_SOURCES})
target_include_directories(reflex PUBLIC ${PROJECT_SOURCE_DIR}/app/reflex)
target_link_libraries(reflex PUBLIC Strict barf_commonlang_and_targetspec barf_core barf_preprocessor barf_regex)

#
# trison (parser generator)
#

add_trison_source_and_test(${PROJECT_SOURCE_DIR}/app/trison/trison_parser.trison)

set(TRISON_SOURCES
    app/trison/trison.hpp
    app/trison/trison_ast.cpp
    app/trison/trison_ast.hpp
    app/trison/trison_codespecsymbols.cpp
    app/trison/trison_codespecsymbols.hpp
    app/trison/trison_dpda.cpp
    app/trison/trison_dpda.hpp
    app/trison/trison_enums.cpp
    app/trison/trison_enums.hpp
    app/trison/trison_graph.cpp
    app/trison/trison_graph.hpp
    app/trison/trison_main.cpp
    app/trison/trison_npda.cpp
    app/trison/trison_npda.hpp
    app/trison/trison_options.cpp
    app/trison/trison_options.hpp
    app/trison/trison_parser.cpp
    app/trison/trison_parser.hpp
    app/trison/trison_parser.trison
)
add_executable(trison ${TRISON_SOURCES})
target_include_directories(trison PUBLIC ${PROJECT_SOURCE_DIR}/app/trison)
target_link_libraries(trison PUBLIC Strict barf_commonlang_and_targetspec barf_core barf_preprocessor)

###############################################################################
# Helper targets
###############################################################################

add_custom_target(all_parsers DEPENDS barf_preprocessor_parser barf_regex_parser barf_targetspec_parser reflex_parser trison_parser)
add_custom_target(all_scanners DEPENDS barf_commonlang_scanner barf_preprocessor_scanner)
add_custom_target(all_thingies DEPENDS all_parsers all_scanners)

add_custom_target(all_test_parsers DEPENDS test_barf_preprocessor_parser test_barf_regex_parser test_barf_targetspec_parser test_reflex_parser test_trison_parser)
add_custom_target(all_test_scanners DEPENDS test_barf_commonlang_scanner test_barf_preprocessor_scanner)
add_custom_target(all_test_thingies DEPENDS all_test_parsers all_test_scanners)

add_custom_target(all_diff_test_parsers DEPENDS diff_test_barf_preprocessor_parser diff_test_barf_regex_parser diff_test_barf_targetspec_parser diff_test_reflex_parser diff_test_trison_parser)
add_custom_target(all_diff_test_scanners DEPENDS diff_test_barf_commonlang_scanner diff_test_barf_preprocessor_scanner)
add_custom_target(all_diff_test_thingies DEPENDS all_diff_test_parsers all_diff_test_scanners)

add_custom_target(clean_all_parsers DEPENDS clean_barf_preprocessor_parser clean_barf_regex_parser clean_barf_targetspec_parser clean_reflex_parser clean_trison_parser)
add_custom_target(clean_all_scanners DEPENDS clean_barf_commonlang_scanner clean_barf_preprocessor_scanner)
add_custom_target(clean_all_thingies DEPENDS clean_all_parsers clean_all_scanners)

add_custom_target(clean_all_test_parsers DEPENDS clean_test_barf_preprocessor_parser clean_test_barf_regex_parser clean_test_barf_targetspec_parser clean_test_reflex_parser clean_test_trison_parser)
add_custom_target(clean_all_test_scanners DEPENDS clean_test_barf_commonlang_scanner clean_test_barf_preprocessor_scanner)
add_custom_target(clean_all_test_thingies DEPENDS clean_all_test_parsers clean_all_test_scanners)
