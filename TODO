// ///////////////////////////////////////////////////////////////////////////
// BARF general
// ///////////////////////////////////////////////////////////////////////////

* make separate configure.ac/makefile.am for example apps (maybe even a
  separate makefile for each one so it's obvious how to write makefiles that
  use BARF tools)
- change EmitWarning, EmitError and EmitFatalError to take the message first
  and an optional FiLoc second, with a default value of FiLoc::ms_invalid.
- guarantee that errors will be reported such that the line numbers never
  decrease.
- improve the parser/scanner/ast verbosity (i.e. prefix each line with a label)
- bug: getting "file not found" error when a file exists but the permissions
  are such that the user can't read it.
- change "general XXX parse error" into "general XXX parse error -- please
  report to xxx@yyy.com" so error reporting can be better
- move anything specific to BARF that is currently in core out of core and
  into a "common" directory (or think of a better name).  this will better
  separate and formalize the dependencies of each system.
- add optional-argument commandline options, and account for empty-argument
  required-argument options (e.g. `./reflex -I ""` will assert)
- descriptions should be indicate "finite-automaton-based scanners" and
  "pushdown-automaton-based parsers"
- error when any output file is the same as an input file
- shorten the enabled_verbosity names (and rename scanning/parsing spew to
  scanner/parser)
- add dot graph generation for ASTs
- add recursive block comments into barf_commonlang_scanner.reflex (think
  about how this will interact with other-languaged code blocks)
- rename OutputDir to OutputDirectory once the other options have been
  deprecated (this looks like it will happen once old trison is deprecated)
- add _barf_version to preprocessor shit?
- add targetspec versions -- so you can have multiple coexisting versions of
  the same target but at different versions.
- config.h-specified search path
- move trison/reflex stuff into lib/trison and lib/reflex? and only keep
  main, options and main header file in app dir (so test apps can link the
  libs and run tests)?  put stuff in Barf::Xxx namespace
- get rid of empty xxx_enums.xpp files (once BARF is near complete)
- move all AST usage to smart pointers to ease-ify stuff and to escape the
  woes of memory leaks (not like it matters that much in this context) --
  or do comprehensive deleting of stuff (which would probably set a better
  example for people who read the source code of the parsers/scanners).
- get rid of AST hierarchy overviews once doxygen docs are to some decent state
- use Ast::Directive::GetDirectiveString in error messages instead of
  creating the error messages by hand -- make all directives derive from
  Ast::Directive
- add "execution debug spew" mode for each program, which says what it's doing,
  e.g. opening files, doing type checking, env vars its using, etc
- file locations should be "2d range" -- a starting line/column and an ending
  line/column.  nonterminal expressions can then be the union of the file
  locations of their component parts.  this technique will be useful later in
  compiler design for debugging info.
- add metaprogramming stuff for integer types and compile time asserts
- make all AST classes dumb storage containers with external, non-member
  functions which operate on them (unless it's more practical to use member
  functions in a particular case).  this will make the separation of systems
  clearer.
- add some path-checking function -- i.e. to check for newlines and other stuff
- hide the AST structs' members via accessors (?)

// ///////////////////////////////////////////////////////////////////////////
// documentation
// ///////////////////////////////////////////////////////////////////////////

- table of contents inside each doxygen_pages page
- pyramidal documentation

// ///////////////////////////////////////////////////////////////////////////
// commonlang
// ///////////////////////////////////////////////////////////////////////////

- rename to something better (AppCommon, ToolCommon?) and put the common
  stuff from trison_main.cpp and reflex_main.cpp in there.
- target directives (including rule handlers) should accept multiple targets ?
  like
  %target.cpp_nostl,cpp_withstl,cpp_noexceptions %{ blah %}

// ///////////////////////////////////////////////////////////////////////////
// core
// ///////////////////////////////////////////////////////////////////////////

- do not read overflowed hex chars -- e.g. "\x1E8BA" should be "\x1E" "8BA"
- typedef Graph::Node::Index as a struct or an enum with a value
  UINT32_UPPER_BOUND (to force it to be unsigned) and use that everywhere for
  node index values.
- move trison's conflict messages into barf_message.h/cpp
- make a GraphNodeIndex vector type in barf_graph.h (replacing the ad-hoc
  vector<Uint32> used all over the place)

// ///////////////////////////////////////////////////////////////////////////
// targetspec
// ///////////////////////////////////////////////////////////////////////////

- allow using the value of previously declared directive ids as default values
- confirm that the declared name matches the filename -- or, should the
  targetspec's %target directive be removed (it is redundant) -- probably remove
- add new "add_optional_codespec" directive which requires the directive
  id of an add_optional_directive, for optional output files (like
  baseclasses which could be common to multiple parsers/scanners), then change
  add_codespec into add_required_codespec
  OR
  think of a good way to specify not-very-often-changing baseclass-like
  files which may be common to many parsers/scanners
- add error handling to the parser grammar

// ///////////////////////////////////////////////////////////////////////////
// codespec
// ///////////////////////////////////////////////////////////////////////////

- add comment/description element to each codespec symbol, so that you can
  print out a list of all available codespec symbols and their descriptions
  from the commandline for easier development
- allow targetspec-declared, primary-source-defined codespec symbols to use
  codespec symbols? (i.e. { printf(<{_rule_regex}); } ) ?

// ///////////////////////////////////////////////////////////////////////////
// preprocessor
// ///////////////////////////////////////////////////////////////////////////

- add a printf function
- add some way to use a different file location for errors/warnings
- add comments (C++ and C style)
- make _blah ids not be able to be defined in-file, they're reserved
- add redefine directive so you can do stuff like
  @<redefine(x)>@@<x+1>@@<end_redefine>@
- add eval directive so you can parse and execute a block of text as a preprocessor body.
- add "-[ \t\n]*2147483648" as a scanner token, so that number can be scanned
- add assignment operator? to do stuff like @<x=3*y>@
- add similar looping construct for arrays?
- caching for integer values on symbols (so getting the integer value of
  a symbol dereference is faster)
- maybe make the Textifier detect if a newline was just printed, so that
  it doesn't print unnecessary newlines when generating line directives
- see if the scanner can be half hand-scanned and half reflex-scanned, so that
  only the "code" portions are reflex-scanned.  this will allow for flexibility
  in defining the code section delimiters
- includes should use some sort of search path
- add boolean property for wether or not a particular symbol was referenced
  during preprocessing.

// ///////////////////////////////////////////////////////////////////////////
// regex
// ///////////////////////////////////////////////////////////////////////////

- do not read overflowed hex chars -- e.g. "\x1E8BA" should be "\x1E" "8BA"
- consider getting rid of \a \b \f \r \v and only having \t and \n, so that
  conditionals can use \a \b etc.
- emit error/warning when a non-printable char is encountered in a regex
  (must use a hex code instead)
- in graph printing, TT_INPUT_ATOM_RANGEs which include [ or ] as the ending
  char need to escape them
- generally fix up the escaping of characters in display strings and graphs
  to escape in the context of the regex.
- attempt to get rid of the initial epsilon transitions currently required
  in each regex
- make a parse-string method which returns a Regex::RegularExpression and
  possibly throws to indicate errors.
- use \c and \C to turn case sensitivity off/on -- this would not be a
  state-machine-determined thing, but it would influence character classes
  and such.
* implement ungreedy pattern matching (e.g. ".*?b" when given "aaabab" will
  match "aaab" instead of the greedy match of "aaabab").
* positive/negative lookahead matching
  "dumbfaces" -> "dumb(?=face)" matches "dumb"
  "dumbfaces" -> "dumb(?=erface)" doesn't match
  "dumbfaces" -> "dumb(?!face)" doesn't match
  "dumbfaces" -> "dumb(?!erface)" matches "dumb"
- fix up the \x stuff in the scanner (disallow \x alone, require a hex char)
- allow '\0' as a transition atom -- this will allow usage of regexes for
  binary data.  this will also require some thought, since the current
  implementation depends on '\0' being disallowed.
- move NodeData into separate file
- improve the DFA generation so that throwing an exception when there is
  a conditional conflict, it includes the file location that caused it.

// ///////////////////////////////////////////////////////////////////////////
// bpp
// ///////////////////////////////////////////////////////////////////////////

- add -D define options (like the C preprocessor)

// ///////////////////////////////////////////////////////////////////////////
// grope
// ///////////////////////////////////////////////////////////////////////////

- write it

// ///////////////////////////////////////////////////////////////////////////
// reflex
// ///////////////////////////////////////////////////////////////////////////

- add interactive/noninteractive option to target -- interactive will do
  char-by-char input, while noninteractive will do the faster chunk reading
  and buffering.
- allow "--predefine targets=" ?
- move the --with-line-directives option to be specified by the target, and
  overridable by the primary source
- add --emit-[only-]targets and --omit-targets to control generation of
  specific targets (e.g. if you wanted to not generate code for anything,
  but you did want a dot graph of the NFA).
- add API similar to yymore() for continuing the accepted string
- add commandline option to describe the return codes (?)
- hopefully merge some of the master trison_main.cpp and reflex_main.cpp stuff
- add "push accepted string back into buffer" API (call it Unaccept) to the
  generated scanner -- it should not be able to push any string, because the
  previous character is required.  this task would be easier implemented
  once the STL classes have been replaced.
- add targetspec directives for disabling stuff besides debug_spew -- like
  disabling Unaccept and the accessor methods DebugSpew and ScannerMode
- c++ target -- ability to set the debug spew ostream
* add option for line directives referencing codespecs (the default should be
  to refer to codespecs, for easier development)
- add option which prints the (reflex) targets available in the current search
  path and which directory each resides in.
- use smallest integer type to store state and transition indices, etc.
- add _reflex_version to the code generator (_barf_version?)
- the rule handler code block type should be specifiable by the targetspec
- add -D option for defining crap in the preprocessor stage -- before and
  after the .reflex source is read (e.g. to override the output filenames)
- warn about targetspec directive values that weren't referenced in the
  code generation (preprocessor) stage -- ones that don't appear at all in
  any codespec, not necessarily to indicate they weren't used in one particular
  case.
- add flex-like interactive scanner option -- if it's enabled, you must specify
  the "get next char" directive, otherwise you must specify the "read chars"
  directive (which reads a big chunk of input for faster reads)

// ///////////////////////////////////////////////////////////////////////////
// trison
// ///////////////////////////////////////////////////////////////////////////

- allow "--predefine targets=" ?
- move the --with-line-directives option to be specified by the target, and
  overridable by the primary source
- add --emit-[only-]targets and --omit-targets to control generation of
  specific targets (e.g. if you wanted to not generate code for anything,
  but you did want a dot graph of the NPDA).
- add commandline option to describe the return codes (?)
- hopefully merge some of the master trison_main.cpp and reflex_main.cpp stuff
- clean up the parsing so that it's less about passing crap around and more
  about using member variables of the parser (assign rule indices on the fly, etc)
- figure out how to guarantee branch uniqueness per Action_ branch list in C++ parser.
- add default values in trison cpp targetspec for Scan implementation
- you shouldn't have to specify %terminal 'X' for ascii chars.  you should
  just be able to use them (or maybe add as option)
- specifying any %target.xxx directive seems to add the target; stop this
* add option for line directives referencing codespecs (the default should be
  to refer to codespecs, for easier development)
- get rid of STL usage in C++ codespecs (separate target)
- the rule handler code block type should be specifiable by the targetspec
- add option which prints the (trison) targets available in the current search
  path and which directory each resides in.
- add %end keyword which matches the builtin terminal END_
- old trison: END_ shouldn't be acceptable by %error (verify this is an
  actual bug in the existing version)
- check for reduction rule variable name collisions
- call throw-away-token-actions on all tokens in token stack during parser
  destructor and at the end of the parse method
- add -D option for defining crap in the preprocessor stage -- before and
  after the .trison source is read (e.g. to override the output filenames)
- make directives parseable in any order?
- add a directive for what to do with unnamed tokens (because they might need
  to be thrown away)
- get rid of trison_message (and move the crap into barf_message)
- warn about targetspec directive values that weren't referenced in the
  code generation (preprocessor) stage -- ones that don't appear at all in
  any codespec, not necessarily to indicate they weren't used in one particular
  case.
- on generated parser, add "IsAtEndOfInput()" accessor -- you can't use
  the scanner to check this, because the parser might have read in extra
  lookaheads that put it at EOF.  you'll have to go by the lookahead queue
  in the parser.
