// 2019.12.25 - Copyright Victor Dods - Licensed under Apache 2.0

%targets cpp


%target.cpp.header_filename "using_raw_ptr_parser.hpp"
%target.cpp.implementation_filename "using_raw_ptr_parser.cpp"


%target.cpp.top_of_header_file %{
#pragma once

#include <iterator>
#include <stdexcept>

class Base;
class Scanner;
%}
%target.cpp.class_name Parser
%target.cpp.bottom_of_class {
    void set_istream_iterator (std::istream_iterator<char> it);

    bool has_scanner () const { return m_scanner != nullptr; }
    Scanner &scanner () {
        if (m_scanner == nullptr)
            throw std::runtime_error("no scanner defined yet; call set_istream_iterator");
        return *m_scanner;
    }

    bool recoverable_error_encountered () const { return m_recoverable_error_encountered; }
    void record_recoverable_error (std::string const &message);

private:

    std::unique_ptr<Scanner> m_scanner;
    bool m_recoverable_error_encountered;
}

%target.cpp.bottom_of_header_file %{
%}


%target.cpp.top_of_implementation_file %{
#include "using_raw_ptr_ast.hpp"
#include "using_raw_ptr_scanner.hpp"

void Parser::record_recoverable_error (std::string const &message) {
    m_recoverable_error_encountered = true;
    std::cerr << "error: " << message << '\n';
}
%}
%target.cpp.constructor_actions {
    m_recoverable_error_encountered = false;
}
%target.cpp.destructor_actions {
}
%target.cpp.top_of_parse_method_actions %{
%}
%target.cpp.bottom_of_implementation_file %{
void Parser::set_istream_iterator (std::istream_iterator<char> it)
{
    // This will delete any existing pointer owned by m_scanner.
    // Note that in C++14, we would be able to use std::make_unique.
    m_scanner = std::unique_ptr<Scanner>(new Scanner());
    m_scanner->IstreamIterator(it);
    ResetForNewInput();
}
%}


%target.cpp.token_data_type "Base *"
%target.cpp.token_data_default "nullptr"
%target.cpp.custom_token_data_type_cast "static_cast"
%target.cpp.ostream_print_token_data {
    if (token_data == nullptr)
        stream << "nullptr";
    else
        token_data->print(stream);
    return stream;
}
%target.cpp.throw_away_token_actions {
    std::cout << "Executing throw_away_token_actions on " << token_data << '\n';
    delete token_data;
}
%target.cpp.scan_actions {
    assert(m_scanner != nullptr);
    return m_scanner->Scan();
}
%target.cpp.reset_for_new_input_actions {
    m_recoverable_error_encountered = false;
}


%target.cpp.generate_debug_spew_code


%terminal BAD_TOKEN
%terminal LEAF
%terminal '(' ')'


%prec.left %default


%default_parse_nonterminal root

%%

%nonterminal root
:
    expression_list:el %end
    %target.cpp {
        return el;
    }
;

%nonterminal expression
:
    LEAF:leaf
    %target.cpp {
        return leaf;
    }
|
    '(' expression_list:el ')'
    %target.cpp {
        return el;
    }
|
    '(' expression_list:el %end
    %target.cpp {
        record_recoverable_error("unterminated parenthesized expression list");
        return el;
    }
|
    '(' %error[![%end|')']] ')'
    %target.cpp {
        record_recoverable_error("parse error in parenthesized expression");
        return new Tree();
    }
|
    '(' %error[![%end|')']] %end
    %target.cpp {
        record_recoverable_error("unterminated parenthesized expression");
        return new Tree();
    }
|
    %error[![%end|')']] ')'
    %target.cpp {
        record_recoverable_error("unexpected ')' in expression");
        return new Tree();
    }
;

%nonterminal expression_list %type.cpp "Tree *"
:
    expression_list:el expression:e
    %target.cpp {
        el->append(e);
        return el;
    }
|
    expression_list:el %error[![%end|')']] %lookahead[%end|')']
    %target.cpp {
        record_recoverable_error("parse error in expression_list");
        return el;
    }
|
    %empty %lookahead[![%error]]
    %target.cpp {
        return new Tree();
    }
;
