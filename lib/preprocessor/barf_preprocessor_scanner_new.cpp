// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// barf_preprocessor_scanner_new.cpp generated by reflex
// from barf_preprocessor_scanner.reflex using reflex.cpp.targetspec and reflex.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "barf_preprocessor_scanner_new.hpp"

#include <iostream>

#define REFLEX_CPP_DEBUG_SPEW_(spew_code) if (DebugSpew()) { spew_code; }


#line 72 "barf_preprocessor_scanner.reflex"

#include "barf_preprocessor_ast.hpp"

#define SPEW(x) cerr << x << endl
// #define SPEW(x)

namespace Barf {
namespace Preprocessor {

bool ScannerNew::OpenFile (string const &input_filename)
{
    bool open_succeeded = InputBase::OpenFile(input_filename);
    if (open_succeeded)
        ResetForNewInput_();
    return open_succeeded;
}

void ScannerNew::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    InputBase::OpenString(input_string, input_name, use_line_numbers);
    ResetForNewInput_();
}

void ScannerNew::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    InputBase::OpenUsingStream(input_stream, input_name, use_line_numbers);
    ResetForNewInput_();
}

Parser::Token::Type ScannerNew::ParseKeyword (string const &accepted_string, Ast::Base **token)
{
    assert(token != NULL);
    assert(*token == NULL);

    if (accepted_string == "undefine") return Parser::Token::UNDEFINE;
    if (accepted_string == "declare_array") return Parser::Token::DECLARE_ARRAY;
    if (accepted_string == "declare_map") return Parser::Token::DECLARE_MAP;
    if (accepted_string == "define") return Parser::Token::DEFINE;
    if (accepted_string == "end_define") return Parser::Token::END_DEFINE;
    if (accepted_string == "loop") return Parser::Token::LOOP;
    if (accepted_string == "end_loop") return Parser::Token::END_LOOP;
    if (accepted_string == "for_each") return Parser::Token::FOR_EACH;
    if (accepted_string == "end_for_each") return Parser::Token::END_FOR_EACH;
    if (accepted_string == "include") return Parser::Token::INCLUDE;
    if (accepted_string == "sandbox_include") return Parser::Token::SANDBOX_INCLUDE;
    if (accepted_string == "sizeof") return Parser::Token::SIZEOF;
    if (accepted_string == "is_defined") return Parser::Token::IS_DEFINED;
    if (accepted_string == "dump_symbol_table") return Parser::Token::DUMP_SYMBOL_TABLE;
    if (accepted_string == "if") return Parser::Token::IF;
    if (accepted_string == "else") return Parser::Token::ELSE;
    if (accepted_string == "else_if") return Parser::Token::ELSE_IF;
    if (accepted_string == "end_if") return Parser::Token::END_IF;
    if (accepted_string == "int") return Parser::Token::KEYWORD_INT;
    if (accepted_string == "string") return Parser::Token::KEYWORD_STRING;
    if (accepted_string == "string_length") return Parser::Token::STRING_LENGTH;
    if (accepted_string == "warning") return Parser::Token::WARNING;
    if (accepted_string == "error") return Parser::Token::ERROR;
    if (accepted_string == "fatal_error") return Parser::Token::FATAL_ERROR;

    *token = new Ast::Id(accepted_string, GetFiLoc());
    return Parser::Token::ID;
}

#line 78 "barf_preprocessor_scanner_new.cpp"

ScannerNew::ScannerNew ()
    :
    ReflexCpp_::AutomatonApparatus_(
        ms_state_table_,
        ms_state_count_,
        ms_transition_table_,
        ms_transition_count_,
        ms_accept_handler_count_,
        static_cast<ReflexCpp_::InputApparatus_::IsInputAtEndMethod_>(&ScannerNew::IsInputAtEnd_),
        static_cast<ReflexCpp_::InputApparatus_::ReadNextAtomMethod_>(&ScannerNew::ReadNextAtom_))
{
    // one-time initializations
    DebugSpew(false);
    // per-input initializations
    ResetForNewInput_();

}

ScannerNew::~ScannerNew ()
{
}

ScannerNew::Mode::Name ScannerNew::ScannerMode () const
{
    assert(InitialState_() != NULL);
    ReflexCpp_::Size_ initial_node_index = InitialState_() - ms_state_table_;
    assert(initial_node_index < ms_state_count_);
    switch (initial_node_index)
    {
        default: assert(false && "invalid initial node index -- this should never happen"); return Mode::START_;
        case 0: return Mode::EXPECTING_END_OF_FILE;
        case 3: return Mode::READING_BODY;
        case 12: return Mode::READING_CODE;
        case 26: return Mode::READING_CODE_STRING_LITERAL_GUTS;
        case 42: return Mode::TRANSITION_TO_CODE;
    }
}

void ScannerNew::ScannerMode (Mode::Name mode)
{
    assert(
        mode == Mode::EXPECTING_END_OF_FILE ||
        mode == Mode::READING_BODY ||
        mode == Mode::READING_CODE ||
        mode == Mode::READING_CODE_STRING_LITERAL_GUTS ||
        mode == Mode::TRANSITION_TO_CODE ||
        (false && "invalid Mode::Name"));
    InitialState_(ms_state_table_ + mode);
    REFLEX_CPP_DEBUG_SPEW_(std::cerr << "*** scanner: transitioning to mode ")
    if (false) { }
    else if (mode == Mode::EXPECTING_END_OF_FILE) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "EXPECTING_END_OF_FILE") }
    else if (mode == Mode::READING_BODY) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "READING_BODY") }
    else if (mode == Mode::READING_CODE) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "READING_CODE") }
    else if (mode == Mode::READING_CODE_STRING_LITERAL_GUTS) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "READING_CODE_STRING_LITERAL_GUTS") }
    else if (mode == Mode::TRANSITION_TO_CODE) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "TRANSITION_TO_CODE") }
    REFLEX_CPP_DEBUG_SPEW_(std::cerr << std::endl)
    assert(ScannerMode() == mode);
}

Parser::Token::Type ScannerNew::Scan (
#line 43 "barf_preprocessor_scanner.reflex"
 Ast::Base **token 
#line 142 "barf_preprocessor_scanner_new.cpp"
)
{

#line 135 "barf_preprocessor_scanner.reflex"

    assert(token != NULL);
    assert(*token == NULL);

#line 151 "barf_preprocessor_scanner_new.cpp"

    std::string accepted_string;
    // this is the main scanner loop.  it only breaks when an accept handler
    // returns or after the unmatched character handler, if certain conditions
    // exist (see comments below).
    while (true)
    {
        bool was_at_end_of_input_ = IsAtEndOfInput();

        ReflexCpp_::Uint32_ accept_handler_index_ = RunDfa_(accepted_string);
        // if no valid accept_handler_index_ was returned, then accepted_string
        // was filled with the first unaccepted input atom (i.e. the rejected
        // atom).  we'll call the HandleUnmatchedCharacter_ method on it.
        if (accept_handler_index_ >= ms_accept_handler_count_)
        {
            // if we were already at the end of input and no
            // rule was matched, break out of the loop.
            if (was_at_end_of_input_)
                break;

            assert(accepted_string.length() == 1);
            ReflexCpp_::Uint8_ rejected_atom = accepted_string[0];
            REFLEX_CPP_DEBUG_SPEW_(
                std::cerr << "*** scanner: rejecting atom '";
                DebugPrintAtom_(rejected_atom);
                std::cerr << '\'' << std::endl)

            // execute the rejected-atom-handling actions.  the rejected atom
            // is in rejected_atom.  the loop is so a break statement inside
            // rejection_actions doesn't break out of the main scanner loop.
            do
            {

#line 159 "barf_preprocessor_scanner.reflex"

    EmitError("unrecognized character " + GetCharLiteral(rejected_atom), GetFiLoc());

#line 189 "barf_preprocessor_scanner_new.cpp"

            }
            while (false);
        }
        // otherwise, call the appropriate accept handler code.
        else
        {
            REFLEX_CPP_DEBUG_SPEW_(
                std::cerr << "*** scanner: accepting string ";
                DebugPrintString_(accepted_string);
                std::cerr << std::endl)
            // execute the appropriate accept handler.
            // the accepted string is in accepted_string.
            switch (accept_handler_index_)
            {
                case 0:
                {

#line 433 "barf_preprocessor_scanner.reflex"

        SPEW("EXPECTING_END_OF_FILE - ({ANYTHING}*) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(false && "this should never happen");
        return Parser::Token::BAD_TOKEN;
    
#line 214 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 1:
                {

#line 440 "barf_preprocessor_scanner.reflex"

        SPEW("EXPECTING_END_OF_FILE - ({END_OF_FILE}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        return Parser::Token::END_;
    
#line 227 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 2:
                {

#line 223 "barf_preprocessor_scanner.reflex"

        SPEW("READING_BODY - (([^<]|<[^<|{])*<?<\\|) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(accepted_string.length() >= 2);
        *token = new Text(accepted_string.c_str(), accepted_string.length()-2, GetFiLoc());
        IncrementLineNumber(GetNewlineCount(accepted_string));
        m_is_reading_newline_sensitive_code = true;
        ScannerMode(Mode::TRANSITION_TO_CODE);
        return Parser::Token::TEXT;
    
#line 245 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 3:
                {

#line 234 "barf_preprocessor_scanner.reflex"

        SPEW("READING_BODY - (([^<]|<[^<|{])*<?<\\{) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(accepted_string.length() >= 2);
        *token = new Text(accepted_string.c_str(), accepted_string.length()-2, GetFiLoc());
        IncrementLineNumber(GetNewlineCount(accepted_string));
        m_is_reading_newline_sensitive_code = false;
        ScannerMode(Mode::TRANSITION_TO_CODE);
        return Parser::Token::TEXT;
    
#line 263 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 4:
                {

#line 245 "barf_preprocessor_scanner.reflex"

        SPEW("READING_BODY - (([^<]|<[^<|{])*<?{END_OF_FILE}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(accepted_string.length() >= 0);
        *token = new Text(accepted_string.c_str(), accepted_string.length(), GetFiLoc());
        IncrementLineNumber(GetNewlineCount(accepted_string));
        ScannerMode(Mode::EXPECTING_END_OF_FILE);
        return Parser::Token::END_;
    
#line 280 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 5:
                {

#line 273 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - ({WHITESPACE}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        // ignore whitespace
    
#line 293 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 6:
                {

#line 279 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - ({NEWLINE}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        IncrementLineNumber(1);
        if (m_is_reading_newline_sensitive_code)
        {
            ScannerMode(Mode::READING_BODY);
            return Parser::Token::CODE_NEWLINE;
        }
    
#line 311 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 7:
                {

#line 290 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - ({END_OF_FILE}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        ScannerMode(Mode::EXPECTING_END_OF_FILE);
        if (m_is_reading_newline_sensitive_code)
            return Parser::Token::CODE_NEWLINE;
    
#line 326 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 8:
                {

#line 298 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - (\\}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        if (!m_is_reading_newline_sensitive_code)
            return Parser::Token::END_CODE;
        EmitError("unexpected '}' encountered", GetFiLoc());
        return Parser::Token::BAD_TOKEN;
    
#line 342 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 9:
                {

#line 307 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - ({OPERATOR}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        return Parser::Token::Type(accepted_string[0]);
    
#line 355 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 10:
                {

#line 313 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - ({ID}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        return ParseKeyword(accepted_string, token);
    
#line 368 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 11:
                {

#line 319 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - ({INTEGER_LITERAL}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        Sint32 value = 0;
        istringstream in(accepted_string);
        in >> value;
        *token = new Integer(value, GetFiLoc());
        return Parser::Token::INTEGER_LITERAL;
    
#line 385 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 12:
                {

#line 329 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - (\") = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        *token = new Text("", GetFiLoc());
        ScannerMode(Mode::READING_CODE_STRING_LITERAL_GUTS);
    
#line 399 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 13:
                {

#line 336 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - ({END_OF_FILE}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        EmitError("unexpected end of file encountered within preprocessor code section", GetFiLoc());
        return Parser::Token::END_;
    
#line 413 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 14:
                {

#line 343 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE - (.) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        EmitError("unrecognized character encountered within preprocessor code section", GetFiLoc());
        return Parser::Token::BAD_TOKEN;
    
#line 427 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 15:
                {

#line 353 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - ({OCT_CHAR}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(*token != NULL);
        assert(accepted_string.length() >= 3);
        assert(accepted_string[0] == '\\');
        assert(accepted_string[1] == '0');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 8);
        if (value >= 0x100)
            EmitError("octal character literal value out of range (" + accepted_string + ")", GetFiLoc());
        Dsc<Text *>(*token)->AppendChar(Uint8(value));
    
#line 447 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 16:
                {

#line 366 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - ({HEX_CHAR}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(*token != NULL);
        assert(accepted_string.length() >= 3);
        assert(accepted_string[0] == '\\');
        assert(accepted_string[1] == 'x');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 16);
        if (value >= 0x100)
            EmitError("hexadecimal character literal value out of range (" + accepted_string + ")", GetFiLoc());
        Dsc<Text *>(*token)->AppendChar(Uint8(value));
    
#line 467 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 17:
                {

#line 379 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - ({STRING_ESC_CHAR}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(*token != NULL);
        assert(accepted_string.length() == 2);
        assert(accepted_string[0] == '\\');
        Dsc<Text *>(*token)->AppendChar(GetEscapedChar(Uint8(accepted_string[1])));
    
#line 483 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 18:
                {

#line 388 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - ({STRING_BAD_ESC_CHAR}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(*token != NULL);
        assert(accepted_string.length() == 2);
        assert(accepted_string[0] == '\\');
        EmitError("malformed string literal escape code -- backslash followed by " + GetCharLiteral(accepted_string[1]), GetFiLoc());
    
#line 499 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 19:
                {

#line 397 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - ({STRING_NORMAL_CHAR}+) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(*token != NULL);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        Dsc<Text *>(*token)->AppendText(accepted_string);
    
#line 514 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 20:
                {

#line 405 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - (\") = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(*token != NULL);
        ScannerMode(Mode::READING_CODE);
        return Parser::Token::STRING_LITERAL;
    
#line 529 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 21:
                {

#line 413 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - (\\\\?{END_OF_FILE}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        EmitError("unterminated string literal", GetFiLoc());
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        return Parser::Token::END_;
    
#line 546 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 22:
                {

#line 423 "barf_preprocessor_scanner.reflex"

        SPEW("READING_CODE_STRING_LITERAL_GUTS - ({ANYTHING}) = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        assert(*token != NULL);
        EmitError("ignoring unexpected character " + GetCharLiteral(accepted_string[0]) + " in string literal", GetFiLoc());
    
#line 560 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                case 23:
                {

#line 260 "barf_preprocessor_scanner.reflex"

        SPEW("TRANSITION_TO_CODE - () = " << GetStringLiteral(accepted_string) << " @ " << GetFiLoc());
        ScannerMode(Mode::READING_CODE);
        if (m_is_reading_newline_sensitive_code)
            return Parser::Token::CODE_LINE;
        else
            return Parser::Token::START_CODE;
    
#line 577 "barf_preprocessor_scanner_new.cpp"

                }
                break;

                default: assert(false && "this should never happen"); break;
            }
        }
    }


#line 139 "barf_preprocessor_scanner.reflex"

    assert(false && "you didn't handle EOF properly");
    return Parser::Token::END_;

#line 593 "barf_preprocessor_scanner_new.cpp"
}

bool ScannerNew::IsInputAtEnd_ ()
{

#line 153 "barf_preprocessor_scanner.reflex"

    return In().peek() == char_traits<char>::eof();

#line 603 "barf_preprocessor_scanner_new.cpp"
}

ReflexCpp_::Uint8_ ScannerNew::ReadNextAtom_ ()
{

#line 156 "barf_preprocessor_scanner.reflex"

    return In().get();

#line 613 "barf_preprocessor_scanner_new.cpp"
}

void ScannerNew::ResetForNewInput_ ()
{
    ReflexCpp_::AutomatonApparatus_::ResetForNewInput_(ms_state_table_ + Mode::START_);


#line 162 "barf_preprocessor_scanner.reflex"


#line 624 "barf_preprocessor_scanner_new.cpp"
}

void ScannerNew::DebugPrintAtom_ (ReflexCpp_::Uint8_ atom)
{
    if (atom == '\\')                    std::cerr << "\\\\";
    else if (atom == '"')                std::cerr << "\\\"";
    else if (atom >= ' ' && atom <= '~') std::cerr << atom;
    else if (atom == '\n')               std::cerr << "\\n";
    else if (atom == '\t')               std::cerr << "\\t";
    else if (atom == '\0')               std::cerr << "\\0";
    else
    {
        std::cerr.width(2);
        std::cerr << "\\x" << std::hex << std::uppercase << ReflexCpp_::Uint16_(atom);
        std::cerr.width(1);
    }
}

void ScannerNew::DebugPrintString_ (std::string const &s)
{
    // save the existing std::cerr properties for later restoration
    std::ios_base::fmtflags saved_stream_flags = std::cerr.flags();
    char saved_stream_fill = std::cerr.fill();
    std::streamsize saved_stream_width = std::cerr.width();
    std::streamsize saved_stream_precision = std::cerr.precision();

    // clear all format flags to a neutral state
    std::cerr.unsetf(
        std::ios_base::boolalpha|std::ios_base::dec|std::ios_base::fixed|
        std::ios_base::hex|std::ios_base::internal|std::ios_base::left|
        std::ios_base::oct|std::ios_base::right|std::ios_base::scientific|
        std::ios_base::showbase|std::ios_base::showpoint|std::ios_base::showpos|
        std::ios_base::skipws|std::ios_base::unitbuf|std::ios_base::uppercase|
        std::ios_base::adjustfield|std::ios_base::basefield|std::ios_base::floatfield);
    // the '0' char is used hex escape chars, which always have width 2
    std::cerr.fill('0');

    std::cerr << '"';
    for (std::string::size_type i = 0; i < s.size(); ++i)
        DebugPrintAtom_(s[i]);
    std::cerr << '"';

    // restore the saved std::cerr properties
    std::cerr.setf(saved_stream_flags);
    std::cerr.fill(saved_stream_fill);
    std::cerr.width(saved_stream_width);
    std::cerr.precision(saved_stream_precision);
}

// the order of the states indicates priority (only for accept states).
// the lower the state's index in this array, the higher its priority.
ReflexCpp_::AutomatonApparatus_::DfaState_ const ScannerNew::ms_state_table_[] =
{
    { 0, 2, ms_transition_table_+0 },
    { 0, 1, ms_transition_table_+2 },
    { 0, 1, ms_transition_table_+3 },
    { 24, 2, ms_transition_table_+4 },
    { 24, 3, ms_transition_table_+6 },
    { 24, 2, ms_transition_table_+9 },
    { 24, 6, ms_transition_table_+11 },
    { 24, 2, ms_transition_table_+17 },
    { 3, 0, ms_transition_table_+19 },
    { 2, 0, ms_transition_table_+19 },
    { 4, 6, ms_transition_table_+19 },
    { 4, 3, ms_transition_table_+25 },
    { 24, 2, ms_transition_table_+28 },
    { 24, 28, ms_transition_table_+30 },
    { 14, 0, ms_transition_table_+58 },
    { 5, 0, ms_transition_table_+58 },
    { 6, 0, ms_transition_table_+58 },
    { 9, 0, ms_transition_table_+58 },
    { 12, 0, ms_transition_table_+58 },
    { 11, 0, ms_transition_table_+58 },
    { 14, 1, ms_transition_table_+58 },
    { 11, 1, ms_transition_table_+59 },
    { 10, 4, ms_transition_table_+60 },
    { 10, 4, ms_transition_table_+64 },
    { 8, 0, ms_transition_table_+68 },
    { 7, 28, ms_transition_table_+68 },
    { 24, 2, ms_transition_table_+96 },
    { 24, 9, ms_transition_table_+98 },
    { 22, 0, ms_transition_table_+107 },
    { 19, 4, ms_transition_table_+107 },
    { 19, 4, ms_transition_table_+111 },
    { 20, 0, ms_transition_table_+115 },
    { 22, 2, ms_transition_table_+115 },
    { 22, 7, ms_transition_table_+117 },
    { 18, 0, ms_transition_table_+124 },
    { 17, 0, ms_transition_table_+124 },
    { 17, 1, ms_transition_table_+124 },
    { 15, 1, ms_transition_table_+125 },
    { 17, 3, ms_transition_table_+126 },
    { 16, 3, ms_transition_table_+129 },
    { 21, 7, ms_transition_table_+132 },
    { 21, 9, ms_transition_table_+139 },
    { 23, 0, ms_transition_table_+148 }
};
ReflexCpp_::Size_ const ScannerNew::ms_state_count_ = sizeof(ScannerNew::ms_state_table_) / sizeof(ReflexCpp_::AutomatonApparatus_::DfaState_);

ReflexCpp_::AutomatonApparatus_::DfaTransition_ const ScannerNew::ms_transition_table_[] =
{
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+1 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+1 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+1 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+11 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 60, 60, ms_state_table_+5 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 59, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 61, 255, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+6 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+10 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 60, 60, ms_state_table_+7 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+8 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+9 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 59, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 61, 122, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 125, 255, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+8 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+9 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 60, 60, ms_state_table_+7 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+8 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+9 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 59, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 61, 122, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 125, 255, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 60, 60, ms_state_table_+5 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 59, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 61, 255, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+13 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+25 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 9, 9, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 10, 10, ms_state_table_+16 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 32, 32, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 33, 33, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+18 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+19 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 64, 64, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 91, 91, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 93, 93, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 94, 94, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+22 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 96, 96, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 125, 125, ms_state_table_+24 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 36, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 37, 38, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 47, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 57, ms_state_table_+20 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 58, 59, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 60, 63, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+22 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+22 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 126, 255, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+21 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+21 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 9, 9, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 10, 10, ms_state_table_+16 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 32, 32, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 33, 33, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+18 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+19 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 64, 64, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 91, 91, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 93, 93, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 94, 94, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+22 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 96, 96, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 125, 125, ms_state_table_+24 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 36, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 37, 38, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 47, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 57, ms_state_table_+20 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 58, 59, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 60, 63, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+22 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+22 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 126, 255, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+27 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+41 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+28 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+28 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+28 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+36 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 120, 120, ms_state_table_+38 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 31, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 47, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 119, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 121, 126, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 55, ms_state_table_+37 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 55, ms_state_table_+37 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 70, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 102, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 70, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 102, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+36 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 120, 120, ms_state_table_+38 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 31, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 47, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 119, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 121, 126, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+28 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+28 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+28 }
};
ReflexCpp_::Size_ const ScannerNew::ms_transition_count_ = sizeof(ScannerNew::ms_transition_table_) / sizeof(ReflexCpp_::AutomatonApparatus_::DfaTransition_);

ReflexCpp_::Uint32_ const ScannerNew::ms_accept_handler_count_ = 24;


#line 143 "barf_preprocessor_scanner.reflex"

} // end of namespace Preprocessor
} // end of namespace Barf

#line 885 "barf_preprocessor_scanner_new.cpp"
