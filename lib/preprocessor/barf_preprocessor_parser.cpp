// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// barf_preprocessor_parser.cpp generated by trison
// from barf_preprocessor_parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "barf_preprocessor_parser.hpp"


#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 60 "barf_preprocessor_parser.trison"

#include "barf_preprocessor_ast.hpp"
#include "barf_preprocessor_scanner.hpp"

namespace Barf {
namespace Preprocessor {

#line 21 "barf_preprocessor_parser.cpp"

Parser::Parser ()
{
    DebugSpew(false);


#line 67 "barf_preprocessor_parser.trison"

    m_scanner = new Scanner();

#line 32 "barf_preprocessor_parser.cpp"
}

Parser::~Parser ()
{
    // clean up dynamically allocated memory.
    ClearStack_();
    ClearLookaheadQueue_();



#line 70 "barf_preprocessor_parser.trison"

    delete m_scanner;
    m_scanner = NULL;

#line 48 "barf_preprocessor_parser.cpp"
}

void Parser::ResetForNewInput ()
{
    // clean up stuff that might be hanging around from the last parse's input.
    ClearStack_();
    ClearLookaheadQueue_();
}

Parser::ParserReturnCode Parser::Parse (Ast::Base * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{
    return Parse_(return_token, nonterminal_to_parse);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

Parser::ParserReturnCode Parser::Parse_ (Ast::Base * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 74 "barf_preprocessor_parser.cpp"
 << " starting parse" << std::endl)

    ParserReturnCode parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
    *return_token = NULL;

    // make sure all our structures are empty and variables initialized.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();
    m_is_in_error_panic_ = false;

    // push the initial state of the DPDA.
    assert((false
           || nonterminal_to_parse == ParseNonterminal::body
           || nonterminal_to_parse == ParseNonterminal::code
           || nonterminal_to_parse == ParseNonterminal::code_body
           || nonterminal_to_parse == ParseNonterminal::conditional_series
           || nonterminal_to_parse == ParseNonterminal::conditional_series_end
           || nonterminal_to_parse == ParseNonterminal::define
           || nonterminal_to_parse == ParseNonterminal::define_array_element
           || nonterminal_to_parse == ParseNonterminal::define_map_element
           || nonterminal_to_parse == ParseNonterminal::define_scalar
           || nonterminal_to_parse == ParseNonterminal::else_if_statement
           || nonterminal_to_parse == ParseNonterminal::else_statement
           || nonterminal_to_parse == ParseNonterminal::end_define
           || nonterminal_to_parse == ParseNonterminal::end_for_each
           || nonterminal_to_parse == ParseNonterminal::end_if
           || nonterminal_to_parse == ParseNonterminal::end_loop
           || nonterminal_to_parse == ParseNonterminal::executable
           || nonterminal_to_parse == ParseNonterminal::expression
           || nonterminal_to_parse == ParseNonterminal::for_each
           || nonterminal_to_parse == ParseNonterminal::if_statement
           || nonterminal_to_parse == ParseNonterminal::loop
           ) && "invalid nonterminal_to_parse");
    m_stack_.push_back(StackElement_(nonterminal_to_parse, NULL));
    // main parser loop
    while (true)
    {
        if (m_is_in_error_panic_)
        {
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 119 "barf_preprocessor_parser.cpp"
 << " begin error panic" << std::endl)

            // the special Terminal::END_ can not be eaten by error panic.
            if (Lookahead_(0).m_id == Terminal::END_)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 128 "barf_preprocessor_parser.cpp"
 << " end error panic; abort (error panic can't eat Terminal::END_)" << std::endl)
                // parser_return_code_ and return_token are already appropriately
                // set, so just break out of the main loop.
                break;
            }

            while (true)
            {
                // get the current state (top of the stack)
                assert(!m_stack_.empty());
                BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
                assert(current_state_index < ms_state_count_);
                State_ const &current_state = ms_state_table_[current_state_index];
                TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr))

                // check if the current state accepts ERROR_ (only need to check the
                // non-default transitions, since the default transition can't be a shift).
                bool accepts_error = false;
                for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                       *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                     transition != transition_end;
                     ++transition)
                {
                    if (transition->m_type == Transition_::SHIFT && transition->m_lookahead_count == 1 && *transition->m_lookahead_sequence == Terminal::ERROR_)
                    {
                        accepts_error = true;
                        break;
                    }
                }

                if (accepts_error)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 164 "barf_preprocessor_parser.cpp"
 << " end error panic; success (current state accepts ERROR_ token)" << std::endl)
                    // if the current state accepts error, throw away the first lookahead data
                    // (but don't pop the front of the lookahead queue).  then clear the thrown-
                    // away token data, and set the token id to ERROR_.
                    assert(!m_lookahead_queue_.empty());
                    ThrowAwayToken_(m_lookahead_queue_[0].m_data);
                    m_lookahead_queue_[0].m_id = Terminal::ERROR_;
                    m_lookahead_queue_[0].m_data = NULL;
                    m_is_in_error_panic_ = false;
                    break;
                }
                else
                {
                    if (m_stack_.size() > 1)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 183 "barf_preprocessor_parser.cpp"
 << " continue error panic; pop stack (current state doesn't accept ERROR_ token)" << std::endl)
                    }
                    else
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 191 "barf_preprocessor_parser.cpp"
 << " end error panic; abort (stack is empty)" << std::endl)
                    }
                    // otherwise throw away the data at the top of the stack, and pop the stack.
                    // then if the stack is empty, an unhandled parse error occurred.
                    ThrowAwayToken_(m_stack_.rbegin()->m_token_data);
                    m_stack_.resize(m_stack_.size()-1);
                    if (m_stack_.empty())
                    {
                        // parser_return_code_ and return_token are already appropriately
                        // set, so just break out of the inner loop.
                        break;
                    }
                }
            }

            // if we're still in error panic, then this indicates that we bottomed-
            // out the stack and it's an unhandled parse error, so break from the
            // main loop.
            if (m_is_in_error_panic_)
                break;
        }
        else // !m_is_in_error_panic_
        {
            // get the current state (top of the stack)
            assert(!m_stack_.empty());
            BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
            assert(current_state_index < ms_state_count_);
            State_ const &current_state = ms_state_table_[current_state_index];
            TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr))

            // TODO -- binary search for faster transition matching?

            // loop through the current state's transitions and see if any match
            bool transition_exercised = false;
            BarfCpp_::Uint32 tested_lookahead_count = 0;
            for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                   *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                transition != transition_end;
                ++transition)
            {
                // the non-default transitions can only be REDUCE or SHIFT
                assert(transition->m_type == Transition_::REDUCE || transition->m_type == Transition_::SHIFT);

                // check if the lookaheads match those of this transition.
                bool lookahead_sequence_matched = true;
                for (BarfCpp_::Uint32 i = 0; i < transition->m_lookahead_count; ++i)
                {
                    if (Lookahead_(i).m_id != transition->m_lookahead_sequence[i])
                    {
                        lookahead_sequence_matched = false;
                        break;
                    }
                    else
                    {
                        if (i+1 > tested_lookahead_count)
                            tested_lookahead_count = i+1;
                    }
                }

                // if all the lookaheads matched, then exercise this transition,
                // and break out of this inner (transition) loop.
                if (lookahead_sequence_matched)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 258 "barf_preprocessor_parser.cpp"
 << " current (relevant) lookahead(s):")
                    for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i))
                    }
                    TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl)

                    ExerciseTransition_(*transition);
                    transition_exercised = true;
                    break;
                }
            }

            // if no transition was exercised, then exercise the default transition
            if (!transition_exercised)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 278 "barf_preprocessor_parser.cpp"
 << " current (relevant) lookahead(s):")
                for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i))
                }
                TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl)

                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 289 "barf_preprocessor_parser.cpp"
 << " exercising default transition" << std::endl)
                // exercise the default transition.  a return value of true indicates
                // that the parser should return.
                if (ExerciseTransition_(*current_state.m_transition_table))
                {
                    // the token (data) on the top of the stack is the return token.
                    // set parser_return_code_ and assign the top stack token data to
                    // *return_token and then break out of the main parser loop.
                    assert(m_stack_[0].m_state_index == BarfCpp_::Uint32(nonterminal_to_parse));
                    assert(m_stack_.size() == 2);
                    parser_return_code_ = PRC_SUCCESS;
                    *return_token = m_stack_.rbegin()->m_token_data;
                    // take the return token out of the stack, so it's not thrown away
                    // when we clear the stack later.
                    m_stack_.rbegin()->m_token_data = NULL;
                    break;
                }
            }
        }
    }

    // clear the stack, because we won't need it for the next parse.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();

    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_SUCCESS) std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 320 "barf_preprocessor_parser.cpp"
 << " Parse() is returning PRC_SUCCESS" << std::endl)
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_UNHANDLED_PARSE_ERROR) std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 325 "barf_preprocessor_parser.cpp"
 << " Parse() is returning PRC_UNHANDLED_PARSE_ERROR" << std::endl)

    return parser_return_code_;
}

void Parser::ThrowAwayToken_ (Token::Data &token_data) throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 336 "barf_preprocessor_parser.cpp"
 << " executing throw-away-token actions" << std::endl)


#line 110 "barf_preprocessor_parser.trison"

    delete token_data;

#line 344 "barf_preprocessor_parser.cpp"
}

Parser::Token Parser::Scan_ () throw()
{

#line 113 "barf_preprocessor_parser.trison"

    assert(m_scanner != NULL);
    Ast::Base *lookahead_token_data = NULL;
    return Token(m_scanner->Scan(&lookahead_token_data), lookahead_token_data);

#line 356 "barf_preprocessor_parser.cpp"
}

void Parser::ClearStack_ () throw()
{
    if (m_stack_.empty())
        return; // nothing to do

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 367 "barf_preprocessor_parser.cpp"
 << " clearing the stack" << std::endl)

    Stack_::iterator it = m_stack_.begin();
    Stack_::iterator it_end = m_stack_.end();
    // skip the bottom of the stack, since it
    // contains the start state and no token data.
    ++it;
    for ( ; it != it_end; ++it)
        ThrowAwayToken_(it->m_token_data);
    m_stack_.clear();
}

void Parser::ClearLookaheadQueue_ () throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 385 "barf_preprocessor_parser.cpp"
 << " clearing the lookahead queue" << std::endl)

    for (LookaheadQueue_::iterator it = m_lookahead_queue_.begin(), it_end = m_lookahead_queue_.end(); it != it_end; ++it)
        ThrowAwayToken_(it->m_data);
    m_lookahead_queue_.clear();
}

Parser::Token const &Parser::Lookahead_ (LookaheadQueue_::size_type index) throw()
{
    while (index >= m_lookahead_queue_.size())
    {
        m_lookahead_queue_.push_back(Scan_());

        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 402 "barf_preprocessor_parser.cpp"
 << " pushed " << *m_lookahead_queue_.rbegin() << " onto back of lookahead queue" << std::endl)
    }
    return m_lookahead_queue_[index];
}

bool Parser::ExerciseTransition_ (Transition_ const &transition)
{
    switch (transition.m_type)
    {
        case Transition_::REDUCE:
        {
            // execute the indicated reduction rule, push the returned Token
            // onto the front of the lookahead queue, then pop the corresponding
            // number of stack elements.
            assert(transition.m_data < ms_rule_count_);
            Rule_ const &rule = ms_rule_table_[transition.m_data];
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 422 "barf_preprocessor_parser.cpp"
 << " REDUCE " << rule.m_description << std::endl)
            assert(m_stack_.size() > rule.m_token_count);
            m_lookahead_queue_.push_front(
                Token(
                    rule.m_reduction_nonterminal_token_id,
                    ExecuteReductionRule_(transition.m_data)));
            m_stack_.resize(m_stack_.size() - rule.m_token_count);
            assert(rule.m_reduction_nonterminal_token_id < ms_token_name_count_);
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 434 "barf_preprocessor_parser.cpp"
 << " pushed " << Token(rule.m_reduction_nonterminal_token_id) << " onto front of lookahead queue" << std::endl)
            return false; // indicating the parser isn't returning
        }

        case Transition_::RETURN:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 443 "barf_preprocessor_parser.cpp"
 << " RETURN" << std::endl)
            return true; // indicating the parser is returning

        case Transition_::SHIFT:
            // push the state (indicated by the shift transition) and token data
            // onto the stack, then pop the corresponding lookahead.
            assert(transition.m_data < ms_state_count_);
            assert(Lookahead_(0).m_id < ms_token_name_count_); // at this point, we're past a possible
                                                               // client error, so asserting here is ok.
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 456 "barf_preprocessor_parser.cpp"
 << " SHIFT " << Lookahead_(0) << std::endl)
            m_stack_.push_back(StackElement_(transition.m_data, Lookahead_(0).m_data));
            m_lookahead_queue_.pop_front();
            return false; // indicating the parser isn't returning

        case Transition_::ERROR_PANIC:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 466 "barf_preprocessor_parser.cpp"
 << " ERROR_PANIC" << std::endl)
            m_is_in_error_panic_ = true;
            return false; // indicating the parser isn't returning

        default:
            assert(false && "invalid transition type (bad state machine, or memory corruption)");
            return false; // indicating the parser isn't returning
    }
}

Parser::Token::Data Parser::ExecuteReductionRule_ (BarfCpp_::Uint32 const rule_index_)
{
    assert(rule_index_ < ms_rule_count_);
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 483 "barf_preprocessor_parser.cpp"
 << " executing reduction rule " << rule_index_ << std::endl)
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return NULL;

        case 0:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 167 "barf_preprocessor_parser.trison"

        return new Body();
    
#line 499 "barf_preprocessor_parser.cpp"
            break;
        }

        case 1:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Text * text(Dsc<Text *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 172 "barf_preprocessor_parser.trison"

        Body *body = new Body();
        body->Append(text);
        return body;
    
#line 514 "barf_preprocessor_parser.cpp"
            break;
        }

        case 2:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Body * body(Dsc<Body *>(m_stack_[m_stack_.size()-2].m_token_data));
            ExecutableAst * executable(Dsc<ExecutableAst *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 179 "barf_preprocessor_parser.trison"

        if (executable != NULL)
            body->Append(executable);
        return body;
    
#line 530 "barf_preprocessor_parser.cpp"
            break;
        }

        case 3:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Body * body(Dsc<Body *>(m_stack_[m_stack_.size()-3].m_token_data));
            ExecutableAst * executable(Dsc<ExecutableAst *>(m_stack_[m_stack_.size()-2].m_token_data));
            Text * text(Dsc<Text *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 186 "barf_preprocessor_parser.trison"

        if (executable != NULL)
            body->Append(executable);
        body->Append(text);
        return body;
    
#line 548 "barf_preprocessor_parser.cpp"
            break;
        }

        case 4:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            ExecutableAst * code(Dsc<ExecutableAst *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 197 "barf_preprocessor_parser.trison"

        return code;
    
#line 561 "barf_preprocessor_parser.cpp"
            break;
        }

        case 5:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Conditional * conditional(Dsc<Conditional *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 202 "barf_preprocessor_parser.trison"

        return conditional;
    
#line 574 "barf_preprocessor_parser.cpp"
            break;
        }

        case 6:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Define * define(Dsc<Define *>(m_stack_[m_stack_.size()-3].m_token_data));
            Body * body(Dsc<Body *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 207 "barf_preprocessor_parser.trison"

        define->SetBody(body);
        return define;
    
#line 589 "barf_preprocessor_parser.cpp"
            break;
        }

        case 7:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Loop * loop(Dsc<Loop *>(m_stack_[m_stack_.size()-3].m_token_data));
            Body * body(Dsc<Body *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 213 "barf_preprocessor_parser.trison"

        loop->SetBody(body);
        return loop;
    
#line 604 "barf_preprocessor_parser.cpp"
            break;
        }

        case 8:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            ForEach * for_each(Dsc<ForEach *>(m_stack_[m_stack_.size()-3].m_token_data));
            Body * body(Dsc<Body *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 219 "barf_preprocessor_parser.trison"

        for_each->SetBody(body);
        return for_each;
    
#line 619 "barf_preprocessor_parser.cpp"
            break;
        }

        case 9:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            ExecutableAst * code_body(Dsc<ExecutableAst *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 227 "barf_preprocessor_parser.trison"
 return code_body; 
#line 630 "barf_preprocessor_parser.cpp"
            break;
        }

        case 10:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            ExecutableAst * code_body(Dsc<ExecutableAst *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 229 "barf_preprocessor_parser.trison"
 return code_body; 
#line 641 "barf_preprocessor_parser.cpp"
            break;
        }

        case 11:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 235 "barf_preprocessor_parser.trison"
 return NULL; 
#line 651 "barf_preprocessor_parser.cpp"
            break;
        }

        case 12:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 238 "barf_preprocessor_parser.trison"
 return expression; 
#line 662 "barf_preprocessor_parser.cpp"
            break;
        }

        case 13:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 241 "barf_preprocessor_parser.trison"
 return new DumpSymbolTable(); 
#line 672 "barf_preprocessor_parser.cpp"
            break;
        }

        case 14:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 244 "barf_preprocessor_parser.trison"
 return new Undefine(id); 
#line 683 "barf_preprocessor_parser.cpp"
            break;
        }

        case 15:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 247 "barf_preprocessor_parser.trison"
 return new DeclareArray(id); 
#line 694 "barf_preprocessor_parser.cpp"
            break;
        }

        case 16:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 250 "barf_preprocessor_parser.trison"
 return new DeclareMap(id); 
#line 705 "barf_preprocessor_parser.cpp"
            break;
        }

        case 17:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * include_filename_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 253 "barf_preprocessor_parser.trison"
 return new Include(include_filename_expression, false); 
#line 716 "barf_preprocessor_parser.cpp"
            break;
        }

        case 18:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * include_filename_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 256 "barf_preprocessor_parser.trison"
 return new Include(include_filename_expression, true); 
#line 727 "barf_preprocessor_parser.cpp"
            break;
        }

        case 19:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * message_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 259 "barf_preprocessor_parser.trison"
 return new Message(message_expression, Message::WARNING); 
#line 738 "barf_preprocessor_parser.cpp"
            break;
        }

        case 20:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * message_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 262 "barf_preprocessor_parser.trison"
 return new Message(message_expression, Message::ERROR); 
#line 749 "barf_preprocessor_parser.cpp"
            break;
        }

        case 21:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * message_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 265 "barf_preprocessor_parser.trison"
 return new Message(message_expression, Message::FATAL_ERROR); 
#line 760 "barf_preprocessor_parser.cpp"
            break;
        }

        case 22:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Conditional * conditional(Dsc<Conditional *>(m_stack_[m_stack_.size()-3].m_token_data));
            Body * if_body(Dsc<Body *>(m_stack_[m_stack_.size()-2].m_token_data));
            Body * else_body(Dsc<Body *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 271 "barf_preprocessor_parser.trison"

        conditional->SetIfBody(if_body);
        conditional->SetElseBody(else_body);
        return conditional;
    
#line 777 "barf_preprocessor_parser.cpp"
            break;
        }

        case 23:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 280 "barf_preprocessor_parser.trison"
 return NULL; 
#line 787 "barf_preprocessor_parser.cpp"
            break;
        }

        case 24:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Body * body(Dsc<Body *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 282 "barf_preprocessor_parser.trison"
 return body; 
#line 798 "barf_preprocessor_parser.cpp"
            break;
        }

        case 25:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Conditional * conditional(Dsc<Conditional *>(m_stack_[m_stack_.size()-3].m_token_data));
            Body * if_body(Dsc<Body *>(m_stack_[m_stack_.size()-2].m_token_data));
            Body * else_body(Dsc<Body *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 285 "barf_preprocessor_parser.trison"

        conditional->SetIfBody(if_body);
        conditional->SetElseBody(else_body);
        Body *body = new Body();
        body->Append(conditional);
        return body;
    
#line 817 "barf_preprocessor_parser.cpp"
            break;
        }

        case 26:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 297 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 828 "barf_preprocessor_parser.cpp"
            break;
        }

        case 27:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 300 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 839 "barf_preprocessor_parser.cpp"
            break;
        }

        case 28:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 305 "barf_preprocessor_parser.trison"
 return NULL; 
#line 849 "barf_preprocessor_parser.cpp"
            break;
        }

        case 29:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 307 "barf_preprocessor_parser.trison"
 return NULL; 
#line 859 "barf_preprocessor_parser.cpp"
            break;
        }

        case 30:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 313 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 870 "barf_preprocessor_parser.cpp"
            break;
        }

        case 31:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 316 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 881 "barf_preprocessor_parser.cpp"
            break;
        }

        case 32:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 321 "barf_preprocessor_parser.trison"
 return NULL; 
#line 891 "barf_preprocessor_parser.cpp"
            break;
        }

        case 33:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 323 "barf_preprocessor_parser.trison"
 return NULL; 
#line 901 "barf_preprocessor_parser.cpp"
            break;
        }

        case 34:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Define * define(Dsc<Define *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 328 "barf_preprocessor_parser.trison"
 return define; 
#line 912 "barf_preprocessor_parser.cpp"
            break;
        }

        case 35:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Define * define(Dsc<Define *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 330 "barf_preprocessor_parser.trison"
 return define; 
#line 923 "barf_preprocessor_parser.cpp"
            break;
        }

        case 36:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Define * define(Dsc<Define *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 332 "barf_preprocessor_parser.trison"
 return define; 
#line 934 "barf_preprocessor_parser.cpp"
            break;
        }

        case 37:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 338 "barf_preprocessor_parser.trison"
 return new Define(id); 
#line 945 "barf_preprocessor_parser.cpp"
            break;
        }

        case 38:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 341 "barf_preprocessor_parser.trison"
 return new Define(id); 
#line 956 "barf_preprocessor_parser.cpp"
            break;
        }

        case 39:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));

#line 347 "barf_preprocessor_parser.trison"
 return new DefineArrayElement(id); 
#line 967 "barf_preprocessor_parser.cpp"
            break;
        }

        case 40:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));

#line 350 "barf_preprocessor_parser.trison"
 return new DefineArrayElement(id); 
#line 978 "barf_preprocessor_parser.cpp"
            break;
        }

        case 41:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-6].m_token_data));
            Text * key(Dsc<Text *>(m_stack_[m_stack_.size()-4].m_token_data));

#line 356 "barf_preprocessor_parser.trison"
 return new DefineMapElement(id, key); 
#line 990 "barf_preprocessor_parser.cpp"
            break;
        }

        case 42:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-6].m_token_data));
            Text * key(Dsc<Text *>(m_stack_[m_stack_.size()-4].m_token_data));

#line 359 "barf_preprocessor_parser.trison"
 return new DefineMapElement(id, key); 
#line 1002 "barf_preprocessor_parser.cpp"
            break;
        }

        case 43:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 364 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1012 "barf_preprocessor_parser.cpp"
            break;
        }

        case 44:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 366 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1022 "barf_preprocessor_parser.cpp"
            break;
        }

        case 45:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * iterator_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Expression * iteration_count_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 372 "barf_preprocessor_parser.trison"
 return new Loop(iterator_id, iteration_count_expression); 
#line 1034 "barf_preprocessor_parser.cpp"
            break;
        }

        case 46:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * iterator_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Expression * iteration_count_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 375 "barf_preprocessor_parser.trison"
 return new Loop(iterator_id, iteration_count_expression); 
#line 1046 "barf_preprocessor_parser.cpp"
            break;
        }

        case 47:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 380 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1056 "barf_preprocessor_parser.cpp"
            break;
        }

        case 48:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 382 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1066 "barf_preprocessor_parser.cpp"
            break;
        }

        case 49:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * key_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * map_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 388 "barf_preprocessor_parser.trison"
 return new ForEach(key_id, map_id); 
#line 1078 "barf_preprocessor_parser.cpp"
            break;
        }

        case 50:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * key_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * map_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 391 "barf_preprocessor_parser.trison"
 return new ForEach(key_id, map_id); 
#line 1090 "barf_preprocessor_parser.cpp"
            break;
        }

        case 51:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 396 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1100 "barf_preprocessor_parser.cpp"
            break;
        }

        case 52:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 398 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1110 "barf_preprocessor_parser.cpp"
            break;
        }

        case 53:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Text * str(Dsc<Text *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 404 "barf_preprocessor_parser.trison"
 return str; 
#line 1121 "barf_preprocessor_parser.cpp"
            break;
        }

        case 54:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Integer * integer(Dsc<Integer *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 407 "barf_preprocessor_parser.trison"
 return integer; 
#line 1132 "barf_preprocessor_parser.cpp"
            break;
        }

        case 55:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 410 "barf_preprocessor_parser.trison"
 return new Sizeof(id); 
#line 1143 "barf_preprocessor_parser.cpp"
            break;
        }

        case 56:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 413 "barf_preprocessor_parser.trison"
 return new Operation(Operation::INT_CAST, expression); 
#line 1154 "barf_preprocessor_parser.cpp"
            break;
        }

        case 57:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 416 "barf_preprocessor_parser.trison"
 return new Operation(Operation::STRING_CAST, expression); 
#line 1165 "barf_preprocessor_parser.cpp"
            break;
        }

        case 58:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 419 "barf_preprocessor_parser.trison"
 return new Operation(Operation::STRING_LENGTH, expression); 
#line 1176 "barf_preprocessor_parser.cpp"
            break;
        }

        case 59:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * character_index_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 422 "barf_preprocessor_parser.trison"
 return new Operation(Operation::TO_CHARACTER_LITERAL, character_index_expression); 
#line 1187 "barf_preprocessor_parser.cpp"
            break;
        }

        case 60:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * string_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 425 "barf_preprocessor_parser.trison"
 return new Operation(Operation::TO_STRING_LITERAL, string_expression); 
#line 1198 "barf_preprocessor_parser.cpp"
            break;
        }

        case 61:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 428 "barf_preprocessor_parser.trison"
 return new IsDefined(id, NULL); 
#line 1209 "barf_preprocessor_parser.cpp"
            break;
        }

        case 62:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Expression * element_index_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 431 "barf_preprocessor_parser.trison"
 return new IsDefined(id, element_index_expression); 
#line 1221 "barf_preprocessor_parser.cpp"
            break;
        }

        case 63:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 434 "barf_preprocessor_parser.trison"
 return new Dereference(id, NULL, DEREFERENCE_ALWAYS); 
#line 1232 "barf_preprocessor_parser.cpp"
            break;
        }

        case 64:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-4].m_token_data));
            Expression * element_index_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 437 "barf_preprocessor_parser.trison"
 return new Dereference(id, element_index_expression, DEREFERENCE_ALWAYS); 
#line 1244 "barf_preprocessor_parser.cpp"
            break;
        }

        case 65:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 440 "barf_preprocessor_parser.trison"
 return new Dereference(id, NULL, DEREFERENCE_IFF_DEFINED); 
#line 1255 "barf_preprocessor_parser.cpp"
            break;
        }

        case 66:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-5].m_token_data));
            Expression * element_index_expression(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 443 "barf_preprocessor_parser.trison"
 return new Dereference(id, element_index_expression, DEREFERENCE_IFF_DEFINED); 
#line 1267 "barf_preprocessor_parser.cpp"
            break;
        }

        case 67:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 446 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::CONCATENATE, right); 
#line 1279 "barf_preprocessor_parser.cpp"
            break;
        }

        case 68:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-4].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 449 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LOGICAL_OR, right); 
#line 1291 "barf_preprocessor_parser.cpp"
            break;
        }

        case 69:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-4].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 452 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LOGICAL_AND, right); 
#line 1303 "barf_preprocessor_parser.cpp"
            break;
        }

        case 70:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-4].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 455 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::EQUAL, right); 
#line 1315 "barf_preprocessor_parser.cpp"
            break;
        }

        case 71:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-4].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 458 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::NOT_EQUAL, right); 
#line 1327 "barf_preprocessor_parser.cpp"
            break;
        }

        case 72:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 461 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LESS_THAN, right); 
#line 1339 "barf_preprocessor_parser.cpp"
            break;
        }

        case 73:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-4].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 464 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LESS_THAN_OR_EQUAL, right); 
#line 1351 "barf_preprocessor_parser.cpp"
            break;
        }

        case 74:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 467 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::GREATER_THAN, right); 
#line 1363 "barf_preprocessor_parser.cpp"
            break;
        }

        case 75:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-4].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 470 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::GREATER_THAN_OR_EQUAL, right); 
#line 1375 "barf_preprocessor_parser.cpp"
            break;
        }

        case 76:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 473 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::PLUS, right); 
#line 1387 "barf_preprocessor_parser.cpp"
            break;
        }

        case 77:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 476 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::MINUS, right); 
#line 1399 "barf_preprocessor_parser.cpp"
            break;
        }

        case 78:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 479 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::MULTIPLY, right); 
#line 1411 "barf_preprocessor_parser.cpp"
            break;
        }

        case 79:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 482 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::DIVIDE, right); 
#line 1423 "barf_preprocessor_parser.cpp"
            break;
        }

        case 80:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * left(Dsc<Expression *>(m_stack_[m_stack_.size()-3].m_token_data));
            Expression * right(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 485 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::REMAINDER, right); 
#line 1435 "barf_preprocessor_parser.cpp"
            break;
        }

        case 81:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 488 "barf_preprocessor_parser.trison"
 return new Operation(Operation::NEGATIVE, expression); 
#line 1446 "barf_preprocessor_parser.cpp"
            break;
        }

        case 82:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 491 "barf_preprocessor_parser.trison"
 return new Operation(Operation::LOGICAL_NOT, expression); 
#line 1457 "barf_preprocessor_parser.cpp"
            break;
        }

        case 83:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Expression * expression(Dsc<Expression *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 494 "barf_preprocessor_parser.trison"
 return expression; 
#line 1468 "barf_preprocessor_parser.cpp"
            break;
        }

    }

    assert(false && "no value returned from reduction rule code block");
    return NULL;
}

void Parser::PrintParserStatus_ (std::ostream &stream) const
{
    assert(!m_stack_.empty());

    stream << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 1485 "barf_preprocessor_parser.cpp"
 << " parser stack: ";
    for (Stack_::const_iterator it = m_stack_.begin(), it_end = m_stack_.end(); it != it_end; ++it)
    {
        stream << it->m_state_index;
        Stack_::const_iterator next_it = it;
        if (++next_it != it_end)
            stream << ' ';
    }
    stream << std::endl;

    PrintIndented_(stream, ms_state_table_[m_stack_.rbegin()->m_state_index].m_description);
    stream << std::endl;
}

void Parser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 1506 "barf_preprocessor_parser.cpp"
 << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << 
#line 121 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().GetIsValid() ? " ("+GetFiLoc().GetAsString()+")" : g_empty_string) << ":"
#line 1514 "barf_preprocessor_parser.cpp"
 << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, Parser::Token const &token)
{
    if (token.m_id < Parser::ms_token_name_count_)
        stream << '(' << Parser::ms_token_name_table_[token.m_id] << ')';
    else
        stream << "!INVALID TOKEN!";
    return stream;
}

Parser::Rule_ const Parser::ms_rule_table_[] =
{
    { Parser::Nonterminal_::body, 0, "body <-" },
    { Parser::Nonterminal_::body, 1, "body <- TEXT" },
    { Parser::Nonterminal_::body, 2, "body <- body executable" },
    { Parser::Nonterminal_::body, 3, "body <- body executable TEXT" },
    { Parser::Nonterminal_::executable, 1, "executable <- code" },
    { Parser::Nonterminal_::executable, 1, "executable <- conditional_series" },
    { Parser::Nonterminal_::executable, 3, "executable <- define body end_define" },
    { Parser::Nonterminal_::executable, 3, "executable <- loop body end_loop" },
    { Parser::Nonterminal_::executable, 3, "executable <- for_each body end_for_each" },
    { Parser::Nonterminal_::code, 3, "code <- START_CODE code_body END_CODE" },
    { Parser::Nonterminal_::code, 3, "code <- CODE_LINE code_body CODE_NEWLINE" },
    { Parser::Nonterminal_::code_body, 0, "code_body <-" },
    { Parser::Nonterminal_::code_body, 1, "code_body <- expression" },
    { Parser::Nonterminal_::code_body, 3, "code_body <- DUMP_SYMBOL_TABLE '(' ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- UNDEFINE '(' ID ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- DECLARE_ARRAY '(' ID ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- DECLARE_MAP '(' ID ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- INCLUDE '(' expression ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- SANDBOX_INCLUDE '(' expression ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- WARNING '(' expression ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- ERROR '(' expression ')'" },
    { Parser::Nonterminal_::code_body, 4, "code_body <- FATAL_ERROR '(' expression ')'" },
    { Parser::Nonterminal_::conditional_series, 3, "conditional_series <- if_statement body conditional_series_end" },
    { Parser::Nonterminal_::conditional_series_end, 1, "conditional_series_end <- end_if" },
    { Parser::Nonterminal_::conditional_series_end, 3, "conditional_series_end <- else_statement body end_if" },
    { Parser::Nonterminal_::conditional_series_end, 3, "conditional_series_end <- else_if_statement body conditional_series_end" },
    { Parser::Nonterminal_::if_statement, 6, "if_statement <- START_CODE IF '(' expression ')' END_CODE" },
    { Parser::Nonterminal_::if_statement, 6, "if_statement <- CODE_LINE IF '(' expression ')' CODE_NEWLINE" },
    { Parser::Nonterminal_::else_statement, 3, "else_statement <- START_CODE ELSE END_CODE" },
    { Parser::Nonterminal_::else_statement, 3, "else_statement <- CODE_LINE ELSE CODE_NEWLINE" },
    { Parser::Nonterminal_::else_if_statement, 6, "else_if_statement <- START_CODE ELSE_IF '(' expression ')' END_CODE" },
    { Parser::Nonterminal_::else_if_statement, 6, "else_if_statement <- CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE" },
    { Parser::Nonterminal_::end_if, 3, "end_if <- START_CODE END_IF END_CODE" },
    { Parser::Nonterminal_::end_if, 3, "end_if <- CODE_LINE END_IF CODE_NEWLINE" },
    { Parser::Nonterminal_::define, 1, "define <- define_scalar" },
    { Parser::Nonterminal_::define, 1, "define <- define_array_element" },
    { Parser::Nonterminal_::define, 1, "define <- define_map_element" },
    { Parser::Nonterminal_::define_scalar, 6, "define_scalar <- START_CODE DEFINE '(' ID ')' END_CODE" },
    { Parser::Nonterminal_::define_scalar, 6, "define_scalar <- CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE" },
    { Parser::Nonterminal_::define_array_element, 8, "define_array_element <- START_CODE DEFINE '(' ID '[' ']' ')' END_CODE" },
    { Parser::Nonterminal_::define_array_element, 8, "define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE" },
    { Parser::Nonterminal_::define_map_element, 9, "define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { Parser::Nonterminal_::define_map_element, 9, "define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { Parser::Nonterminal_::end_define, 3, "end_define <- START_CODE END_DEFINE END_CODE" },
    { Parser::Nonterminal_::end_define, 3, "end_define <- CODE_LINE END_DEFINE CODE_NEWLINE" },
    { Parser::Nonterminal_::loop, 8, "loop <- START_CODE LOOP '(' ID ',' expression ')' END_CODE" },
    { Parser::Nonterminal_::loop, 8, "loop <- CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE" },
    { Parser::Nonterminal_::end_loop, 3, "end_loop <- START_CODE END_LOOP END_CODE" },
    { Parser::Nonterminal_::end_loop, 3, "end_loop <- CODE_LINE END_LOOP CODE_NEWLINE" },
    { Parser::Nonterminal_::for_each, 8, "for_each <- START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE" },
    { Parser::Nonterminal_::for_each, 8, "for_each <- CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE" },
    { Parser::Nonterminal_::end_for_each, 3, "end_for_each <- START_CODE END_FOR_EACH END_CODE" },
    { Parser::Nonterminal_::end_for_each, 3, "end_for_each <- CODE_LINE END_FOR_EACH CODE_NEWLINE" },
    { Parser::Nonterminal_::expression, 1, "expression <- STRING_LITERAL" },
    { Parser::Nonterminal_::expression, 1, "expression <- INTEGER_LITERAL" },
    { Parser::Nonterminal_::expression, 4, "expression <- SIZEOF '(' ID ')'" },
    { Parser::Nonterminal_::expression, 4, "expression <- KEYWORD_INT '(' expression ')'" },
    { Parser::Nonterminal_::expression, 4, "expression <- KEYWORD_STRING '(' expression ')'" },
    { Parser::Nonterminal_::expression, 4, "expression <- STRING_LENGTH '(' expression ')'" },
    { Parser::Nonterminal_::expression, 4, "expression <- TO_CHARACTER_LITERAL '(' expression ')'" },
    { Parser::Nonterminal_::expression, 4, "expression <- TO_STRING_LITERAL '(' expression ')'" },
    { Parser::Nonterminal_::expression, 4, "expression <- IS_DEFINED '(' ID ')'" },
    { Parser::Nonterminal_::expression, 7, "expression <- IS_DEFINED '(' ID '[' expression ']' ')'" },
    { Parser::Nonterminal_::expression, 1, "expression <- ID" },
    { Parser::Nonterminal_::expression, 4, "expression <- ID '[' expression ']'" },
    { Parser::Nonterminal_::expression, 2, "expression <- ID '?'" },
    { Parser::Nonterminal_::expression, 5, "expression <- ID '[' expression ']' '?'" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '.' expression" },
    { Parser::Nonterminal_::expression, 4, "expression <- expression '|' '|' expression" },
    { Parser::Nonterminal_::expression, 4, "expression <- expression '&' '&' expression" },
    { Parser::Nonterminal_::expression, 4, "expression <- expression '=' '=' expression" },
    { Parser::Nonterminal_::expression, 4, "expression <- expression '!' '=' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '<' expression" },
    { Parser::Nonterminal_::expression, 4, "expression <- expression '<' '=' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '>' expression" },
    { Parser::Nonterminal_::expression, 4, "expression <- expression '>' '=' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '+' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '-' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '*' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '/' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- expression '%' expression" },
    { Parser::Nonterminal_::expression, 2, "expression <- '-' expression" },
    { Parser::Nonterminal_::expression, 2, "expression <- '!' expression" },
    { Parser::Nonterminal_::expression, 3, "expression <- '(' expression ')'" }
};
BarfCpp_::Size const Parser::ms_rule_count_ = sizeof(Parser::ms_rule_table_) / sizeof(*Parser::ms_rule_table_);

Parser::State_ const Parser::ms_state_table_[] =
{
    { 3, ms_transition_table_+0, "START body                            \nrule 0: body <- .                     \nrule 1: body <- . TEXT                \nrule 2: body <- . body executable     \nrule 3: body <- . body executable TEXT" },
    { 1, ms_transition_table_+3, "rule 1: body <- TEXT ." },
    { 13, ms_transition_table_+4, "RETURN body                                                                                     \nrule 2: body <- body . executable                                                               \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 3: body <- body . executable TEXT                                                          " },
    { 29, ms_transition_table_+17, "rule 9: code <- START_CODE . code_body END_CODE                                              \nrule 11: code_body <- .                                                                      \nrule 12: code_body <- . expression                                                           \nrule 53: expression <- . STRING_LITERAL                                                      \nrule 54: expression <- . INTEGER_LITERAL                                                     \nrule 55: expression <- . SIZEOF '(' ID ')'                                                   \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                      \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                   \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                    \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                             \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                               \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                            \nrule 63: expression <- . ID                                                                  \nrule 64: expression <- . ID '[' expression ']'                                               \nrule 65: expression <- . ID '?'                                                              \nrule 66: expression <- . ID '[' expression ']' '?'                                           \nrule 67: expression <- . expression '.' expression                                           \nrule 68: expression <- . expression '|' '|' expression                                       \nrule 69: expression <- . expression '&' '&' expression                                       \nrule 70: expression <- . expression '=' '=' expression                                       \nrule 71: expression <- . expression '!' '=' expression                                       \nrule 72: expression <- . expression '<' expression                                           \nrule 73: expression <- . expression '<' '=' expression                                       \nrule 74: expression <- . expression '>' expression                                           \nrule 75: expression <- . expression '>' '=' expression                                       \nrule 76: expression <- . expression '+' expression                                           \nrule 77: expression <- . expression '-' expression                                           \nrule 78: expression <- . expression '*' expression                                           \nrule 79: expression <- . expression '/' expression                                           \nrule 80: expression <- . expression '%' expression                                           \nrule 81: expression <- . '-' expression                                                      \nrule 82: expression <- . '!' expression                                                      \nrule 83: expression <- . '(' expression ')'                                                  \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                            \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                  \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                             \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                               \nrule 17: code_body <- . INCLUDE '(' expression ')'                                           \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                   \nrule 19: code_body <- . WARNING '(' expression ')'                                           \nrule 20: code_body <- . ERROR '(' expression ')'                                             \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                       \nrule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE                         \nrule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE\nrule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE                        \nrule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE                        " },
    { 15, ms_transition_table_+46, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 82: expression <- '!' . expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 15, ms_transition_table_+61, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 83: expression <- '(' . expression ')'                      " },
    { 15, ms_transition_table_+76, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 81: expression <- '-' . expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 3, ms_transition_table_+91, "rule 63: expression <- ID .                       \nrule 64: expression <- ID . '[' expression ']'    \nrule 65: expression <- ID . '?'                   \nrule 66: expression <- ID . '[' expression ']' '?'" },
    { 1, ms_transition_table_+94, "rule 65: expression <- ID '?' ." },
    { 15, ms_transition_table_+95, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 64: expression <- ID '[' . expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 66: expression <- ID '[' . expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 2, ms_transition_table_+110, "rule 55: expression <- SIZEOF . '(' ID ')'" },
    { 2, ms_transition_table_+112, "rule 55: expression <- SIZEOF '(' . ID ')'" },
    { 2, ms_transition_table_+114, "rule 55: expression <- SIZEOF '(' ID . ')'" },
    { 1, ms_transition_table_+116, "rule 55: expression <- SIZEOF '(' ID ')' ." },
    { 2, ms_transition_table_+117, "rule 61: expression <- IS_DEFINED . '(' ID ')'                   \nrule 62: expression <- IS_DEFINED . '(' ID '[' expression ']' ')'" },
    { 2, ms_transition_table_+119, "rule 61: expression <- IS_DEFINED '(' . ID ')'                   \nrule 62: expression <- IS_DEFINED '(' . ID '[' expression ']' ')'" },
    { 3, ms_transition_table_+121, "rule 61: expression <- IS_DEFINED '(' ID . ')'                   \nrule 62: expression <- IS_DEFINED '(' ID . '[' expression ']' ')'" },
    { 1, ms_transition_table_+124, "rule 61: expression <- IS_DEFINED '(' ID ')' ." },
    { 15, ms_transition_table_+125, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 62: expression <- IS_DEFINED '(' ID '[' . expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 1, ms_transition_table_+140, "rule 54: expression <- INTEGER_LITERAL ." },
    { 1, ms_transition_table_+141, "rule 53: expression <- STRING_LITERAL ." },
    { 2, ms_transition_table_+142, "rule 56: expression <- KEYWORD_INT . '(' expression ')'" },
    { 15, ms_transition_table_+144, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 56: expression <- KEYWORD_INT '(' . expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 2, ms_transition_table_+159, "rule 57: expression <- KEYWORD_STRING . '(' expression ')'" },
    { 15, ms_transition_table_+161, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 57: expression <- KEYWORD_STRING '(' . expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 2, ms_transition_table_+176, "rule 58: expression <- STRING_LENGTH . '(' expression ')'" },
    { 15, ms_transition_table_+178, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 58: expression <- STRING_LENGTH '(' . expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 2, ms_transition_table_+193, "rule 59: expression <- TO_CHARACTER_LITERAL . '(' expression ')'" },
    { 15, ms_transition_table_+195, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 59: expression <- TO_CHARACTER_LITERAL '(' . expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 2, ms_transition_table_+210, "rule 60: expression <- TO_STRING_LITERAL . '(' expression ')'" },
    { 15, ms_transition_table_+212, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 60: expression <- TO_STRING_LITERAL '(' . expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 14, ms_transition_table_+227, "rule 60: expression <- TO_STRING_LITERAL '(' expression . ')'\nrule 67: expression <- expression . '.' expression           \nrule 68: expression <- expression . '|' '|' expression       \nrule 69: expression <- expression . '&' '&' expression       \nrule 70: expression <- expression . '=' '=' expression       \nrule 71: expression <- expression . '!' '=' expression       \nrule 72: expression <- expression . '<' expression           \nrule 73: expression <- expression . '<' '=' expression       \nrule 74: expression <- expression . '>' expression           \nrule 75: expression <- expression . '>' '=' expression       \nrule 76: expression <- expression . '+' expression           \nrule 77: expression <- expression . '-' expression           \nrule 78: expression <- expression . '*' expression           \nrule 79: expression <- expression . '/' expression           \nrule 80: expression <- expression . '%' expression           " },
    { 2, ms_transition_table_+241, "rule 71: expression <- expression '!' . '=' expression" },
    { 15, ms_transition_table_+243, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 71: expression <- expression '!' '=' . expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 9, ms_transition_table_+258, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 71: expression <- expression '!' '=' expression .\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 15, ms_transition_table_+267, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 80: expression <- expression '%' . expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 1, ms_transition_table_+282, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 80: expression <- expression '%' expression .    " },
    { 15, ms_transition_table_+283, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 78: expression <- expression '*' . expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 1, ms_transition_table_+298, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 78: expression <- expression '*' expression .    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 15, ms_transition_table_+299, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 76: expression <- expression '+' . expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 4, ms_transition_table_+314, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 76: expression <- expression '+' expression .    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 15, ms_transition_table_+318, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 79: expression <- expression '/' . expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 1, ms_transition_table_+333, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 79: expression <- expression '/' expression .    \nrule 80: expression <- expression . '%' expression    " },
    { 15, ms_transition_table_+334, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 77: expression <- expression '-' . expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 4, ms_transition_table_+349, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 77: expression <- expression '-' expression .    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 15, ms_transition_table_+353, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 67: expression <- expression '.' . expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 6, ms_transition_table_+368, "rule 67: expression <- expression . '.' expression    \nrule 67: expression <- expression '.' expression .    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 16, ms_transition_table_+374, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 72: expression <- expression '<' . expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 73: expression <- expression '<' . '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 15, ms_transition_table_+390, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 73: expression <- expression '<' '=' . expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 7, ms_transition_table_+405, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 73: expression <- expression '<' '=' expression .\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 7, ms_transition_table_+412, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 72: expression <- expression '<' expression .    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 16, ms_transition_table_+419, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 74: expression <- expression '>' . expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 75: expression <- expression '>' . '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 15, ms_transition_table_+435, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 75: expression <- expression '>' '=' . expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 7, ms_transition_table_+450, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 75: expression <- expression '>' '=' expression .\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 7, ms_transition_table_+457, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 74: expression <- expression '>' expression .    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 2, ms_transition_table_+464, "rule 69: expression <- expression '&' . '&' expression" },
    { 15, ms_transition_table_+466, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 69: expression <- expression '&' '&' . expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 11, ms_transition_table_+481, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 69: expression <- expression '&' '&' expression .\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 2, ms_transition_table_+492, "rule 70: expression <- expression '=' . '=' expression" },
    { 15, ms_transition_table_+494, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 70: expression <- expression '=' '=' . expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 9, ms_transition_table_+509, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 70: expression <- expression '=' '=' expression .\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 1, ms_transition_table_+518, "rule 60: expression <- TO_STRING_LITERAL '(' expression ')' ." },
    { 2, ms_transition_table_+519, "rule 68: expression <- expression '|' . '|' expression" },
    { 15, ms_transition_table_+521, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 68: expression <- expression '|' '|' . expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 12, ms_transition_table_+536, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 68: expression <- expression '|' '|' expression .\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 14, ms_transition_table_+548, "rule 59: expression <- TO_CHARACTER_LITERAL '(' expression . ')'\nrule 67: expression <- expression . '.' expression              \nrule 68: expression <- expression . '|' '|' expression          \nrule 69: expression <- expression . '&' '&' expression          \nrule 70: expression <- expression . '=' '=' expression          \nrule 71: expression <- expression . '!' '=' expression          \nrule 72: expression <- expression . '<' expression              \nrule 73: expression <- expression . '<' '=' expression          \nrule 74: expression <- expression . '>' expression              \nrule 75: expression <- expression . '>' '=' expression          \nrule 76: expression <- expression . '+' expression              \nrule 77: expression <- expression . '-' expression              \nrule 78: expression <- expression . '*' expression              \nrule 79: expression <- expression . '/' expression              \nrule 80: expression <- expression . '%' expression              " },
    { 1, ms_transition_table_+562, "rule 59: expression <- TO_CHARACTER_LITERAL '(' expression ')' ." },
    { 14, ms_transition_table_+563, "rule 58: expression <- STRING_LENGTH '(' expression . ')'\nrule 67: expression <- expression . '.' expression       \nrule 68: expression <- expression . '|' '|' expression   \nrule 69: expression <- expression . '&' '&' expression   \nrule 70: expression <- expression . '=' '=' expression   \nrule 71: expression <- expression . '!' '=' expression   \nrule 72: expression <- expression . '<' expression       \nrule 73: expression <- expression . '<' '=' expression   \nrule 74: expression <- expression . '>' expression       \nrule 75: expression <- expression . '>' '=' expression   \nrule 76: expression <- expression . '+' expression       \nrule 77: expression <- expression . '-' expression       \nrule 78: expression <- expression . '*' expression       \nrule 79: expression <- expression . '/' expression       \nrule 80: expression <- expression . '%' expression       " },
    { 1, ms_transition_table_+577, "rule 58: expression <- STRING_LENGTH '(' expression ')' ." },
    { 14, ms_transition_table_+578, "rule 57: expression <- KEYWORD_STRING '(' expression . ')'\nrule 67: expression <- expression . '.' expression        \nrule 68: expression <- expression . '|' '|' expression    \nrule 69: expression <- expression . '&' '&' expression    \nrule 70: expression <- expression . '=' '=' expression    \nrule 71: expression <- expression . '!' '=' expression    \nrule 72: expression <- expression . '<' expression        \nrule 73: expression <- expression . '<' '=' expression    \nrule 74: expression <- expression . '>' expression        \nrule 75: expression <- expression . '>' '=' expression    \nrule 76: expression <- expression . '+' expression        \nrule 77: expression <- expression . '-' expression        \nrule 78: expression <- expression . '*' expression        \nrule 79: expression <- expression . '/' expression        \nrule 80: expression <- expression . '%' expression        " },
    { 1, ms_transition_table_+592, "rule 57: expression <- KEYWORD_STRING '(' expression ')' ." },
    { 14, ms_transition_table_+593, "rule 56: expression <- KEYWORD_INT '(' expression . ')'\nrule 67: expression <- expression . '.' expression     \nrule 68: expression <- expression . '|' '|' expression \nrule 69: expression <- expression . '&' '&' expression \nrule 70: expression <- expression . '=' '=' expression \nrule 71: expression <- expression . '!' '=' expression \nrule 72: expression <- expression . '<' expression     \nrule 73: expression <- expression . '<' '=' expression \nrule 74: expression <- expression . '>' expression     \nrule 75: expression <- expression . '>' '=' expression \nrule 76: expression <- expression . '+' expression     \nrule 77: expression <- expression . '-' expression     \nrule 78: expression <- expression . '*' expression     \nrule 79: expression <- expression . '/' expression     \nrule 80: expression <- expression . '%' expression     " },
    { 1, ms_transition_table_+607, "rule 56: expression <- KEYWORD_INT '(' expression ')' ." },
    { 14, ms_transition_table_+608, "rule 62: expression <- IS_DEFINED '(' ID '[' expression . ']' ')'\nrule 67: expression <- expression . '.' expression               \nrule 68: expression <- expression . '|' '|' expression           \nrule 69: expression <- expression . '&' '&' expression           \nrule 70: expression <- expression . '=' '=' expression           \nrule 71: expression <- expression . '!' '=' expression           \nrule 72: expression <- expression . '<' expression               \nrule 73: expression <- expression . '<' '=' expression           \nrule 74: expression <- expression . '>' expression               \nrule 75: expression <- expression . '>' '=' expression           \nrule 76: expression <- expression . '+' expression               \nrule 77: expression <- expression . '-' expression               \nrule 78: expression <- expression . '*' expression               \nrule 79: expression <- expression . '/' expression               \nrule 80: expression <- expression . '%' expression               " },
    { 2, ms_transition_table_+622, "rule 62: expression <- IS_DEFINED '(' ID '[' expression ']' . ')'" },
    { 1, ms_transition_table_+624, "rule 62: expression <- IS_DEFINED '(' ID '[' expression ']' ')' ." },
    { 14, ms_transition_table_+625, "rule 64: expression <- ID '[' expression . ']'        \nrule 66: expression <- ID '[' expression . ']' '?'    \nrule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 2, ms_transition_table_+639, "rule 64: expression <- ID '[' expression ']' .    \nrule 66: expression <- ID '[' expression ']' . '?'" },
    { 1, ms_transition_table_+641, "rule 66: expression <- ID '[' expression ']' '?' ." },
    { 1, ms_transition_table_+642, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 81: expression <- '-' expression .               " },
    { 14, ms_transition_table_+643, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 83: expression <- '(' expression . ')'           " },
    { 1, ms_transition_table_+657, "rule 83: expression <- '(' expression ')' ." },
    { 1, ms_transition_table_+658, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 82: expression <- '!' expression .               " },
    { 15, ms_transition_table_+659, "rule 12: code_body <- . expression                               \nrule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 13, ms_transition_table_+674, "rule 12: code_body <- expression .                    \nrule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " },
    { 2, ms_transition_table_+687, "rule 13: code_body <- DUMP_SYMBOL_TABLE . '(' ')'" },
    { 2, ms_transition_table_+689, "rule 13: code_body <- DUMP_SYMBOL_TABLE '(' . ')'" },
    { 1, ms_transition_table_+691, "rule 13: code_body <- DUMP_SYMBOL_TABLE '(' ')' ." },
    { 2, ms_transition_table_+692, "rule 26: if_statement <- START_CODE IF . '(' expression ')' END_CODE" },
    { 15, ms_transition_table_+694, "rule 53: expression <- . STRING_LITERAL                             \nrule 54: expression <- . INTEGER_LITERAL                            \nrule 55: expression <- . SIZEOF '(' ID ')'                          \nrule 56: expression <- . KEYWORD_INT '(' expression ')'             \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'          \nrule 58: expression <- . STRING_LENGTH '(' expression ')'           \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'    \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'       \nrule 61: expression <- . IS_DEFINED '(' ID ')'                      \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'   \nrule 63: expression <- . ID                                         \nrule 64: expression <- . ID '[' expression ']'                      \nrule 65: expression <- . ID '?'                                     \nrule 66: expression <- . ID '[' expression ']' '?'                  \nrule 67: expression <- . expression '.' expression                  \nrule 68: expression <- . expression '|' '|' expression              \nrule 69: expression <- . expression '&' '&' expression              \nrule 70: expression <- . expression '=' '=' expression              \nrule 71: expression <- . expression '!' '=' expression              \nrule 72: expression <- . expression '<' expression                  \nrule 73: expression <- . expression '<' '=' expression              \nrule 74: expression <- . expression '>' expression                  \nrule 75: expression <- . expression '>' '=' expression              \nrule 76: expression <- . expression '+' expression                  \nrule 77: expression <- . expression '-' expression                  \nrule 78: expression <- . expression '*' expression                  \nrule 79: expression <- . expression '/' expression                  \nrule 80: expression <- . expression '%' expression                  \nrule 81: expression <- . '-' expression                             \nrule 82: expression <- . '!' expression                             \nrule 83: expression <- . '(' expression ')'                         \nrule 26: if_statement <- START_CODE IF '(' . expression ')' END_CODE" },
    { 14, ms_transition_table_+709, "rule 67: expression <- expression . '.' expression                  \nrule 68: expression <- expression . '|' '|' expression              \nrule 69: expression <- expression . '&' '&' expression              \nrule 70: expression <- expression . '=' '=' expression              \nrule 71: expression <- expression . '!' '=' expression              \nrule 72: expression <- expression . '<' expression                  \nrule 73: expression <- expression . '<' '=' expression              \nrule 74: expression <- expression . '>' expression                  \nrule 75: expression <- expression . '>' '=' expression              \nrule 76: expression <- expression . '+' expression                  \nrule 77: expression <- expression . '-' expression                  \nrule 78: expression <- expression . '*' expression                  \nrule 79: expression <- expression . '/' expression                  \nrule 80: expression <- expression . '%' expression                  \nrule 26: if_statement <- START_CODE IF '(' expression . ')' END_CODE" },
    { 2, ms_transition_table_+723, "rule 26: if_statement <- START_CODE IF '(' expression ')' . END_CODE" },
    { 1, ms_transition_table_+725, "rule 26: if_statement <- START_CODE IF '(' expression ')' END_CODE ." },
    { 2, ms_transition_table_+726, "rule 14: code_body <- UNDEFINE . '(' ID ')'" },
    { 2, ms_transition_table_+728, "rule 14: code_body <- UNDEFINE '(' . ID ')'" },
    { 2, ms_transition_table_+730, "rule 14: code_body <- UNDEFINE '(' ID . ')'" },
    { 1, ms_transition_table_+732, "rule 14: code_body <- UNDEFINE '(' ID ')' ." },
    { 2, ms_transition_table_+733, "rule 15: code_body <- DECLARE_ARRAY . '(' ID ')'" },
    { 2, ms_transition_table_+735, "rule 15: code_body <- DECLARE_ARRAY '(' . ID ')'" },
    { 2, ms_transition_table_+737, "rule 15: code_body <- DECLARE_ARRAY '(' ID . ')'" },
    { 1, ms_transition_table_+739, "rule 15: code_body <- DECLARE_ARRAY '(' ID ')' ." },
    { 2, ms_transition_table_+740, "rule 16: code_body <- DECLARE_MAP . '(' ID ')'" },
    { 2, ms_transition_table_+742, "rule 16: code_body <- DECLARE_MAP '(' . ID ')'" },
    { 2, ms_transition_table_+744, "rule 16: code_body <- DECLARE_MAP '(' ID . ')'" },
    { 1, ms_transition_table_+746, "rule 16: code_body <- DECLARE_MAP '(' ID ')' ." },
    { 2, ms_transition_table_+747, "rule 37: define_scalar <- START_CODE DEFINE . '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE DEFINE . '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE DEFINE . '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+749, "rule 37: define_scalar <- START_CODE DEFINE '(' . ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE DEFINE '(' . ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE DEFINE '(' . ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 3, ms_transition_table_+751, "rule 37: define_scalar <- START_CODE DEFINE '(' ID . ')' END_CODE                            \nrule 39: define_array_element <- START_CODE DEFINE '(' ID . '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE DEFINE '(' ID . '[' STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+754, "rule 37: define_scalar <- START_CODE DEFINE '(' ID ')' . END_CODE" },
    { 1, ms_transition_table_+756, "rule 37: define_scalar <- START_CODE DEFINE '(' ID ')' END_CODE ." },
    { 3, ms_transition_table_+757, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' . ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE DEFINE '(' ID '[' . STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+760, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' ']' . ')' END_CODE" },
    { 2, ms_transition_table_+762, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' ']' ')' . END_CODE" },
    { 1, ms_transition_table_+764, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' ']' ')' END_CODE ." },
    { 2, ms_transition_table_+765, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL . ']' ')' END_CODE" },
    { 2, ms_transition_table_+767, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' . ')' END_CODE" },
    { 2, ms_transition_table_+769, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' . END_CODE" },
    { 1, ms_transition_table_+771, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE ." },
    { 2, ms_transition_table_+772, "rule 45: loop <- START_CODE LOOP . '(' ID ',' expression ')' END_CODE" },
    { 2, ms_transition_table_+774, "rule 45: loop <- START_CODE LOOP '(' . ID ',' expression ')' END_CODE" },
    { 2, ms_transition_table_+776, "rule 45: loop <- START_CODE LOOP '(' ID . ',' expression ')' END_CODE" },
    { 15, ms_transition_table_+778, "rule 53: expression <- . STRING_LITERAL                              \nrule 54: expression <- . INTEGER_LITERAL                             \nrule 55: expression <- . SIZEOF '(' ID ')'                           \nrule 56: expression <- . KEYWORD_INT '(' expression ')'              \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'           \nrule 58: expression <- . STRING_LENGTH '(' expression ')'            \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'     \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'        \nrule 61: expression <- . IS_DEFINED '(' ID ')'                       \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'    \nrule 63: expression <- . ID                                          \nrule 64: expression <- . ID '[' expression ']'                       \nrule 65: expression <- . ID '?'                                      \nrule 66: expression <- . ID '[' expression ']' '?'                   \nrule 67: expression <- . expression '.' expression                   \nrule 68: expression <- . expression '|' '|' expression               \nrule 69: expression <- . expression '&' '&' expression               \nrule 70: expression <- . expression '=' '=' expression               \nrule 71: expression <- . expression '!' '=' expression               \nrule 72: expression <- . expression '<' expression                   \nrule 73: expression <- . expression '<' '=' expression               \nrule 74: expression <- . expression '>' expression                   \nrule 75: expression <- . expression '>' '=' expression               \nrule 76: expression <- . expression '+' expression                   \nrule 77: expression <- . expression '-' expression                   \nrule 78: expression <- . expression '*' expression                   \nrule 79: expression <- . expression '/' expression                   \nrule 80: expression <- . expression '%' expression                   \nrule 81: expression <- . '-' expression                              \nrule 82: expression <- . '!' expression                              \nrule 83: expression <- . '(' expression ')'                          \nrule 45: loop <- START_CODE LOOP '(' ID ',' . expression ')' END_CODE" },
    { 14, ms_transition_table_+793, "rule 67: expression <- expression . '.' expression                   \nrule 68: expression <- expression . '|' '|' expression               \nrule 69: expression <- expression . '&' '&' expression               \nrule 70: expression <- expression . '=' '=' expression               \nrule 71: expression <- expression . '!' '=' expression               \nrule 72: expression <- expression . '<' expression                   \nrule 73: expression <- expression . '<' '=' expression               \nrule 74: expression <- expression . '>' expression                   \nrule 75: expression <- expression . '>' '=' expression               \nrule 76: expression <- expression . '+' expression                   \nrule 77: expression <- expression . '-' expression                   \nrule 78: expression <- expression . '*' expression                   \nrule 79: expression <- expression . '/' expression                   \nrule 80: expression <- expression . '%' expression                   \nrule 45: loop <- START_CODE LOOP '(' ID ',' expression . ')' END_CODE" },
    { 2, ms_transition_table_+807, "rule 45: loop <- START_CODE LOOP '(' ID ',' expression ')' . END_CODE" },
    { 1, ms_transition_table_+809, "rule 45: loop <- START_CODE LOOP '(' ID ',' expression ')' END_CODE ." },
    { 2, ms_transition_table_+810, "rule 49: for_each <- START_CODE FOR_EACH . '(' ID ',' ID ')' END_CODE" },
    { 2, ms_transition_table_+812, "rule 49: for_each <- START_CODE FOR_EACH '(' . ID ',' ID ')' END_CODE" },
    { 2, ms_transition_table_+814, "rule 49: for_each <- START_CODE FOR_EACH '(' ID . ',' ID ')' END_CODE" },
    { 2, ms_transition_table_+816, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' . ID ')' END_CODE" },
    { 2, ms_transition_table_+818, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' ID . ')' END_CODE" },
    { 2, ms_transition_table_+820, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' ID ')' . END_CODE" },
    { 1, ms_transition_table_+822, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE ." },
    { 2, ms_transition_table_+823, "rule 17: code_body <- INCLUDE . '(' expression ')'" },
    { 15, ms_transition_table_+825, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 17: code_body <- INCLUDE '(' . expression ')'               " },
    { 14, ms_transition_table_+840, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 17: code_body <- INCLUDE '(' expression . ')'    " },
    { 1, ms_transition_table_+854, "rule 17: code_body <- INCLUDE '(' expression ')' ." },
    { 2, ms_transition_table_+855, "rule 18: code_body <- SANDBOX_INCLUDE . '(' expression ')'" },
    { 15, ms_transition_table_+857, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 18: code_body <- SANDBOX_INCLUDE '(' . expression ')'       " },
    { 14, ms_transition_table_+872, "rule 67: expression <- expression . '.' expression        \nrule 68: expression <- expression . '|' '|' expression    \nrule 69: expression <- expression . '&' '&' expression    \nrule 70: expression <- expression . '=' '=' expression    \nrule 71: expression <- expression . '!' '=' expression    \nrule 72: expression <- expression . '<' expression        \nrule 73: expression <- expression . '<' '=' expression    \nrule 74: expression <- expression . '>' expression        \nrule 75: expression <- expression . '>' '=' expression    \nrule 76: expression <- expression . '+' expression        \nrule 77: expression <- expression . '-' expression        \nrule 78: expression <- expression . '*' expression        \nrule 79: expression <- expression . '/' expression        \nrule 80: expression <- expression . '%' expression        \nrule 18: code_body <- SANDBOX_INCLUDE '(' expression . ')'" },
    { 1, ms_transition_table_+886, "rule 18: code_body <- SANDBOX_INCLUDE '(' expression ')' ." },
    { 2, ms_transition_table_+887, "rule 19: code_body <- WARNING . '(' expression ')'" },
    { 15, ms_transition_table_+889, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 19: code_body <- WARNING '(' . expression ')'               " },
    { 14, ms_transition_table_+904, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 19: code_body <- WARNING '(' expression . ')'    " },
    { 1, ms_transition_table_+918, "rule 19: code_body <- WARNING '(' expression ')' ." },
    { 2, ms_transition_table_+919, "rule 20: code_body <- ERROR . '(' expression ')'" },
    { 15, ms_transition_table_+921, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 20: code_body <- ERROR '(' . expression ')'                 " },
    { 14, ms_transition_table_+936, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 20: code_body <- ERROR '(' expression . ')'      " },
    { 1, ms_transition_table_+950, "rule 20: code_body <- ERROR '(' expression ')' ." },
    { 2, ms_transition_table_+951, "rule 21: code_body <- FATAL_ERROR . '(' expression ')'" },
    { 15, ms_transition_table_+953, "rule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 21: code_body <- FATAL_ERROR '(' . expression ')'           " },
    { 14, ms_transition_table_+968, "rule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    \nrule 21: code_body <- FATAL_ERROR '(' expression . ')'" },
    { 1, ms_transition_table_+982, "rule 21: code_body <- FATAL_ERROR '(' expression ')' ." },
    { 2, ms_transition_table_+983, "rule 9: code <- START_CODE code_body . END_CODE" },
    { 1, ms_transition_table_+985, "rule 9: code <- START_CODE code_body END_CODE ." },
    { 29, ms_transition_table_+986, "rule 11: code_body <- .                                                                         \nrule 12: code_body <- . expression                                                              \nrule 53: expression <- . STRING_LITERAL                                                         \nrule 54: expression <- . INTEGER_LITERAL                                                        \nrule 55: expression <- . SIZEOF '(' ID ')'                                                      \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                         \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                      \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                       \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                                \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                   \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                                  \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                               \nrule 63: expression <- . ID                                                                     \nrule 64: expression <- . ID '[' expression ']'                                                  \nrule 65: expression <- . ID '?'                                                                 \nrule 66: expression <- . ID '[' expression ']' '?'                                              \nrule 67: expression <- . expression '.' expression                                              \nrule 68: expression <- . expression '|' '|' expression                                          \nrule 69: expression <- . expression '&' '&' expression                                          \nrule 70: expression <- . expression '=' '=' expression                                          \nrule 71: expression <- . expression '!' '=' expression                                          \nrule 72: expression <- . expression '<' expression                                              \nrule 73: expression <- . expression '<' '=' expression                                          \nrule 74: expression <- . expression '>' expression                                              \nrule 75: expression <- . expression '>' '=' expression                                          \nrule 76: expression <- . expression '+' expression                                              \nrule 77: expression <- . expression '-' expression                                              \nrule 78: expression <- . expression '*' expression                                              \nrule 79: expression <- . expression '/' expression                                              \nrule 80: expression <- . expression '%' expression                                              \nrule 81: expression <- . '-' expression                                                         \nrule 82: expression <- . '!' expression                                                         \nrule 83: expression <- . '(' expression ')'                                                     \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                               \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                     \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                                \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                                  \nrule 17: code_body <- . INCLUDE '(' expression ')'                                              \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                      \nrule 19: code_body <- . WARNING '(' expression ')'                                              \nrule 20: code_body <- . ERROR '(' expression ')'                                                \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                          \nrule 10: code <- CODE_LINE . code_body CODE_NEWLINE                                             \nrule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE                         \nrule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        " },
    { 2, ms_transition_table_+1015, "rule 27: if_statement <- CODE_LINE IF . '(' expression ')' CODE_NEWLINE" },
    { 15, ms_transition_table_+1017, "rule 53: expression <- . STRING_LITERAL                                \nrule 54: expression <- . INTEGER_LITERAL                               \nrule 55: expression <- . SIZEOF '(' ID ')'                             \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'             \nrule 58: expression <- . STRING_LENGTH '(' expression ')'              \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'       \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'          \nrule 61: expression <- . IS_DEFINED '(' ID ')'                         \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'      \nrule 63: expression <- . ID                                            \nrule 64: expression <- . ID '[' expression ']'                         \nrule 65: expression <- . ID '?'                                        \nrule 66: expression <- . ID '[' expression ']' '?'                     \nrule 67: expression <- . expression '.' expression                     \nrule 68: expression <- . expression '|' '|' expression                 \nrule 69: expression <- . expression '&' '&' expression                 \nrule 70: expression <- . expression '=' '=' expression                 \nrule 71: expression <- . expression '!' '=' expression                 \nrule 72: expression <- . expression '<' expression                     \nrule 73: expression <- . expression '<' '=' expression                 \nrule 74: expression <- . expression '>' expression                     \nrule 75: expression <- . expression '>' '=' expression                 \nrule 76: expression <- . expression '+' expression                     \nrule 77: expression <- . expression '-' expression                     \nrule 78: expression <- . expression '*' expression                     \nrule 79: expression <- . expression '/' expression                     \nrule 80: expression <- . expression '%' expression                     \nrule 81: expression <- . '-' expression                                \nrule 82: expression <- . '!' expression                                \nrule 83: expression <- . '(' expression ')'                            \nrule 27: if_statement <- CODE_LINE IF '(' . expression ')' CODE_NEWLINE" },
    { 14, ms_transition_table_+1032, "rule 67: expression <- expression . '.' expression                     \nrule 68: expression <- expression . '|' '|' expression                 \nrule 69: expression <- expression . '&' '&' expression                 \nrule 70: expression <- expression . '=' '=' expression                 \nrule 71: expression <- expression . '!' '=' expression                 \nrule 72: expression <- expression . '<' expression                     \nrule 73: expression <- expression . '<' '=' expression                 \nrule 74: expression <- expression . '>' expression                     \nrule 75: expression <- expression . '>' '=' expression                 \nrule 76: expression <- expression . '+' expression                     \nrule 77: expression <- expression . '-' expression                     \nrule 78: expression <- expression . '*' expression                     \nrule 79: expression <- expression . '/' expression                     \nrule 80: expression <- expression . '%' expression                     \nrule 27: if_statement <- CODE_LINE IF '(' expression . ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1046, "rule 27: if_statement <- CODE_LINE IF '(' expression ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1048, "rule 27: if_statement <- CODE_LINE IF '(' expression ')' CODE_NEWLINE ." },
    { 2, ms_transition_table_+1049, "rule 38: define_scalar <- CODE_LINE DEFINE . '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE DEFINE . '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE DEFINE . '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1051, "rule 38: define_scalar <- CODE_LINE DEFINE '(' . ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE DEFINE '(' . ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE DEFINE '(' . ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1053, "rule 38: define_scalar <- CODE_LINE DEFINE '(' ID . ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE DEFINE '(' ID . '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE DEFINE '(' ID . '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1056, "rule 38: define_scalar <- CODE_LINE DEFINE '(' ID ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1058, "rule 38: define_scalar <- CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE ." },
    { 3, ms_transition_table_+1059, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' . ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' . STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1062, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' . ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1064, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1066, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE ." },
    { 2, ms_transition_table_+1067, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL . ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1069, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' . ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1071, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1073, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE ." },
    { 2, ms_transition_table_+1074, "rule 46: loop <- CODE_LINE LOOP . '(' ID ',' expression ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1076, "rule 46: loop <- CODE_LINE LOOP '(' . ID ',' expression ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1078, "rule 46: loop <- CODE_LINE LOOP '(' ID . ',' expression ')' CODE_NEWLINE" },
    { 15, ms_transition_table_+1080, "rule 53: expression <- . STRING_LITERAL                                 \nrule 54: expression <- . INTEGER_LITERAL                                \nrule 55: expression <- . SIZEOF '(' ID ')'                              \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                 \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'              \nrule 58: expression <- . STRING_LENGTH '(' expression ')'               \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'        \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'           \nrule 61: expression <- . IS_DEFINED '(' ID ')'                          \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'       \nrule 63: expression <- . ID                                             \nrule 64: expression <- . ID '[' expression ']'                          \nrule 65: expression <- . ID '?'                                         \nrule 66: expression <- . ID '[' expression ']' '?'                      \nrule 67: expression <- . expression '.' expression                      \nrule 68: expression <- . expression '|' '|' expression                  \nrule 69: expression <- . expression '&' '&' expression                  \nrule 70: expression <- . expression '=' '=' expression                  \nrule 71: expression <- . expression '!' '=' expression                  \nrule 72: expression <- . expression '<' expression                      \nrule 73: expression <- . expression '<' '=' expression                  \nrule 74: expression <- . expression '>' expression                      \nrule 75: expression <- . expression '>' '=' expression                  \nrule 76: expression <- . expression '+' expression                      \nrule 77: expression <- . expression '-' expression                      \nrule 78: expression <- . expression '*' expression                      \nrule 79: expression <- . expression '/' expression                      \nrule 80: expression <- . expression '%' expression                      \nrule 81: expression <- . '-' expression                                 \nrule 82: expression <- . '!' expression                                 \nrule 83: expression <- . '(' expression ')'                             \nrule 46: loop <- CODE_LINE LOOP '(' ID ',' . expression ')' CODE_NEWLINE" },
    { 14, ms_transition_table_+1095, "rule 67: expression <- expression . '.' expression                      \nrule 68: expression <- expression . '|' '|' expression                  \nrule 69: expression <- expression . '&' '&' expression                  \nrule 70: expression <- expression . '=' '=' expression                  \nrule 71: expression <- expression . '!' '=' expression                  \nrule 72: expression <- expression . '<' expression                      \nrule 73: expression <- expression . '<' '=' expression                  \nrule 74: expression <- expression . '>' expression                      \nrule 75: expression <- expression . '>' '=' expression                  \nrule 76: expression <- expression . '+' expression                      \nrule 77: expression <- expression . '-' expression                      \nrule 78: expression <- expression . '*' expression                      \nrule 79: expression <- expression . '/' expression                      \nrule 80: expression <- expression . '%' expression                      \nrule 46: loop <- CODE_LINE LOOP '(' ID ',' expression . ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1109, "rule 46: loop <- CODE_LINE LOOP '(' ID ',' expression ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1111, "rule 46: loop <- CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE ." },
    { 2, ms_transition_table_+1112, "rule 50: for_each <- CODE_LINE FOR_EACH . '(' ID ',' ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1114, "rule 50: for_each <- CODE_LINE FOR_EACH '(' . ID ',' ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1116, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID . ',' ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1118, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' . ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1120, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' ID . ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1122, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' ID ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1124, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE ." },
    { 2, ms_transition_table_+1125, "rule 10: code <- CODE_LINE code_body . CODE_NEWLINE" },
    { 1, ms_transition_table_+1127, "rule 10: code <- CODE_LINE code_body CODE_NEWLINE ." },
    { 2, ms_transition_table_+1128, "rule 2: body <- body executable .     \nrule 3: body <- body executable . TEXT" },
    { 1, ms_transition_table_+1130, "rule 3: body <- body executable TEXT ." },
    { 1, ms_transition_table_+1131, "rule 4: executable <- code ." },
    { 1, ms_transition_table_+1132, "rule 5: executable <- conditional_series ." },
    { 3, ms_transition_table_+1133, "rule 0: body <- .                                                        \nrule 1: body <- . TEXT                                                   \nrule 2: body <- . body executable                                        \nrule 22: conditional_series <- if_statement . body conditional_series_end\nrule 3: body <- . body executable TEXT                                   " },
    { 17, ms_transition_table_+1136, "rule 2: body <- body . executable                                                               \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 22: conditional_series <- if_statement body . conditional_series_end                       \nrule 23: conditional_series_end <- . end_if                                                     \nrule 32: end_if <- . START_CODE END_IF END_CODE                                                 \nrule 33: end_if <- . CODE_LINE END_IF CODE_NEWLINE                                              \nrule 24: conditional_series_end <- . else_statement body end_if                                 \nrule 28: else_statement <- . START_CODE ELSE END_CODE                                           \nrule 29: else_statement <- . CODE_LINE ELSE CODE_NEWLINE                                        \nrule 25: conditional_series_end <- . else_if_statement body conditional_series_end              \nrule 30: else_if_statement <- . START_CODE ELSE_IF '(' expression ')' END_CODE                  \nrule 31: else_if_statement <- . CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE               \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 3: body <- body . executable TEXT                                                          " },
    { 32, ms_transition_table_+1153, "rule 9: code <- START_CODE . code_body END_CODE                                              \nrule 11: code_body <- .                                                                      \nrule 12: code_body <- . expression                                                           \nrule 53: expression <- . STRING_LITERAL                                                      \nrule 54: expression <- . INTEGER_LITERAL                                                     \nrule 55: expression <- . SIZEOF '(' ID ')'                                                   \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                      \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                   \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                    \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                             \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                               \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                            \nrule 63: expression <- . ID                                                                  \nrule 64: expression <- . ID '[' expression ']'                                               \nrule 65: expression <- . ID '?'                                                              \nrule 66: expression <- . ID '[' expression ']' '?'                                           \nrule 67: expression <- . expression '.' expression                                           \nrule 68: expression <- . expression '|' '|' expression                                       \nrule 69: expression <- . expression '&' '&' expression                                       \nrule 70: expression <- . expression '=' '=' expression                                       \nrule 71: expression <- . expression '!' '=' expression                                       \nrule 72: expression <- . expression '<' expression                                           \nrule 73: expression <- . expression '<' '=' expression                                       \nrule 74: expression <- . expression '>' expression                                           \nrule 75: expression <- . expression '>' '=' expression                                       \nrule 76: expression <- . expression '+' expression                                           \nrule 77: expression <- . expression '-' expression                                           \nrule 78: expression <- . expression '*' expression                                           \nrule 79: expression <- . expression '/' expression                                           \nrule 80: expression <- . expression '%' expression                                           \nrule 81: expression <- . '-' expression                                                      \nrule 82: expression <- . '!' expression                                                      \nrule 83: expression <- . '(' expression ')'                                                  \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                            \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                  \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                             \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                               \nrule 17: code_body <- . INCLUDE '(' expression ')'                                           \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                   \nrule 19: code_body <- . WARNING '(' expression ')'                                           \nrule 20: code_body <- . ERROR '(' expression ')'                                             \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                       \nrule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE                         \nrule 32: end_if <- START_CODE . END_IF END_CODE                                              \nrule 28: else_statement <- START_CODE . ELSE END_CODE                                        \nrule 30: else_if_statement <- START_CODE . ELSE_IF '(' expression ')' END_CODE               \nrule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE\nrule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE                        \nrule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE                        " },
    { 2, ms_transition_table_+1185, "rule 28: else_statement <- START_CODE ELSE . END_CODE" },
    { 1, ms_transition_table_+1187, "rule 28: else_statement <- START_CODE ELSE END_CODE ." },
    { 2, ms_transition_table_+1188, "rule 30: else_if_statement <- START_CODE ELSE_IF . '(' expression ')' END_CODE" },
    { 15, ms_transition_table_+1190, "rule 53: expression <- . STRING_LITERAL                                       \nrule 54: expression <- . INTEGER_LITERAL                                      \nrule 55: expression <- . SIZEOF '(' ID ')'                                    \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                       \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                    \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                     \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'              \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                 \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'             \nrule 63: expression <- . ID                                                   \nrule 64: expression <- . ID '[' expression ']'                                \nrule 65: expression <- . ID '?'                                               \nrule 66: expression <- . ID '[' expression ']' '?'                            \nrule 67: expression <- . expression '.' expression                            \nrule 68: expression <- . expression '|' '|' expression                        \nrule 69: expression <- . expression '&' '&' expression                        \nrule 70: expression <- . expression '=' '=' expression                        \nrule 71: expression <- . expression '!' '=' expression                        \nrule 72: expression <- . expression '<' expression                            \nrule 73: expression <- . expression '<' '=' expression                        \nrule 74: expression <- . expression '>' expression                            \nrule 75: expression <- . expression '>' '=' expression                        \nrule 76: expression <- . expression '+' expression                            \nrule 77: expression <- . expression '-' expression                            \nrule 78: expression <- . expression '*' expression                            \nrule 79: expression <- . expression '/' expression                            \nrule 80: expression <- . expression '%' expression                            \nrule 81: expression <- . '-' expression                                       \nrule 82: expression <- . '!' expression                                       \nrule 83: expression <- . '(' expression ')'                                   \nrule 30: else_if_statement <- START_CODE ELSE_IF '(' . expression ')' END_CODE" },
    { 14, ms_transition_table_+1205, "rule 67: expression <- expression . '.' expression                            \nrule 68: expression <- expression . '|' '|' expression                        \nrule 69: expression <- expression . '&' '&' expression                        \nrule 70: expression <- expression . '=' '=' expression                        \nrule 71: expression <- expression . '!' '=' expression                        \nrule 72: expression <- expression . '<' expression                            \nrule 73: expression <- expression . '<' '=' expression                        \nrule 74: expression <- expression . '>' expression                            \nrule 75: expression <- expression . '>' '=' expression                        \nrule 76: expression <- expression . '+' expression                            \nrule 77: expression <- expression . '-' expression                            \nrule 78: expression <- expression . '*' expression                            \nrule 79: expression <- expression . '/' expression                            \nrule 80: expression <- expression . '%' expression                            \nrule 30: else_if_statement <- START_CODE ELSE_IF '(' expression . ')' END_CODE" },
    { 2, ms_transition_table_+1219, "rule 30: else_if_statement <- START_CODE ELSE_IF '(' expression ')' . END_CODE" },
    { 1, ms_transition_table_+1221, "rule 30: else_if_statement <- START_CODE ELSE_IF '(' expression ')' END_CODE ." },
    { 2, ms_transition_table_+1222, "rule 32: end_if <- START_CODE END_IF . END_CODE" },
    { 1, ms_transition_table_+1224, "rule 32: end_if <- START_CODE END_IF END_CODE ." },
    { 32, ms_transition_table_+1225, "rule 11: code_body <- .                                                                         \nrule 12: code_body <- . expression                                                              \nrule 53: expression <- . STRING_LITERAL                                                         \nrule 54: expression <- . INTEGER_LITERAL                                                        \nrule 55: expression <- . SIZEOF '(' ID ')'                                                      \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                         \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                      \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                       \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                                \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                   \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                                  \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                               \nrule 63: expression <- . ID                                                                     \nrule 64: expression <- . ID '[' expression ']'                                                  \nrule 65: expression <- . ID '?'                                                                 \nrule 66: expression <- . ID '[' expression ']' '?'                                              \nrule 67: expression <- . expression '.' expression                                              \nrule 68: expression <- . expression '|' '|' expression                                          \nrule 69: expression <- . expression '&' '&' expression                                          \nrule 70: expression <- . expression '=' '=' expression                                          \nrule 71: expression <- . expression '!' '=' expression                                          \nrule 72: expression <- . expression '<' expression                                              \nrule 73: expression <- . expression '<' '=' expression                                          \nrule 74: expression <- . expression '>' expression                                              \nrule 75: expression <- . expression '>' '=' expression                                          \nrule 76: expression <- . expression '+' expression                                              \nrule 77: expression <- . expression '-' expression                                              \nrule 78: expression <- . expression '*' expression                                              \nrule 79: expression <- . expression '/' expression                                              \nrule 80: expression <- . expression '%' expression                                              \nrule 81: expression <- . '-' expression                                                         \nrule 82: expression <- . '!' expression                                                         \nrule 83: expression <- . '(' expression ')'                                                     \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                               \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                     \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                                \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                                  \nrule 17: code_body <- . INCLUDE '(' expression ')'                                              \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                      \nrule 19: code_body <- . WARNING '(' expression ')'                                              \nrule 20: code_body <- . ERROR '(' expression ')'                                                \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                          \nrule 10: code <- CODE_LINE . code_body CODE_NEWLINE                                             \nrule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE                         \nrule 33: end_if <- CODE_LINE . END_IF CODE_NEWLINE                                              \nrule 29: else_statement <- CODE_LINE . ELSE CODE_NEWLINE                                        \nrule 31: else_if_statement <- CODE_LINE . ELSE_IF '(' expression ')' CODE_NEWLINE               \nrule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        " },
    { 2, ms_transition_table_+1257, "rule 29: else_statement <- CODE_LINE ELSE . CODE_NEWLINE" },
    { 1, ms_transition_table_+1259, "rule 29: else_statement <- CODE_LINE ELSE CODE_NEWLINE ." },
    { 2, ms_transition_table_+1260, "rule 31: else_if_statement <- CODE_LINE ELSE_IF . '(' expression ')' CODE_NEWLINE" },
    { 15, ms_transition_table_+1262, "rule 53: expression <- . STRING_LITERAL                                          \nrule 54: expression <- . INTEGER_LITERAL                                         \nrule 55: expression <- . SIZEOF '(' ID ')'                                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                 \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                \nrule 63: expression <- . ID                                                      \nrule 64: expression <- . ID '[' expression ']'                                   \nrule 65: expression <- . ID '?'                                                  \nrule 66: expression <- . ID '[' expression ']' '?'                               \nrule 67: expression <- . expression '.' expression                               \nrule 68: expression <- . expression '|' '|' expression                           \nrule 69: expression <- . expression '&' '&' expression                           \nrule 70: expression <- . expression '=' '=' expression                           \nrule 71: expression <- . expression '!' '=' expression                           \nrule 72: expression <- . expression '<' expression                               \nrule 73: expression <- . expression '<' '=' expression                           \nrule 74: expression <- . expression '>' expression                               \nrule 75: expression <- . expression '>' '=' expression                           \nrule 76: expression <- . expression '+' expression                               \nrule 77: expression <- . expression '-' expression                               \nrule 78: expression <- . expression '*' expression                               \nrule 79: expression <- . expression '/' expression                               \nrule 80: expression <- . expression '%' expression                               \nrule 81: expression <- . '-' expression                                          \nrule 82: expression <- . '!' expression                                          \nrule 83: expression <- . '(' expression ')'                                      \nrule 31: else_if_statement <- CODE_LINE ELSE_IF '(' . expression ')' CODE_NEWLINE" },
    { 14, ms_transition_table_+1277, "rule 67: expression <- expression . '.' expression                               \nrule 68: expression <- expression . '|' '|' expression                           \nrule 69: expression <- expression . '&' '&' expression                           \nrule 70: expression <- expression . '=' '=' expression                           \nrule 71: expression <- expression . '!' '=' expression                           \nrule 72: expression <- expression . '<' expression                               \nrule 73: expression <- expression . '<' '=' expression                           \nrule 74: expression <- expression . '>' expression                               \nrule 75: expression <- expression . '>' '=' expression                           \nrule 76: expression <- expression . '+' expression                               \nrule 77: expression <- expression . '-' expression                               \nrule 78: expression <- expression . '*' expression                               \nrule 79: expression <- expression . '/' expression                               \nrule 80: expression <- expression . '%' expression                               \nrule 31: else_if_statement <- CODE_LINE ELSE_IF '(' expression . ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1291, "rule 31: else_if_statement <- CODE_LINE ELSE_IF '(' expression ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1293, "rule 31: else_if_statement <- CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE ." },
    { 2, ms_transition_table_+1294, "rule 33: end_if <- CODE_LINE END_IF . CODE_NEWLINE" },
    { 1, ms_transition_table_+1296, "rule 33: end_if <- CODE_LINE END_IF CODE_NEWLINE ." },
    { 1, ms_transition_table_+1297, "rule 22: conditional_series <- if_statement body conditional_series_end ." },
    { 3, ms_transition_table_+1298, "rule 0: body <- .                                              \nrule 1: body <- . TEXT                                         \nrule 2: body <- . body executable                              \nrule 24: conditional_series_end <- else_statement . body end_if\nrule 3: body <- . body executable TEXT                         " },
    { 14, ms_transition_table_+1301, "rule 2: body <- body . executable                                                               \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 32: end_if <- . START_CODE END_IF END_CODE                                                 \nrule 33: end_if <- . CODE_LINE END_IF CODE_NEWLINE                                              \nrule 24: conditional_series_end <- else_statement body . end_if                                 \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 3: body <- body . executable TEXT                                                          " },
    { 30, ms_transition_table_+1315, "rule 9: code <- START_CODE . code_body END_CODE                                              \nrule 11: code_body <- .                                                                      \nrule 12: code_body <- . expression                                                           \nrule 53: expression <- . STRING_LITERAL                                                      \nrule 54: expression <- . INTEGER_LITERAL                                                     \nrule 55: expression <- . SIZEOF '(' ID ')'                                                   \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                      \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                   \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                    \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                             \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                               \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                            \nrule 63: expression <- . ID                                                                  \nrule 64: expression <- . ID '[' expression ']'                                               \nrule 65: expression <- . ID '?'                                                              \nrule 66: expression <- . ID '[' expression ']' '?'                                           \nrule 67: expression <- . expression '.' expression                                           \nrule 68: expression <- . expression '|' '|' expression                                       \nrule 69: expression <- . expression '&' '&' expression                                       \nrule 70: expression <- . expression '=' '=' expression                                       \nrule 71: expression <- . expression '!' '=' expression                                       \nrule 72: expression <- . expression '<' expression                                           \nrule 73: expression <- . expression '<' '=' expression                                       \nrule 74: expression <- . expression '>' expression                                           \nrule 75: expression <- . expression '>' '=' expression                                       \nrule 76: expression <- . expression '+' expression                                           \nrule 77: expression <- . expression '-' expression                                           \nrule 78: expression <- . expression '*' expression                                           \nrule 79: expression <- . expression '/' expression                                           \nrule 80: expression <- . expression '%' expression                                           \nrule 81: expression <- . '-' expression                                                      \nrule 82: expression <- . '!' expression                                                      \nrule 83: expression <- . '(' expression ')'                                                  \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                            \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                  \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                             \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                               \nrule 17: code_body <- . INCLUDE '(' expression ')'                                           \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                   \nrule 19: code_body <- . WARNING '(' expression ')'                                           \nrule 20: code_body <- . ERROR '(' expression ')'                                             \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                       \nrule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE                         \nrule 32: end_if <- START_CODE . END_IF END_CODE                                              \nrule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE\nrule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE                        \nrule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE                        " },
    { 30, ms_transition_table_+1345, "rule 11: code_body <- .                                                                         \nrule 12: code_body <- . expression                                                              \nrule 53: expression <- . STRING_LITERAL                                                         \nrule 54: expression <- . INTEGER_LITERAL                                                        \nrule 55: expression <- . SIZEOF '(' ID ')'                                                      \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                         \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                      \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                       \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                                \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                   \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                                  \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                               \nrule 63: expression <- . ID                                                                     \nrule 64: expression <- . ID '[' expression ']'                                                  \nrule 65: expression <- . ID '?'                                                                 \nrule 66: expression <- . ID '[' expression ']' '?'                                              \nrule 67: expression <- . expression '.' expression                                              \nrule 68: expression <- . expression '|' '|' expression                                          \nrule 69: expression <- . expression '&' '&' expression                                          \nrule 70: expression <- . expression '=' '=' expression                                          \nrule 71: expression <- . expression '!' '=' expression                                          \nrule 72: expression <- . expression '<' expression                                              \nrule 73: expression <- . expression '<' '=' expression                                          \nrule 74: expression <- . expression '>' expression                                              \nrule 75: expression <- . expression '>' '=' expression                                          \nrule 76: expression <- . expression '+' expression                                              \nrule 77: expression <- . expression '-' expression                                              \nrule 78: expression <- . expression '*' expression                                              \nrule 79: expression <- . expression '/' expression                                              \nrule 80: expression <- . expression '%' expression                                              \nrule 81: expression <- . '-' expression                                                         \nrule 82: expression <- . '!' expression                                                         \nrule 83: expression <- . '(' expression ')'                                                     \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                               \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                     \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                                \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                                  \nrule 17: code_body <- . INCLUDE '(' expression ')'                                              \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                      \nrule 19: code_body <- . WARNING '(' expression ')'                                              \nrule 20: code_body <- . ERROR '(' expression ')'                                                \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                          \nrule 10: code <- CODE_LINE . code_body CODE_NEWLINE                                             \nrule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE                         \nrule 33: end_if <- CODE_LINE . END_IF CODE_NEWLINE                                              \nrule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        " },
    { 1, ms_transition_table_+1375, "rule 24: conditional_series_end <- else_statement body end_if ." },
    { 3, ms_transition_table_+1376, "rule 0: body <- .                             \nrule 1: body <- . TEXT                        \nrule 2: body <- . body executable             \nrule 6: executable <- define . body end_define\nrule 3: body <- . body executable TEXT        " },
    { 14, ms_transition_table_+1379, "rule 2: body <- body . executable                                                               \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 6: executable <- define body . end_define                                                  \nrule 43: end_define <- . START_CODE END_DEFINE END_CODE                                         \nrule 44: end_define <- . CODE_LINE END_DEFINE CODE_NEWLINE                                      \nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 3: body <- body . executable TEXT                                                          " },
    { 30, ms_transition_table_+1393, "rule 9: code <- START_CODE . code_body END_CODE                                              \nrule 11: code_body <- .                                                                      \nrule 12: code_body <- . expression                                                           \nrule 53: expression <- . STRING_LITERAL                                                      \nrule 54: expression <- . INTEGER_LITERAL                                                     \nrule 55: expression <- . SIZEOF '(' ID ')'                                                   \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                      \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                   \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                    \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                             \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                               \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                            \nrule 63: expression <- . ID                                                                  \nrule 64: expression <- . ID '[' expression ']'                                               \nrule 65: expression <- . ID '?'                                                              \nrule 66: expression <- . ID '[' expression ']' '?'                                           \nrule 67: expression <- . expression '.' expression                                           \nrule 68: expression <- . expression '|' '|' expression                                       \nrule 69: expression <- . expression '&' '&' expression                                       \nrule 70: expression <- . expression '=' '=' expression                                       \nrule 71: expression <- . expression '!' '=' expression                                       \nrule 72: expression <- . expression '<' expression                                           \nrule 73: expression <- . expression '<' '=' expression                                       \nrule 74: expression <- . expression '>' expression                                           \nrule 75: expression <- . expression '>' '=' expression                                       \nrule 76: expression <- . expression '+' expression                                           \nrule 77: expression <- . expression '-' expression                                           \nrule 78: expression <- . expression '*' expression                                           \nrule 79: expression <- . expression '/' expression                                           \nrule 80: expression <- . expression '%' expression                                           \nrule 81: expression <- . '-' expression                                                      \nrule 82: expression <- . '!' expression                                                      \nrule 83: expression <- . '(' expression ')'                                                  \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                            \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                  \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                             \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                               \nrule 17: code_body <- . INCLUDE '(' expression ')'                                           \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                   \nrule 19: code_body <- . WARNING '(' expression ')'                                           \nrule 20: code_body <- . ERROR '(' expression ')'                                             \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                       \nrule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE                         \nrule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE\nrule 43: end_define <- START_CODE . END_DEFINE END_CODE                                      \nrule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE                        \nrule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE                        " },
    { 2, ms_transition_table_+1423, "rule 43: end_define <- START_CODE END_DEFINE . END_CODE" },
    { 1, ms_transition_table_+1425, "rule 43: end_define <- START_CODE END_DEFINE END_CODE ." },
    { 30, ms_transition_table_+1426, "rule 11: code_body <- .                                                                         \nrule 12: code_body <- . expression                                                              \nrule 53: expression <- . STRING_LITERAL                                                         \nrule 54: expression <- . INTEGER_LITERAL                                                        \nrule 55: expression <- . SIZEOF '(' ID ')'                                                      \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                         \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                      \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                       \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                                \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                   \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                                  \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                               \nrule 63: expression <- . ID                                                                     \nrule 64: expression <- . ID '[' expression ']'                                                  \nrule 65: expression <- . ID '?'                                                                 \nrule 66: expression <- . ID '[' expression ']' '?'                                              \nrule 67: expression <- . expression '.' expression                                              \nrule 68: expression <- . expression '|' '|' expression                                          \nrule 69: expression <- . expression '&' '&' expression                                          \nrule 70: expression <- . expression '=' '=' expression                                          \nrule 71: expression <- . expression '!' '=' expression                                          \nrule 72: expression <- . expression '<' expression                                              \nrule 73: expression <- . expression '<' '=' expression                                          \nrule 74: expression <- . expression '>' expression                                              \nrule 75: expression <- . expression '>' '=' expression                                          \nrule 76: expression <- . expression '+' expression                                              \nrule 77: expression <- . expression '-' expression                                              \nrule 78: expression <- . expression '*' expression                                              \nrule 79: expression <- . expression '/' expression                                              \nrule 80: expression <- . expression '%' expression                                              \nrule 81: expression <- . '-' expression                                                         \nrule 82: expression <- . '!' expression                                                         \nrule 83: expression <- . '(' expression ')'                                                     \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                               \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                     \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                                \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                                  \nrule 17: code_body <- . INCLUDE '(' expression ')'                                              \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                      \nrule 19: code_body <- . WARNING '(' expression ')'                                              \nrule 20: code_body <- . ERROR '(' expression ')'                                                \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                          \nrule 10: code <- CODE_LINE . code_body CODE_NEWLINE                                             \nrule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE                         \nrule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 44: end_define <- CODE_LINE . END_DEFINE CODE_NEWLINE                                      \nrule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        " },
    { 2, ms_transition_table_+1456, "rule 44: end_define <- CODE_LINE END_DEFINE . CODE_NEWLINE" },
    { 1, ms_transition_table_+1458, "rule 44: end_define <- CODE_LINE END_DEFINE CODE_NEWLINE ." },
    { 1, ms_transition_table_+1459, "rule 34: define <- define_scalar ." },
    { 1, ms_transition_table_+1460, "rule 35: define <- define_array_element ." },
    { 1, ms_transition_table_+1461, "rule 36: define <- define_map_element ." },
    { 1, ms_transition_table_+1462, "rule 6: executable <- define body end_define ." },
    { 3, ms_transition_table_+1463, "rule 0: body <- .                         \nrule 1: body <- . TEXT                    \nrule 2: body <- . body executable         \nrule 7: executable <- loop . body end_loop\nrule 3: body <- . body executable TEXT    " },
    { 14, ms_transition_table_+1466, "rule 2: body <- body . executable                                                               \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 7: executable <- loop body . end_loop                                                      \nrule 47: end_loop <- . START_CODE END_LOOP END_CODE                                             \nrule 48: end_loop <- . CODE_LINE END_LOOP CODE_NEWLINE                                          \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 3: body <- body . executable TEXT                                                          " },
    { 30, ms_transition_table_+1480, "rule 9: code <- START_CODE . code_body END_CODE                                              \nrule 11: code_body <- .                                                                      \nrule 12: code_body <- . expression                                                           \nrule 53: expression <- . STRING_LITERAL                                                      \nrule 54: expression <- . INTEGER_LITERAL                                                     \nrule 55: expression <- . SIZEOF '(' ID ')'                                                   \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                      \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                   \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                    \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                             \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                               \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                            \nrule 63: expression <- . ID                                                                  \nrule 64: expression <- . ID '[' expression ']'                                               \nrule 65: expression <- . ID '?'                                                              \nrule 66: expression <- . ID '[' expression ']' '?'                                           \nrule 67: expression <- . expression '.' expression                                           \nrule 68: expression <- . expression '|' '|' expression                                       \nrule 69: expression <- . expression '&' '&' expression                                       \nrule 70: expression <- . expression '=' '=' expression                                       \nrule 71: expression <- . expression '!' '=' expression                                       \nrule 72: expression <- . expression '<' expression                                           \nrule 73: expression <- . expression '<' '=' expression                                       \nrule 74: expression <- . expression '>' expression                                           \nrule 75: expression <- . expression '>' '=' expression                                       \nrule 76: expression <- . expression '+' expression                                           \nrule 77: expression <- . expression '-' expression                                           \nrule 78: expression <- . expression '*' expression                                           \nrule 79: expression <- . expression '/' expression                                           \nrule 80: expression <- . expression '%' expression                                           \nrule 81: expression <- . '-' expression                                                      \nrule 82: expression <- . '!' expression                                                      \nrule 83: expression <- . '(' expression ')'                                                  \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                            \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                  \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                             \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                               \nrule 17: code_body <- . INCLUDE '(' expression ')'                                           \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                   \nrule 19: code_body <- . WARNING '(' expression ')'                                           \nrule 20: code_body <- . ERROR '(' expression ')'                                             \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                       \nrule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE                         \nrule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE\nrule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE                        \nrule 47: end_loop <- START_CODE . END_LOOP END_CODE                                          \nrule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE                        " },
    { 2, ms_transition_table_+1510, "rule 47: end_loop <- START_CODE END_LOOP . END_CODE" },
    { 1, ms_transition_table_+1512, "rule 47: end_loop <- START_CODE END_LOOP END_CODE ." },
    { 30, ms_transition_table_+1513, "rule 11: code_body <- .                                                                         \nrule 12: code_body <- . expression                                                              \nrule 53: expression <- . STRING_LITERAL                                                         \nrule 54: expression <- . INTEGER_LITERAL                                                        \nrule 55: expression <- . SIZEOF '(' ID ')'                                                      \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                         \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                      \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                       \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                                \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                   \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                                  \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                               \nrule 63: expression <- . ID                                                                     \nrule 64: expression <- . ID '[' expression ']'                                                  \nrule 65: expression <- . ID '?'                                                                 \nrule 66: expression <- . ID '[' expression ']' '?'                                              \nrule 67: expression <- . expression '.' expression                                              \nrule 68: expression <- . expression '|' '|' expression                                          \nrule 69: expression <- . expression '&' '&' expression                                          \nrule 70: expression <- . expression '=' '=' expression                                          \nrule 71: expression <- . expression '!' '=' expression                                          \nrule 72: expression <- . expression '<' expression                                              \nrule 73: expression <- . expression '<' '=' expression                                          \nrule 74: expression <- . expression '>' expression                                              \nrule 75: expression <- . expression '>' '=' expression                                          \nrule 76: expression <- . expression '+' expression                                              \nrule 77: expression <- . expression '-' expression                                              \nrule 78: expression <- . expression '*' expression                                              \nrule 79: expression <- . expression '/' expression                                              \nrule 80: expression <- . expression '%' expression                                              \nrule 81: expression <- . '-' expression                                                         \nrule 82: expression <- . '!' expression                                                         \nrule 83: expression <- . '(' expression ')'                                                     \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                               \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                     \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                                \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                                  \nrule 17: code_body <- . INCLUDE '(' expression ')'                                              \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                      \nrule 19: code_body <- . WARNING '(' expression ')'                                              \nrule 20: code_body <- . ERROR '(' expression ')'                                                \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                          \nrule 10: code <- CODE_LINE . code_body CODE_NEWLINE                                             \nrule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE                         \nrule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 48: end_loop <- CODE_LINE . END_LOOP CODE_NEWLINE                                          \nrule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        " },
    { 2, ms_transition_table_+1543, "rule 48: end_loop <- CODE_LINE END_LOOP . CODE_NEWLINE" },
    { 1, ms_transition_table_+1545, "rule 48: end_loop <- CODE_LINE END_LOOP CODE_NEWLINE ." },
    { 1, ms_transition_table_+1546, "rule 7: executable <- loop body end_loop ." },
    { 3, ms_transition_table_+1547, "rule 0: body <- .                                 \nrule 1: body <- . TEXT                            \nrule 2: body <- . body executable                 \nrule 8: executable <- for_each . body end_for_each\nrule 3: body <- . body executable TEXT            " },
    { 14, ms_transition_table_+1550, "rule 2: body <- body . executable                                                               \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 8: executable <- for_each body . end_for_each                                              \nrule 51: end_for_each <- . START_CODE END_FOR_EACH END_CODE                                     \nrule 52: end_for_each <- . CODE_LINE END_FOR_EACH CODE_NEWLINE                                  \nrule 3: body <- body . executable TEXT                                                          " },
    { 30, ms_transition_table_+1564, "rule 9: code <- START_CODE . code_body END_CODE                                              \nrule 11: code_body <- .                                                                      \nrule 12: code_body <- . expression                                                           \nrule 53: expression <- . STRING_LITERAL                                                      \nrule 54: expression <- . INTEGER_LITERAL                                                     \nrule 55: expression <- . SIZEOF '(' ID ')'                                                   \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                      \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                   \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                    \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                             \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                               \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                            \nrule 63: expression <- . ID                                                                  \nrule 64: expression <- . ID '[' expression ']'                                               \nrule 65: expression <- . ID '?'                                                              \nrule 66: expression <- . ID '[' expression ']' '?'                                           \nrule 67: expression <- . expression '.' expression                                           \nrule 68: expression <- . expression '|' '|' expression                                       \nrule 69: expression <- . expression '&' '&' expression                                       \nrule 70: expression <- . expression '=' '=' expression                                       \nrule 71: expression <- . expression '!' '=' expression                                       \nrule 72: expression <- . expression '<' expression                                           \nrule 73: expression <- . expression '<' '=' expression                                       \nrule 74: expression <- . expression '>' expression                                           \nrule 75: expression <- . expression '>' '=' expression                                       \nrule 76: expression <- . expression '+' expression                                           \nrule 77: expression <- . expression '-' expression                                           \nrule 78: expression <- . expression '*' expression                                           \nrule 79: expression <- . expression '/' expression                                           \nrule 80: expression <- . expression '%' expression                                           \nrule 81: expression <- . '-' expression                                                      \nrule 82: expression <- . '!' expression                                                      \nrule 83: expression <- . '(' expression ')'                                                  \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                            \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                  \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                             \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                               \nrule 17: code_body <- . INCLUDE '(' expression ')'                                           \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                   \nrule 19: code_body <- . WARNING '(' expression ')'                                           \nrule 20: code_body <- . ERROR '(' expression ')'                                             \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                       \nrule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE                         \nrule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE\nrule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE                        \nrule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE                        \nrule 51: end_for_each <- START_CODE . END_FOR_EACH END_CODE                                  " },
    { 2, ms_transition_table_+1594, "rule 51: end_for_each <- START_CODE END_FOR_EACH . END_CODE" },
    { 1, ms_transition_table_+1596, "rule 51: end_for_each <- START_CODE END_FOR_EACH END_CODE ." },
    { 30, ms_transition_table_+1597, "rule 11: code_body <- .                                                                         \nrule 12: code_body <- . expression                                                              \nrule 53: expression <- . STRING_LITERAL                                                         \nrule 54: expression <- . INTEGER_LITERAL                                                        \nrule 55: expression <- . SIZEOF '(' ID ')'                                                      \nrule 56: expression <- . KEYWORD_INT '(' expression ')'                                         \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'                                      \nrule 58: expression <- . STRING_LENGTH '(' expression ')'                                       \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'                                \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'                                   \nrule 61: expression <- . IS_DEFINED '(' ID ')'                                                  \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'                               \nrule 63: expression <- . ID                                                                     \nrule 64: expression <- . ID '[' expression ']'                                                  \nrule 65: expression <- . ID '?'                                                                 \nrule 66: expression <- . ID '[' expression ']' '?'                                              \nrule 67: expression <- . expression '.' expression                                              \nrule 68: expression <- . expression '|' '|' expression                                          \nrule 69: expression <- . expression '&' '&' expression                                          \nrule 70: expression <- . expression '=' '=' expression                                          \nrule 71: expression <- . expression '!' '=' expression                                          \nrule 72: expression <- . expression '<' expression                                              \nrule 73: expression <- . expression '<' '=' expression                                          \nrule 74: expression <- . expression '>' expression                                              \nrule 75: expression <- . expression '>' '=' expression                                          \nrule 76: expression <- . expression '+' expression                                              \nrule 77: expression <- . expression '-' expression                                              \nrule 78: expression <- . expression '*' expression                                              \nrule 79: expression <- . expression '/' expression                                              \nrule 80: expression <- . expression '%' expression                                              \nrule 81: expression <- . '-' expression                                                         \nrule 82: expression <- . '!' expression                                                         \nrule 83: expression <- . '(' expression ')'                                                     \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                                               \nrule 14: code_body <- . UNDEFINE '(' ID ')'                                                     \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                                                \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                                                  \nrule 17: code_body <- . INCLUDE '(' expression ')'                                              \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'                                      \nrule 19: code_body <- . WARNING '(' expression ')'                                              \nrule 20: code_body <- . ERROR '(' expression ')'                                                \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'                                          \nrule 10: code <- CODE_LINE . code_body CODE_NEWLINE                                             \nrule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE                         \nrule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 52: end_for_each <- CODE_LINE . END_FOR_EACH CODE_NEWLINE                                  " },
    { 2, ms_transition_table_+1627, "rule 52: end_for_each <- CODE_LINE END_FOR_EACH . CODE_NEWLINE" },
    { 1, ms_transition_table_+1629, "rule 52: end_for_each <- CODE_LINE END_FOR_EACH CODE_NEWLINE ." },
    { 1, ms_transition_table_+1630, "rule 8: executable <- for_each body end_for_each ." },
    { 3, ms_transition_table_+1631, "rule 0: body <- .                                                                 \nrule 1: body <- . TEXT                                                            \nrule 2: body <- . body executable                                                 \nrule 25: conditional_series_end <- else_if_statement . body conditional_series_end\nrule 3: body <- . body executable TEXT                                            " },
    { 17, ms_transition_table_+1634, "rule 2: body <- body . executable                                                               \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 23: conditional_series_end <- . end_if                                                     \nrule 32: end_if <- . START_CODE END_IF END_CODE                                                 \nrule 33: end_if <- . CODE_LINE END_IF CODE_NEWLINE                                              \nrule 24: conditional_series_end <- . else_statement body end_if                                 \nrule 28: else_statement <- . START_CODE ELSE END_CODE                                           \nrule 29: else_statement <- . CODE_LINE ELSE CODE_NEWLINE                                        \nrule 25: conditional_series_end <- . else_if_statement body conditional_series_end              \nrule 30: else_if_statement <- . START_CODE ELSE_IF '(' expression ')' END_CODE                  \nrule 31: else_if_statement <- . CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE               \nrule 25: conditional_series_end <- else_if_statement body . conditional_series_end              \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        \nrule 3: body <- body . executable TEXT                                                          " },
    { 1, ms_transition_table_+1651, "rule 25: conditional_series_end <- else_if_statement body conditional_series_end ." },
    { 1, ms_transition_table_+1652, "rule 23: conditional_series_end <- end_if ." },
    { 13, ms_transition_table_+1653, "START executable                                                                                \nrule 4: executable <- . code                                                                    \nrule 9: code <- . START_CODE code_body END_CODE                                                 \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE                                             \nrule 5: executable <- . conditional_series                                                      \nrule 22: conditional_series <- . if_statement body conditional_series_end                       \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE                            \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE                         \nrule 6: executable <- . define body end_define                                                  \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE\nrule 7: executable <- . loop body end_loop                                                      \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE                           \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE                        \nrule 8: executable <- . for_each body end_for_each                                              \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE                           \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE                        " },
    { 1, ms_transition_table_+1666, "RETURN executable" },
    { 4, ms_transition_table_+1667, "START code                                         \nrule 9: code <- . START_CODE code_body END_CODE    \nrule 10: code <- . CODE_LINE code_body CODE_NEWLINE" },
    { 25, ms_transition_table_+1671, "rule 9: code <- START_CODE . code_body END_CODE                  \nrule 11: code_body <- .                                          \nrule 12: code_body <- . expression                               \nrule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                \nrule 14: code_body <- . UNDEFINE '(' ID ')'                      \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                 \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                   \nrule 17: code_body <- . INCLUDE '(' expression ')'               \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'       \nrule 19: code_body <- . WARNING '(' expression ')'               \nrule 20: code_body <- . ERROR '(' expression ')'                 \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'           " },
    { 25, ms_transition_table_+1696, "rule 11: code_body <- .                                          \nrule 12: code_body <- . expression                               \nrule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                \nrule 14: code_body <- . UNDEFINE '(' ID ')'                      \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                 \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                   \nrule 17: code_body <- . INCLUDE '(' expression ')'               \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'       \nrule 19: code_body <- . WARNING '(' expression ')'               \nrule 20: code_body <- . ERROR '(' expression ')'                 \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'           \nrule 10: code <- CODE_LINE . code_body CODE_NEWLINE              " },
    { 1, ms_transition_table_+1721, "RETURN code" },
    { 25, ms_transition_table_+1722, "START code_body                                                  \nrule 11: code_body <- .                                          \nrule 12: code_body <- . expression                               \nrule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      \nrule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'                \nrule 14: code_body <- . UNDEFINE '(' ID ')'                      \nrule 15: code_body <- . DECLARE_ARRAY '(' ID ')'                 \nrule 16: code_body <- . DECLARE_MAP '(' ID ')'                   \nrule 17: code_body <- . INCLUDE '(' expression ')'               \nrule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'       \nrule 19: code_body <- . WARNING '(' expression ')'               \nrule 20: code_body <- . ERROR '(' expression ')'                 \nrule 21: code_body <- . FATAL_ERROR '(' expression ')'           " },
    { 1, ms_transition_table_+1747, "RETURN code_body" },
    { 5, ms_transition_table_+1748, "START conditional_series                                                 \nrule 22: conditional_series <- . if_statement body conditional_series_end\nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE     \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE  " },
    { 2, ms_transition_table_+1753, "rule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE" },
    { 2, ms_transition_table_+1755, "rule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1757, "RETURN conditional_series" },
    { 7, ms_transition_table_+1758, "START conditional_series_end                                                      \nrule 23: conditional_series_end <- . end_if                                       \nrule 32: end_if <- . START_CODE END_IF END_CODE                                   \nrule 33: end_if <- . CODE_LINE END_IF CODE_NEWLINE                                \nrule 24: conditional_series_end <- . else_statement body end_if                   \nrule 28: else_statement <- . START_CODE ELSE END_CODE                             \nrule 29: else_statement <- . CODE_LINE ELSE CODE_NEWLINE                          \nrule 25: conditional_series_end <- . else_if_statement body conditional_series_end\nrule 30: else_if_statement <- . START_CODE ELSE_IF '(' expression ')' END_CODE    \nrule 31: else_if_statement <- . CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE " },
    { 4, ms_transition_table_+1765, "rule 32: end_if <- START_CODE . END_IF END_CODE                               \nrule 28: else_statement <- START_CODE . ELSE END_CODE                         \nrule 30: else_if_statement <- START_CODE . ELSE_IF '(' expression ')' END_CODE" },
    { 4, ms_transition_table_+1769, "rule 33: end_if <- CODE_LINE . END_IF CODE_NEWLINE                               \nrule 29: else_statement <- CODE_LINE . ELSE CODE_NEWLINE                         \nrule 31: else_if_statement <- CODE_LINE . ELSE_IF '(' expression ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1773, "RETURN conditional_series_end" },
    { 4, ms_transition_table_+1774, "START if_statement                                                     \nrule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE   \nrule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1778, "RETURN if_statement" },
    { 4, ms_transition_table_+1779, "START else_statement                                    \nrule 28: else_statement <- . START_CODE ELSE END_CODE   \nrule 29: else_statement <- . CODE_LINE ELSE CODE_NEWLINE" },
    { 2, ms_transition_table_+1783, "rule 28: else_statement <- START_CODE . ELSE END_CODE" },
    { 2, ms_transition_table_+1785, "rule 29: else_statement <- CODE_LINE . ELSE CODE_NEWLINE" },
    { 1, ms_transition_table_+1787, "RETURN else_statement" },
    { 4, ms_transition_table_+1788, "START else_if_statement                                                          \nrule 30: else_if_statement <- . START_CODE ELSE_IF '(' expression ')' END_CODE   \nrule 31: else_if_statement <- . CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1792, "rule 30: else_if_statement <- START_CODE . ELSE_IF '(' expression ')' END_CODE" },
    { 2, ms_transition_table_+1794, "rule 31: else_if_statement <- CODE_LINE . ELSE_IF '(' expression ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1796, "RETURN else_if_statement" },
    { 4, ms_transition_table_+1797, "START end_if                                      \nrule 32: end_if <- . START_CODE END_IF END_CODE   \nrule 33: end_if <- . CODE_LINE END_IF CODE_NEWLINE" },
    { 2, ms_transition_table_+1801, "rule 32: end_if <- START_CODE . END_IF END_CODE" },
    { 2, ms_transition_table_+1803, "rule 33: end_if <- CODE_LINE . END_IF CODE_NEWLINE" },
    { 1, ms_transition_table_+1805, "RETURN end_if" },
    { 7, ms_transition_table_+1806, "START define                                                                                    \nrule 34: define <- . define_scalar                                                              \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE                               \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 35: define <- . define_array_element                                                       \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE                \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 36: define <- . define_map_element                                                         \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1813, "rule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE                            \nrule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE             \nrule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+1815, "rule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE                            \nrule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE             \nrule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1817, "RETURN define" },
    { 4, ms_transition_table_+1818, "START define_scalar                                                 \nrule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE   \nrule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1822, "rule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE" },
    { 2, ms_transition_table_+1824, "rule 37: define_scalar <- START_CODE DEFINE . '(' ID ')' END_CODE" },
    { 2, ms_transition_table_+1826, "rule 37: define_scalar <- START_CODE DEFINE '(' . ID ')' END_CODE" },
    { 2, ms_transition_table_+1828, "rule 37: define_scalar <- START_CODE DEFINE '(' ID . ')' END_CODE" },
    { 2, ms_transition_table_+1830, "rule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1832, "rule 38: define_scalar <- CODE_LINE DEFINE . '(' ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1834, "rule 38: define_scalar <- CODE_LINE DEFINE '(' . ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1836, "rule 38: define_scalar <- CODE_LINE DEFINE '(' ID . ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1838, "RETURN define_scalar" },
    { 4, ms_transition_table_+1839, "START define_array_element                                                         \nrule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE   \nrule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1843, "rule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE" },
    { 2, ms_transition_table_+1845, "rule 39: define_array_element <- START_CODE DEFINE . '(' ID '[' ']' ')' END_CODE" },
    { 2, ms_transition_table_+1847, "rule 39: define_array_element <- START_CODE DEFINE '(' . ID '[' ']' ')' END_CODE" },
    { 2, ms_transition_table_+1849, "rule 39: define_array_element <- START_CODE DEFINE '(' ID . '[' ']' ')' END_CODE" },
    { 2, ms_transition_table_+1851, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' . ']' ')' END_CODE" },
    { 2, ms_transition_table_+1853, "rule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1855, "rule 40: define_array_element <- CODE_LINE DEFINE . '(' ID '[' ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1857, "rule 40: define_array_element <- CODE_LINE DEFINE '(' . ID '[' ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1859, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID . '[' ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1861, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' . ']' ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1863, "RETURN define_array_element" },
    { 4, ms_transition_table_+1864, "START define_map_element                                                                        \nrule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE   \nrule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1868, "rule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+1870, "rule 41: define_map_element <- START_CODE DEFINE . '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+1872, "rule 41: define_map_element <- START_CODE DEFINE '(' . ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+1874, "rule 41: define_map_element <- START_CODE DEFINE '(' ID . '[' STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+1876, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' . STRING_LITERAL ']' ')' END_CODE" },
    { 2, ms_transition_table_+1878, "rule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1880, "rule 42: define_map_element <- CODE_LINE DEFINE . '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1882, "rule 42: define_map_element <- CODE_LINE DEFINE '(' . ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1884, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID . '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1886, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' . STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1888, "RETURN define_map_element" },
    { 4, ms_transition_table_+1889, "START end_define                                          \nrule 43: end_define <- . START_CODE END_DEFINE END_CODE   \nrule 44: end_define <- . CODE_LINE END_DEFINE CODE_NEWLINE" },
    { 2, ms_transition_table_+1893, "rule 43: end_define <- START_CODE . END_DEFINE END_CODE" },
    { 2, ms_transition_table_+1895, "rule 44: end_define <- CODE_LINE . END_DEFINE CODE_NEWLINE" },
    { 1, ms_transition_table_+1897, "RETURN end_define" },
    { 4, ms_transition_table_+1898, "START loop                                                              \nrule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE   \nrule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1902, "rule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE" },
    { 2, ms_transition_table_+1904, "rule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1906, "RETURN loop" },
    { 4, ms_transition_table_+1907, "START end_loop                                        \nrule 47: end_loop <- . START_CODE END_LOOP END_CODE   \nrule 48: end_loop <- . CODE_LINE END_LOOP CODE_NEWLINE" },
    { 2, ms_transition_table_+1911, "rule 47: end_loop <- START_CODE . END_LOOP END_CODE" },
    { 2, ms_transition_table_+1913, "rule 48: end_loop <- CODE_LINE . END_LOOP CODE_NEWLINE" },
    { 1, ms_transition_table_+1915, "RETURN end_loop" },
    { 4, ms_transition_table_+1916, "START for_each                                                          \nrule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE   \nrule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE" },
    { 2, ms_transition_table_+1920, "rule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE" },
    { 2, ms_transition_table_+1922, "rule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE" },
    { 1, ms_transition_table_+1924, "RETURN for_each" },
    { 4, ms_transition_table_+1925, "START end_for_each                                            \nrule 51: end_for_each <- . START_CODE END_FOR_EACH END_CODE   \nrule 52: end_for_each <- . CODE_LINE END_FOR_EACH CODE_NEWLINE" },
    { 2, ms_transition_table_+1929, "rule 51: end_for_each <- START_CODE . END_FOR_EACH END_CODE" },
    { 2, ms_transition_table_+1931, "rule 52: end_for_each <- CODE_LINE . END_FOR_EACH CODE_NEWLINE" },
    { 1, ms_transition_table_+1933, "RETURN end_for_each" },
    { 15, ms_transition_table_+1934, "START expression                                                 \nrule 53: expression <- . STRING_LITERAL                          \nrule 54: expression <- . INTEGER_LITERAL                         \nrule 55: expression <- . SIZEOF '(' ID ')'                       \nrule 56: expression <- . KEYWORD_INT '(' expression ')'          \nrule 57: expression <- . KEYWORD_STRING '(' expression ')'       \nrule 58: expression <- . STRING_LENGTH '(' expression ')'        \nrule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')' \nrule 60: expression <- . TO_STRING_LITERAL '(' expression ')'    \nrule 61: expression <- . IS_DEFINED '(' ID ')'                   \nrule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'\nrule 63: expression <- . ID                                      \nrule 64: expression <- . ID '[' expression ']'                   \nrule 65: expression <- . ID '?'                                  \nrule 66: expression <- . ID '[' expression ']' '?'               \nrule 67: expression <- . expression '.' expression               \nrule 68: expression <- . expression '|' '|' expression           \nrule 69: expression <- . expression '&' '&' expression           \nrule 70: expression <- . expression '=' '=' expression           \nrule 71: expression <- . expression '!' '=' expression           \nrule 72: expression <- . expression '<' expression               \nrule 73: expression <- . expression '<' '=' expression           \nrule 74: expression <- . expression '>' expression               \nrule 75: expression <- . expression '>' '=' expression           \nrule 76: expression <- . expression '+' expression               \nrule 77: expression <- . expression '-' expression               \nrule 78: expression <- . expression '*' expression               \nrule 79: expression <- . expression '/' expression               \nrule 80: expression <- . expression '%' expression               \nrule 81: expression <- . '-' expression                          \nrule 82: expression <- . '!' expression                          \nrule 83: expression <- . '(' expression ')'                      " },
    { 13, ms_transition_table_+1949, "RETURN expression                                     \nrule 67: expression <- expression . '.' expression    \nrule 68: expression <- expression . '|' '|' expression\nrule 69: expression <- expression . '&' '&' expression\nrule 70: expression <- expression . '=' '=' expression\nrule 71: expression <- expression . '!' '=' expression\nrule 72: expression <- expression . '<' expression    \nrule 73: expression <- expression . '<' '=' expression\nrule 74: expression <- expression . '>' expression    \nrule 75: expression <- expression . '>' '=' expression\nrule 76: expression <- expression . '+' expression    \nrule 77: expression <- expression . '-' expression    \nrule 78: expression <- expression . '*' expression    \nrule 79: expression <- expression . '/' expression    \nrule 80: expression <- expression . '%' expression    " }
};
BarfCpp_::Size const Parser::ms_state_count_ = sizeof(Parser::ms_state_table_) / sizeof(*Parser::ms_state_table_);

Parser::Transition_ const Parser::ms_transition_table_[] =
{
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+0 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+0 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+1 },
    { Parser::Transition_::REDUCE, 1, 0, ms_lookahead_table_+2 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+2 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+2 },
    { Parser::Transition_::SHIFT, 154, 1, ms_lookahead_table_+3 },
    { Parser::Transition_::SHIFT, 189, 1, ms_lookahead_table_+4 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+5 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+6 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+7 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+8 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+9 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+10 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+11 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+12 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+13 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+14 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+14 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+15 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+16 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+17 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+18 },
    { Parser::Transition_::SHIFT, 88, 1, ms_lookahead_table_+19 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+20 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+21 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+22 },
    { Parser::Transition_::SHIFT, 105, 1, ms_lookahead_table_+23 },
    { Parser::Transition_::SHIFT, 118, 1, ms_lookahead_table_+24 },
    { Parser::Transition_::SHIFT, 125, 1, ms_lookahead_table_+25 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+26 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+27 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+28 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+29 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+30 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+31 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+32 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+33 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+34 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+35 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+36 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+37 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+38 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+39 },
    { Parser::Transition_::SHIFT, 152, 1, ms_lookahead_table_+40 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+41 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+42 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+42 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+43 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+44 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+45 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+46 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+47 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+48 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+49 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+50 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+51 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+52 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+53 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+54 },
    { Parser::Transition_::SHIFT, 82, 1, ms_lookahead_table_+55 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+56 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+56 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+57 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+58 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+59 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+60 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+61 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+62 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+63 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+64 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+65 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+66 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+67 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+68 },
    { Parser::Transition_::SHIFT, 80, 1, ms_lookahead_table_+69 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+70 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+70 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+71 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+72 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+73 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+74 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+75 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+76 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+77 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+78 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+79 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+80 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+81 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+82 },
    { Parser::Transition_::SHIFT, 79, 1, ms_lookahead_table_+83 },
    { Parser::Transition_::REDUCE, 63, 0, ms_lookahead_table_+84 },
    { Parser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+84 },
    { Parser::Transition_::SHIFT, 9, 1, ms_lookahead_table_+85 },
    { Parser::Transition_::REDUCE, 65, 0, ms_lookahead_table_+86 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+86 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+86 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+87 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+88 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+89 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+90 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+91 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+92 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+93 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+94 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+95 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+96 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+97 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+98 },
    { Parser::Transition_::SHIFT, 76, 1, ms_lookahead_table_+99 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+100 },
    { Parser::Transition_::SHIFT, 11, 1, ms_lookahead_table_+100 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+101 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+101 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+102 },
    { Parser::Transition_::SHIFT, 13, 1, ms_lookahead_table_+102 },
    { Parser::Transition_::REDUCE, 55, 0, ms_lookahead_table_+103 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+103 },
    { Parser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+103 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+104 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+104 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+105 },
    { Parser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+105 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+106 },
    { Parser::Transition_::REDUCE, 61, 0, ms_lookahead_table_+107 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+107 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+107 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+108 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+109 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+110 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+111 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+112 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+113 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+114 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+115 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+116 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+117 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+118 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+119 },
    { Parser::Transition_::SHIFT, 73, 1, ms_lookahead_table_+120 },
    { Parser::Transition_::REDUCE, 54, 0, ms_lookahead_table_+121 },
    { Parser::Transition_::REDUCE, 53, 0, ms_lookahead_table_+121 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+121 },
    { Parser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+121 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+122 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+122 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+123 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+124 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+125 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+126 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+127 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+128 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+129 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+130 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+131 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+132 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+133 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+134 },
    { Parser::Transition_::SHIFT, 71, 1, ms_lookahead_table_+135 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+136 },
    { Parser::Transition_::SHIFT, 24, 1, ms_lookahead_table_+136 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+137 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+137 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+138 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+139 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+140 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+141 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+142 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+143 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+144 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+145 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+146 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+147 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+148 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+149 },
    { Parser::Transition_::SHIFT, 69, 1, ms_lookahead_table_+150 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+151 },
    { Parser::Transition_::SHIFT, 26, 1, ms_lookahead_table_+151 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+152 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+152 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+153 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+154 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+155 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+156 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+157 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+158 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+159 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+160 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+161 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+162 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+163 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+164 },
    { Parser::Transition_::SHIFT, 67, 1, ms_lookahead_table_+165 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+166 },
    { Parser::Transition_::SHIFT, 28, 1, ms_lookahead_table_+166 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+167 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+167 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+168 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+169 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+170 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+171 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+172 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+173 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+174 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+175 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+176 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+177 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+178 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+179 },
    { Parser::Transition_::SHIFT, 65, 1, ms_lookahead_table_+180 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+181 },
    { Parser::Transition_::SHIFT, 30, 1, ms_lookahead_table_+181 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+182 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+182 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+183 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+184 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+185 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+186 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+187 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+188 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+189 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+190 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+191 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+192 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+193 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+194 },
    { Parser::Transition_::SHIFT, 31, 1, ms_lookahead_table_+195 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+196 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+196 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+197 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+198 },
    { Parser::Transition_::SHIFT, 61, 1, ms_lookahead_table_+199 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+200 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+201 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+202 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+203 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+204 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+205 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+206 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+207 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+208 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+209 },
    { Parser::Transition_::SHIFT, 33, 1, ms_lookahead_table_+209 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+210 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+210 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+211 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+212 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+213 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+214 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+215 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+216 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+217 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+218 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+219 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+220 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+221 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+222 },
    { Parser::Transition_::SHIFT, 34, 1, ms_lookahead_table_+223 },
    { Parser::Transition_::REDUCE, 71, 0, ms_lookahead_table_+224 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+224 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+225 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+226 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+227 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+228 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+229 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+230 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+231 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+232 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+232 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+233 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+234 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+235 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+236 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+237 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+238 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+239 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+240 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+241 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+242 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+243 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+244 },
    { Parser::Transition_::SHIFT, 36, 1, ms_lookahead_table_+245 },
    { Parser::Transition_::REDUCE, 80, 0, ms_lookahead_table_+246 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+246 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+246 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+247 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+248 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+249 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+250 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+251 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+252 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+253 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+254 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+255 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+256 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+257 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+258 },
    { Parser::Transition_::SHIFT, 38, 1, ms_lookahead_table_+259 },
    { Parser::Transition_::REDUCE, 78, 0, ms_lookahead_table_+260 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+260 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+260 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+261 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+262 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+263 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+264 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+265 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+266 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+267 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+268 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+269 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+270 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+271 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+272 },
    { Parser::Transition_::SHIFT, 40, 1, ms_lookahead_table_+273 },
    { Parser::Transition_::REDUCE, 76, 0, ms_lookahead_table_+274 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+274 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+275 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+276 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+277 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+277 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+278 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+279 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+280 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+281 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+282 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+283 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+284 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+285 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+286 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+287 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+288 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+289 },
    { Parser::Transition_::SHIFT, 42, 1, ms_lookahead_table_+290 },
    { Parser::Transition_::REDUCE, 79, 0, ms_lookahead_table_+291 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+291 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+291 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+292 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+293 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+294 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+295 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+296 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+297 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+298 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+299 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+300 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+301 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+302 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+303 },
    { Parser::Transition_::SHIFT, 44, 1, ms_lookahead_table_+304 },
    { Parser::Transition_::REDUCE, 77, 0, ms_lookahead_table_+305 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+305 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+306 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+307 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+308 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+308 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+309 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+310 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+311 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+312 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+313 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+314 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+315 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+316 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+317 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+318 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+319 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+320 },
    { Parser::Transition_::SHIFT, 46, 1, ms_lookahead_table_+321 },
    { Parser::Transition_::REDUCE, 67, 0, ms_lookahead_table_+322 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+322 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+323 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+324 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+325 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+326 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+327 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+327 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+328 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+329 },
    { Parser::Transition_::SHIFT, 48, 1, ms_lookahead_table_+330 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+331 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+332 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+333 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+334 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+335 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+336 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+337 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+338 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+339 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+340 },
    { Parser::Transition_::SHIFT, 50, 1, ms_lookahead_table_+341 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+342 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+342 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+343 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+344 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+345 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+346 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+347 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+348 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+349 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+350 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+351 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+352 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+353 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+354 },
    { Parser::Transition_::SHIFT, 49, 1, ms_lookahead_table_+355 },
    { Parser::Transition_::REDUCE, 73, 0, ms_lookahead_table_+356 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+356 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+357 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+358 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+359 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+360 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+361 },
    { Parser::Transition_::REDUCE, 72, 0, ms_lookahead_table_+362 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+362 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+363 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+364 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+365 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+366 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+367 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+368 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+368 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+369 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+370 },
    { Parser::Transition_::SHIFT, 52, 1, ms_lookahead_table_+371 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+372 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+373 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+374 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+375 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+376 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+377 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+378 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+379 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+380 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+381 },
    { Parser::Transition_::SHIFT, 54, 1, ms_lookahead_table_+382 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+383 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+383 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+384 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+385 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+386 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+387 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+388 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+389 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+390 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+391 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+392 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+393 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+394 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+395 },
    { Parser::Transition_::SHIFT, 53, 1, ms_lookahead_table_+396 },
    { Parser::Transition_::REDUCE, 75, 0, ms_lookahead_table_+397 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+397 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+398 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+399 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+400 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+401 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+402 },
    { Parser::Transition_::REDUCE, 74, 0, ms_lookahead_table_+403 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+403 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+404 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+405 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+406 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+407 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+408 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+409 },
    { Parser::Transition_::SHIFT, 56, 1, ms_lookahead_table_+409 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+410 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+410 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+411 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+412 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+413 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+414 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+415 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+416 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+417 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+418 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+419 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+420 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+421 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+422 },
    { Parser::Transition_::SHIFT, 57, 1, ms_lookahead_table_+423 },
    { Parser::Transition_::REDUCE, 69, 0, ms_lookahead_table_+424 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+424 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+425 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+426 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+427 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+428 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+429 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+430 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+431 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+432 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+433 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+434 },
    { Parser::Transition_::SHIFT, 59, 1, ms_lookahead_table_+434 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+435 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+435 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+436 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+437 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+438 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+439 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+440 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+441 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+442 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+443 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+444 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+445 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+446 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+447 },
    { Parser::Transition_::SHIFT, 60, 1, ms_lookahead_table_+448 },
    { Parser::Transition_::REDUCE, 70, 0, ms_lookahead_table_+449 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+449 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+450 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+451 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+452 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+453 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+454 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+455 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+456 },
    { Parser::Transition_::REDUCE, 60, 0, ms_lookahead_table_+457 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+457 },
    { Parser::Transition_::SHIFT, 63, 1, ms_lookahead_table_+457 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+458 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+458 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+459 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+460 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+461 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+462 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+463 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+464 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+465 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+466 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+467 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+468 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+469 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+470 },
    { Parser::Transition_::SHIFT, 64, 1, ms_lookahead_table_+471 },
    { Parser::Transition_::REDUCE, 68, 0, ms_lookahead_table_+472 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+472 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+473 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+474 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+475 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+476 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+477 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+478 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+479 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+480 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+481 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+482 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+483 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+483 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+484 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+485 },
    { Parser::Transition_::SHIFT, 66, 1, ms_lookahead_table_+486 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+487 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+488 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+489 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+490 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+491 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+492 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+493 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+494 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+495 },
    { Parser::Transition_::REDUCE, 59, 0, ms_lookahead_table_+496 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+496 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+496 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+497 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+498 },
    { Parser::Transition_::SHIFT, 68, 1, ms_lookahead_table_+499 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+500 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+501 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+502 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+503 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+504 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+505 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+506 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+507 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+508 },
    { Parser::Transition_::REDUCE, 58, 0, ms_lookahead_table_+509 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+509 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+509 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+510 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+511 },
    { Parser::Transition_::SHIFT, 70, 1, ms_lookahead_table_+512 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+513 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+514 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+515 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+516 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+517 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+518 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+519 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+520 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+521 },
    { Parser::Transition_::REDUCE, 57, 0, ms_lookahead_table_+522 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+522 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+522 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+523 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+524 },
    { Parser::Transition_::SHIFT, 72, 1, ms_lookahead_table_+525 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+526 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+527 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+528 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+529 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+530 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+531 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+532 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+533 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+534 },
    { Parser::Transition_::REDUCE, 56, 0, ms_lookahead_table_+535 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+535 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+535 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+536 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+537 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+538 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+539 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+540 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+541 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+542 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+543 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+544 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+545 },
    { Parser::Transition_::SHIFT, 74, 1, ms_lookahead_table_+546 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+547 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+548 },
    { Parser::Transition_::SHIFT, 75, 1, ms_lookahead_table_+548 },
    { Parser::Transition_::REDUCE, 62, 0, ms_lookahead_table_+549 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+549 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+549 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+550 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+551 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+552 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+553 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+554 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+555 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+556 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+557 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+558 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+559 },
    { Parser::Transition_::SHIFT, 77, 1, ms_lookahead_table_+560 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+561 },
    { Parser::Transition_::REDUCE, 64, 0, ms_lookahead_table_+562 },
    { Parser::Transition_::SHIFT, 78, 1, ms_lookahead_table_+562 },
    { Parser::Transition_::REDUCE, 66, 0, ms_lookahead_table_+563 },
    { Parser::Transition_::REDUCE, 81, 0, ms_lookahead_table_+563 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+563 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+563 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+564 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+565 },
    { Parser::Transition_::SHIFT, 81, 1, ms_lookahead_table_+566 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+567 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+568 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+569 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+570 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+571 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+572 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+573 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+574 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+575 },
    { Parser::Transition_::REDUCE, 83, 0, ms_lookahead_table_+576 },
    { Parser::Transition_::REDUCE, 82, 0, ms_lookahead_table_+576 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+576 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+576 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+577 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+578 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+579 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+580 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+581 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+582 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+583 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+584 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+585 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+586 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+587 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+588 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+589 },
    { Parser::Transition_::REDUCE, 12, 0, ms_lookahead_table_+590 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+590 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+591 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+592 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+593 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+594 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+595 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+596 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+597 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+598 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+599 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+600 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+601 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+602 },
    { Parser::Transition_::SHIFT, 86, 1, ms_lookahead_table_+602 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+603 },
    { Parser::Transition_::SHIFT, 87, 1, ms_lookahead_table_+603 },
    { Parser::Transition_::REDUCE, 13, 0, ms_lookahead_table_+604 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+604 },
    { Parser::Transition_::SHIFT, 89, 1, ms_lookahead_table_+604 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+605 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+605 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+606 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+607 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+608 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+609 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+610 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+611 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+612 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+613 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+614 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+615 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+616 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+617 },
    { Parser::Transition_::SHIFT, 90, 1, ms_lookahead_table_+618 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+619 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+619 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+620 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+621 },
    { Parser::Transition_::SHIFT, 91, 1, ms_lookahead_table_+622 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+623 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+624 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+625 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+626 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+627 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+628 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+629 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+630 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+631 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+632 },
    { Parser::Transition_::SHIFT, 92, 1, ms_lookahead_table_+632 },
    { Parser::Transition_::REDUCE, 26, 0, ms_lookahead_table_+633 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+633 },
    { Parser::Transition_::SHIFT, 94, 1, ms_lookahead_table_+633 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+634 },
    { Parser::Transition_::SHIFT, 95, 1, ms_lookahead_table_+634 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+635 },
    { Parser::Transition_::SHIFT, 96, 1, ms_lookahead_table_+635 },
    { Parser::Transition_::REDUCE, 14, 0, ms_lookahead_table_+636 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+636 },
    { Parser::Transition_::SHIFT, 98, 1, ms_lookahead_table_+636 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+637 },
    { Parser::Transition_::SHIFT, 99, 1, ms_lookahead_table_+637 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+638 },
    { Parser::Transition_::SHIFT, 100, 1, ms_lookahead_table_+638 },
    { Parser::Transition_::REDUCE, 15, 0, ms_lookahead_table_+639 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+639 },
    { Parser::Transition_::SHIFT, 102, 1, ms_lookahead_table_+639 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+640 },
    { Parser::Transition_::SHIFT, 103, 1, ms_lookahead_table_+640 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+641 },
    { Parser::Transition_::SHIFT, 104, 1, ms_lookahead_table_+641 },
    { Parser::Transition_::REDUCE, 16, 0, ms_lookahead_table_+642 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+642 },
    { Parser::Transition_::SHIFT, 106, 1, ms_lookahead_table_+642 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+643 },
    { Parser::Transition_::SHIFT, 107, 1, ms_lookahead_table_+643 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+644 },
    { Parser::Transition_::SHIFT, 108, 1, ms_lookahead_table_+644 },
    { Parser::Transition_::SHIFT, 110, 1, ms_lookahead_table_+645 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+646 },
    { Parser::Transition_::SHIFT, 109, 1, ms_lookahead_table_+646 },
    { Parser::Transition_::REDUCE, 37, 0, ms_lookahead_table_+647 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+647 },
    { Parser::Transition_::SHIFT, 111, 1, ms_lookahead_table_+647 },
    { Parser::Transition_::SHIFT, 114, 1, ms_lookahead_table_+648 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+649 },
    { Parser::Transition_::SHIFT, 112, 1, ms_lookahead_table_+649 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+650 },
    { Parser::Transition_::SHIFT, 113, 1, ms_lookahead_table_+650 },
    { Parser::Transition_::REDUCE, 39, 0, ms_lookahead_table_+651 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+651 },
    { Parser::Transition_::SHIFT, 115, 1, ms_lookahead_table_+651 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+652 },
    { Parser::Transition_::SHIFT, 116, 1, ms_lookahead_table_+652 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+653 },
    { Parser::Transition_::SHIFT, 117, 1, ms_lookahead_table_+653 },
    { Parser::Transition_::REDUCE, 41, 0, ms_lookahead_table_+654 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+654 },
    { Parser::Transition_::SHIFT, 119, 1, ms_lookahead_table_+654 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+655 },
    { Parser::Transition_::SHIFT, 120, 1, ms_lookahead_table_+655 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+656 },
    { Parser::Transition_::SHIFT, 121, 1, ms_lookahead_table_+656 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+657 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+657 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+658 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+659 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+660 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+661 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+662 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+663 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+664 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+665 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+666 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+667 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+668 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+669 },
    { Parser::Transition_::SHIFT, 122, 1, ms_lookahead_table_+670 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+671 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+671 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+672 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+673 },
    { Parser::Transition_::SHIFT, 123, 1, ms_lookahead_table_+674 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+675 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+676 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+677 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+678 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+679 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+680 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+681 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+682 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+683 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+684 },
    { Parser::Transition_::SHIFT, 124, 1, ms_lookahead_table_+684 },
    { Parser::Transition_::REDUCE, 45, 0, ms_lookahead_table_+685 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+685 },
    { Parser::Transition_::SHIFT, 126, 1, ms_lookahead_table_+685 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+686 },
    { Parser::Transition_::SHIFT, 127, 1, ms_lookahead_table_+686 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+687 },
    { Parser::Transition_::SHIFT, 128, 1, ms_lookahead_table_+687 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+688 },
    { Parser::Transition_::SHIFT, 129, 1, ms_lookahead_table_+688 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+689 },
    { Parser::Transition_::SHIFT, 130, 1, ms_lookahead_table_+689 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+690 },
    { Parser::Transition_::SHIFT, 131, 1, ms_lookahead_table_+690 },
    { Parser::Transition_::REDUCE, 49, 0, ms_lookahead_table_+691 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+691 },
    { Parser::Transition_::SHIFT, 133, 1, ms_lookahead_table_+691 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+692 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+692 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+693 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+694 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+695 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+696 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+697 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+698 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+699 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+700 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+701 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+702 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+703 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+704 },
    { Parser::Transition_::SHIFT, 134, 1, ms_lookahead_table_+705 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+706 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+706 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+707 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+708 },
    { Parser::Transition_::SHIFT, 135, 1, ms_lookahead_table_+709 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+710 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+711 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+712 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+713 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+714 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+715 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+716 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+717 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+718 },
    { Parser::Transition_::REDUCE, 17, 0, ms_lookahead_table_+719 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+719 },
    { Parser::Transition_::SHIFT, 137, 1, ms_lookahead_table_+719 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+720 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+720 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+721 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+722 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+723 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+724 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+725 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+726 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+727 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+728 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+729 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+730 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+731 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+732 },
    { Parser::Transition_::SHIFT, 138, 1, ms_lookahead_table_+733 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+734 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+734 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+735 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+736 },
    { Parser::Transition_::SHIFT, 139, 1, ms_lookahead_table_+737 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+738 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+739 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+740 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+741 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+742 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+743 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+744 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+745 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+746 },
    { Parser::Transition_::REDUCE, 18, 0, ms_lookahead_table_+747 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+747 },
    { Parser::Transition_::SHIFT, 141, 1, ms_lookahead_table_+747 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+748 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+748 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+749 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+750 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+751 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+752 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+753 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+754 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+755 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+756 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+757 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+758 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+759 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+760 },
    { Parser::Transition_::SHIFT, 142, 1, ms_lookahead_table_+761 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+762 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+762 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+763 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+764 },
    { Parser::Transition_::SHIFT, 143, 1, ms_lookahead_table_+765 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+766 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+767 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+768 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+769 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+770 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+771 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+772 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+773 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+774 },
    { Parser::Transition_::REDUCE, 19, 0, ms_lookahead_table_+775 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+775 },
    { Parser::Transition_::SHIFT, 145, 1, ms_lookahead_table_+775 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+776 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+776 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+777 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+778 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+779 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+780 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+781 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+782 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+783 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+784 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+785 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+786 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+787 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+788 },
    { Parser::Transition_::SHIFT, 146, 1, ms_lookahead_table_+789 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+790 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+790 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+791 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+792 },
    { Parser::Transition_::SHIFT, 147, 1, ms_lookahead_table_+793 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+794 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+795 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+796 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+797 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+798 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+799 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+800 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+801 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+802 },
    { Parser::Transition_::REDUCE, 20, 0, ms_lookahead_table_+803 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+803 },
    { Parser::Transition_::SHIFT, 149, 1, ms_lookahead_table_+803 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+804 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+804 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+805 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+806 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+807 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+808 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+809 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+810 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+811 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+812 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+813 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+814 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+815 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+816 },
    { Parser::Transition_::SHIFT, 150, 1, ms_lookahead_table_+817 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+818 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+818 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+819 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+820 },
    { Parser::Transition_::SHIFT, 151, 1, ms_lookahead_table_+821 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+822 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+823 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+824 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+825 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+826 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+827 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+828 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+829 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+830 },
    { Parser::Transition_::REDUCE, 21, 0, ms_lookahead_table_+831 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+831 },
    { Parser::Transition_::SHIFT, 153, 1, ms_lookahead_table_+831 },
    { Parser::Transition_::REDUCE, 9, 0, ms_lookahead_table_+832 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+832 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+832 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+833 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+834 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+835 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+836 },
    { Parser::Transition_::SHIFT, 155, 1, ms_lookahead_table_+837 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+838 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+839 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+840 },
    { Parser::Transition_::SHIFT, 160, 1, ms_lookahead_table_+841 },
    { Parser::Transition_::SHIFT, 173, 1, ms_lookahead_table_+842 },
    { Parser::Transition_::SHIFT, 180, 1, ms_lookahead_table_+843 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+844 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+845 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+846 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+847 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+848 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+849 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+850 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+851 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+852 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+853 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+854 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+855 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+856 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+857 },
    { Parser::Transition_::SHIFT, 187, 1, ms_lookahead_table_+858 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+859 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+860 },
    { Parser::Transition_::SHIFT, 156, 1, ms_lookahead_table_+860 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+861 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+861 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+862 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+863 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+864 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+865 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+866 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+867 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+868 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+869 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+870 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+871 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+872 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+873 },
    { Parser::Transition_::SHIFT, 157, 1, ms_lookahead_table_+874 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+875 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+875 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+876 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+877 },
    { Parser::Transition_::SHIFT, 158, 1, ms_lookahead_table_+878 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+879 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+880 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+881 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+882 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+883 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+884 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+885 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+886 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+887 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+888 },
    { Parser::Transition_::SHIFT, 159, 1, ms_lookahead_table_+888 },
    { Parser::Transition_::REDUCE, 27, 0, ms_lookahead_table_+889 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+889 },
    { Parser::Transition_::SHIFT, 161, 1, ms_lookahead_table_+889 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+890 },
    { Parser::Transition_::SHIFT, 162, 1, ms_lookahead_table_+890 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+891 },
    { Parser::Transition_::SHIFT, 163, 1, ms_lookahead_table_+891 },
    { Parser::Transition_::SHIFT, 165, 1, ms_lookahead_table_+892 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+893 },
    { Parser::Transition_::SHIFT, 164, 1, ms_lookahead_table_+893 },
    { Parser::Transition_::REDUCE, 38, 0, ms_lookahead_table_+894 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+894 },
    { Parser::Transition_::SHIFT, 166, 1, ms_lookahead_table_+894 },
    { Parser::Transition_::SHIFT, 169, 1, ms_lookahead_table_+895 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+896 },
    { Parser::Transition_::SHIFT, 167, 1, ms_lookahead_table_+896 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+897 },
    { Parser::Transition_::SHIFT, 168, 1, ms_lookahead_table_+897 },
    { Parser::Transition_::REDUCE, 40, 0, ms_lookahead_table_+898 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+898 },
    { Parser::Transition_::SHIFT, 170, 1, ms_lookahead_table_+898 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+899 },
    { Parser::Transition_::SHIFT, 171, 1, ms_lookahead_table_+899 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+900 },
    { Parser::Transition_::SHIFT, 172, 1, ms_lookahead_table_+900 },
    { Parser::Transition_::REDUCE, 42, 0, ms_lookahead_table_+901 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+901 },
    { Parser::Transition_::SHIFT, 174, 1, ms_lookahead_table_+901 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+902 },
    { Parser::Transition_::SHIFT, 175, 1, ms_lookahead_table_+902 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+903 },
    { Parser::Transition_::SHIFT, 176, 1, ms_lookahead_table_+903 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+904 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+904 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+905 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+906 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+907 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+908 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+909 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+910 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+911 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+912 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+913 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+914 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+915 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+916 },
    { Parser::Transition_::SHIFT, 177, 1, ms_lookahead_table_+917 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+918 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+918 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+919 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+920 },
    { Parser::Transition_::SHIFT, 178, 1, ms_lookahead_table_+921 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+922 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+923 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+924 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+925 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+926 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+927 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+928 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+929 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+930 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+931 },
    { Parser::Transition_::SHIFT, 179, 1, ms_lookahead_table_+931 },
    { Parser::Transition_::REDUCE, 46, 0, ms_lookahead_table_+932 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+932 },
    { Parser::Transition_::SHIFT, 181, 1, ms_lookahead_table_+932 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+933 },
    { Parser::Transition_::SHIFT, 182, 1, ms_lookahead_table_+933 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+934 },
    { Parser::Transition_::SHIFT, 183, 1, ms_lookahead_table_+934 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+935 },
    { Parser::Transition_::SHIFT, 184, 1, ms_lookahead_table_+935 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+936 },
    { Parser::Transition_::SHIFT, 185, 1, ms_lookahead_table_+936 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+937 },
    { Parser::Transition_::SHIFT, 186, 1, ms_lookahead_table_+937 },
    { Parser::Transition_::REDUCE, 50, 0, ms_lookahead_table_+938 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+938 },
    { Parser::Transition_::SHIFT, 188, 1, ms_lookahead_table_+938 },
    { Parser::Transition_::REDUCE, 10, 0, ms_lookahead_table_+939 },
    { Parser::Transition_::REDUCE, 2, 0, ms_lookahead_table_+939 },
    { Parser::Transition_::SHIFT, 190, 1, ms_lookahead_table_+939 },
    { Parser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+940 },
    { Parser::Transition_::REDUCE, 4, 0, ms_lookahead_table_+940 },
    { Parser::Transition_::REDUCE, 5, 0, ms_lookahead_table_+940 },
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+940 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+940 },
    { Parser::Transition_::SHIFT, 194, 1, ms_lookahead_table_+941 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+942 },
    { Parser::Transition_::SHIFT, 195, 1, ms_lookahead_table_+942 },
    { Parser::Transition_::SHIFT, 205, 1, ms_lookahead_table_+943 },
    { Parser::Transition_::SHIFT, 189, 1, ms_lookahead_table_+944 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+945 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+946 },
    { Parser::Transition_::SHIFT, 215, 1, ms_lookahead_table_+947 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+948 },
    { Parser::Transition_::SHIFT, 216, 1, ms_lookahead_table_+949 },
    { Parser::Transition_::SHIFT, 251, 1, ms_lookahead_table_+950 },
    { Parser::Transition_::SHIFT, 254, 1, ms_lookahead_table_+951 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+952 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+953 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+954 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+955 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+956 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+957 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+958 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+958 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+959 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+960 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+961 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+962 },
    { Parser::Transition_::SHIFT, 88, 1, ms_lookahead_table_+963 },
    { Parser::Transition_::SHIFT, 196, 1, ms_lookahead_table_+964 },
    { Parser::Transition_::SHIFT, 198, 1, ms_lookahead_table_+965 },
    { Parser::Transition_::SHIFT, 203, 1, ms_lookahead_table_+966 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+967 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+968 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+969 },
    { Parser::Transition_::SHIFT, 105, 1, ms_lookahead_table_+970 },
    { Parser::Transition_::SHIFT, 118, 1, ms_lookahead_table_+971 },
    { Parser::Transition_::SHIFT, 125, 1, ms_lookahead_table_+972 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+973 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+974 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+975 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+976 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+977 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+978 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+979 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+980 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+981 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+982 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+983 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+984 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+985 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+986 },
    { Parser::Transition_::SHIFT, 152, 1, ms_lookahead_table_+987 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+988 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+989 },
    { Parser::Transition_::SHIFT, 197, 1, ms_lookahead_table_+989 },
    { Parser::Transition_::REDUCE, 28, 0, ms_lookahead_table_+990 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+990 },
    { Parser::Transition_::SHIFT, 199, 1, ms_lookahead_table_+990 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+991 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+991 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+992 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+993 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+994 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+995 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+996 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+997 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+998 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+999 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1000 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1001 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1002 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1003 },
    { Parser::Transition_::SHIFT, 200, 1, ms_lookahead_table_+1004 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1005 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+1005 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+1006 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+1007 },
    { Parser::Transition_::SHIFT, 201, 1, ms_lookahead_table_+1008 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+1009 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+1010 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+1011 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+1012 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+1013 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+1014 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+1015 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+1016 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+1017 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1018 },
    { Parser::Transition_::SHIFT, 202, 1, ms_lookahead_table_+1018 },
    { Parser::Transition_::REDUCE, 30, 0, ms_lookahead_table_+1019 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1019 },
    { Parser::Transition_::SHIFT, 204, 1, ms_lookahead_table_+1019 },
    { Parser::Transition_::REDUCE, 32, 0, ms_lookahead_table_+1020 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1020 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1020 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1021 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1022 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1023 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1024 },
    { Parser::Transition_::SHIFT, 155, 1, ms_lookahead_table_+1025 },
    { Parser::Transition_::SHIFT, 206, 1, ms_lookahead_table_+1026 },
    { Parser::Transition_::SHIFT, 208, 1, ms_lookahead_table_+1027 },
    { Parser::Transition_::SHIFT, 213, 1, ms_lookahead_table_+1028 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1029 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1030 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1031 },
    { Parser::Transition_::SHIFT, 160, 1, ms_lookahead_table_+1032 },
    { Parser::Transition_::SHIFT, 173, 1, ms_lookahead_table_+1033 },
    { Parser::Transition_::SHIFT, 180, 1, ms_lookahead_table_+1034 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1035 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1036 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1037 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1038 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1039 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1040 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1041 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1042 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1043 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1044 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1045 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1046 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1047 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1048 },
    { Parser::Transition_::SHIFT, 187, 1, ms_lookahead_table_+1049 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1050 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1051 },
    { Parser::Transition_::SHIFT, 207, 1, ms_lookahead_table_+1051 },
    { Parser::Transition_::REDUCE, 29, 0, ms_lookahead_table_+1052 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1052 },
    { Parser::Transition_::SHIFT, 209, 1, ms_lookahead_table_+1052 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1053 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1053 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1054 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1055 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1056 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1057 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1058 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1059 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1060 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1061 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1062 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1063 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1064 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1065 },
    { Parser::Transition_::SHIFT, 210, 1, ms_lookahead_table_+1066 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1067 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+1067 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+1068 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+1069 },
    { Parser::Transition_::SHIFT, 211, 1, ms_lookahead_table_+1070 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+1071 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+1072 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+1073 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+1074 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+1075 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+1076 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+1077 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+1078 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+1079 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1080 },
    { Parser::Transition_::SHIFT, 212, 1, ms_lookahead_table_+1080 },
    { Parser::Transition_::REDUCE, 31, 0, ms_lookahead_table_+1081 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1081 },
    { Parser::Transition_::SHIFT, 214, 1, ms_lookahead_table_+1081 },
    { Parser::Transition_::REDUCE, 33, 0, ms_lookahead_table_+1082 },
    { Parser::Transition_::REDUCE, 22, 0, ms_lookahead_table_+1082 },
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+1082 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+1082 },
    { Parser::Transition_::SHIFT, 217, 1, ms_lookahead_table_+1083 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1084 },
    { Parser::Transition_::SHIFT, 218, 1, ms_lookahead_table_+1084 },
    { Parser::Transition_::SHIFT, 219, 1, ms_lookahead_table_+1085 },
    { Parser::Transition_::SHIFT, 189, 1, ms_lookahead_table_+1086 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+1087 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+1088 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+1089 },
    { Parser::Transition_::SHIFT, 220, 1, ms_lookahead_table_+1090 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+1091 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+1092 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+1093 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+1094 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+1095 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+1096 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1097 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1097 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1098 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1099 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1100 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1101 },
    { Parser::Transition_::SHIFT, 88, 1, ms_lookahead_table_+1102 },
    { Parser::Transition_::SHIFT, 203, 1, ms_lookahead_table_+1103 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1104 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1105 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1106 },
    { Parser::Transition_::SHIFT, 105, 1, ms_lookahead_table_+1107 },
    { Parser::Transition_::SHIFT, 118, 1, ms_lookahead_table_+1108 },
    { Parser::Transition_::SHIFT, 125, 1, ms_lookahead_table_+1109 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1110 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1111 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1112 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1113 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1114 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1115 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1116 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1117 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1118 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1119 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1120 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1121 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1122 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1123 },
    { Parser::Transition_::SHIFT, 152, 1, ms_lookahead_table_+1124 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1125 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1126 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1126 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1127 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1128 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1129 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1130 },
    { Parser::Transition_::SHIFT, 155, 1, ms_lookahead_table_+1131 },
    { Parser::Transition_::SHIFT, 213, 1, ms_lookahead_table_+1132 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1133 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1134 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1135 },
    { Parser::Transition_::SHIFT, 160, 1, ms_lookahead_table_+1136 },
    { Parser::Transition_::SHIFT, 173, 1, ms_lookahead_table_+1137 },
    { Parser::Transition_::SHIFT, 180, 1, ms_lookahead_table_+1138 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1139 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1140 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1141 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1142 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1143 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1144 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1145 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1146 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1147 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1148 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1149 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1150 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1151 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1152 },
    { Parser::Transition_::SHIFT, 187, 1, ms_lookahead_table_+1153 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1154 },
    { Parser::Transition_::REDUCE, 24, 0, ms_lookahead_table_+1155 },
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+1155 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+1155 },
    { Parser::Transition_::SHIFT, 222, 1, ms_lookahead_table_+1156 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1157 },
    { Parser::Transition_::SHIFT, 223, 1, ms_lookahead_table_+1157 },
    { Parser::Transition_::SHIFT, 226, 1, ms_lookahead_table_+1158 },
    { Parser::Transition_::SHIFT, 189, 1, ms_lookahead_table_+1159 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+1160 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+1161 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+1162 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+1163 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+1164 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+1165 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+1166 },
    { Parser::Transition_::SHIFT, 232, 1, ms_lookahead_table_+1167 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+1168 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+1169 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1170 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1170 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1171 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1172 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1173 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1174 },
    { Parser::Transition_::SHIFT, 88, 1, ms_lookahead_table_+1175 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1176 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1177 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1178 },
    { Parser::Transition_::SHIFT, 105, 1, ms_lookahead_table_+1179 },
    { Parser::Transition_::SHIFT, 224, 1, ms_lookahead_table_+1180 },
    { Parser::Transition_::SHIFT, 118, 1, ms_lookahead_table_+1181 },
    { Parser::Transition_::SHIFT, 125, 1, ms_lookahead_table_+1182 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1183 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1184 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1185 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1186 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1187 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1188 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1189 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1190 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1191 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1192 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1193 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1194 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1195 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1196 },
    { Parser::Transition_::SHIFT, 152, 1, ms_lookahead_table_+1197 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1198 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1199 },
    { Parser::Transition_::SHIFT, 225, 1, ms_lookahead_table_+1199 },
    { Parser::Transition_::REDUCE, 43, 0, ms_lookahead_table_+1200 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1200 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1200 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1201 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1202 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1203 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1204 },
    { Parser::Transition_::SHIFT, 155, 1, ms_lookahead_table_+1205 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1206 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1207 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1208 },
    { Parser::Transition_::SHIFT, 160, 1, ms_lookahead_table_+1209 },
    { Parser::Transition_::SHIFT, 227, 1, ms_lookahead_table_+1210 },
    { Parser::Transition_::SHIFT, 173, 1, ms_lookahead_table_+1211 },
    { Parser::Transition_::SHIFT, 180, 1, ms_lookahead_table_+1212 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1213 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1214 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1215 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1216 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1217 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1218 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1219 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1220 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1221 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1222 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1223 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1224 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1225 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1226 },
    { Parser::Transition_::SHIFT, 187, 1, ms_lookahead_table_+1227 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1228 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1229 },
    { Parser::Transition_::SHIFT, 228, 1, ms_lookahead_table_+1229 },
    { Parser::Transition_::REDUCE, 44, 0, ms_lookahead_table_+1230 },
    { Parser::Transition_::REDUCE, 34, 0, ms_lookahead_table_+1230 },
    { Parser::Transition_::REDUCE, 35, 0, ms_lookahead_table_+1230 },
    { Parser::Transition_::REDUCE, 36, 0, ms_lookahead_table_+1230 },
    { Parser::Transition_::REDUCE, 6, 0, ms_lookahead_table_+1230 },
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+1230 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+1230 },
    { Parser::Transition_::SHIFT, 234, 1, ms_lookahead_table_+1231 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1232 },
    { Parser::Transition_::SHIFT, 235, 1, ms_lookahead_table_+1232 },
    { Parser::Transition_::SHIFT, 238, 1, ms_lookahead_table_+1233 },
    { Parser::Transition_::SHIFT, 189, 1, ms_lookahead_table_+1234 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+1235 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+1236 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+1237 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+1238 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+1239 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+1240 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+1241 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+1242 },
    { Parser::Transition_::SHIFT, 241, 1, ms_lookahead_table_+1243 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+1244 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1245 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1245 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1246 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1247 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1248 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1249 },
    { Parser::Transition_::SHIFT, 88, 1, ms_lookahead_table_+1250 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1251 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1252 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1253 },
    { Parser::Transition_::SHIFT, 105, 1, ms_lookahead_table_+1254 },
    { Parser::Transition_::SHIFT, 118, 1, ms_lookahead_table_+1255 },
    { Parser::Transition_::SHIFT, 236, 1, ms_lookahead_table_+1256 },
    { Parser::Transition_::SHIFT, 125, 1, ms_lookahead_table_+1257 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1258 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1259 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1260 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1261 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1262 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1263 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1264 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1265 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1266 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1267 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1268 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1269 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1270 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1271 },
    { Parser::Transition_::SHIFT, 152, 1, ms_lookahead_table_+1272 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1273 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1274 },
    { Parser::Transition_::SHIFT, 237, 1, ms_lookahead_table_+1274 },
    { Parser::Transition_::REDUCE, 47, 0, ms_lookahead_table_+1275 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1275 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1275 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1276 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1277 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1278 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1279 },
    { Parser::Transition_::SHIFT, 155, 1, ms_lookahead_table_+1280 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1281 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1282 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1283 },
    { Parser::Transition_::SHIFT, 160, 1, ms_lookahead_table_+1284 },
    { Parser::Transition_::SHIFT, 173, 1, ms_lookahead_table_+1285 },
    { Parser::Transition_::SHIFT, 239, 1, ms_lookahead_table_+1286 },
    { Parser::Transition_::SHIFT, 180, 1, ms_lookahead_table_+1287 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1288 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1289 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1290 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1291 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1292 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1293 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1294 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1295 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1296 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1297 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1298 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1299 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1300 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1301 },
    { Parser::Transition_::SHIFT, 187, 1, ms_lookahead_table_+1302 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1303 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1304 },
    { Parser::Transition_::SHIFT, 240, 1, ms_lookahead_table_+1304 },
    { Parser::Transition_::REDUCE, 48, 0, ms_lookahead_table_+1305 },
    { Parser::Transition_::REDUCE, 7, 0, ms_lookahead_table_+1305 },
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+1305 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+1305 },
    { Parser::Transition_::SHIFT, 243, 1, ms_lookahead_table_+1306 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1307 },
    { Parser::Transition_::SHIFT, 244, 1, ms_lookahead_table_+1307 },
    { Parser::Transition_::SHIFT, 247, 1, ms_lookahead_table_+1308 },
    { Parser::Transition_::SHIFT, 189, 1, ms_lookahead_table_+1309 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+1310 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+1311 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+1312 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+1313 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+1314 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+1315 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+1316 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+1317 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+1318 },
    { Parser::Transition_::SHIFT, 250, 1, ms_lookahead_table_+1319 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1320 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1320 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1321 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1322 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1323 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1324 },
    { Parser::Transition_::SHIFT, 88, 1, ms_lookahead_table_+1325 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1326 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1327 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1328 },
    { Parser::Transition_::SHIFT, 105, 1, ms_lookahead_table_+1329 },
    { Parser::Transition_::SHIFT, 118, 1, ms_lookahead_table_+1330 },
    { Parser::Transition_::SHIFT, 125, 1, ms_lookahead_table_+1331 },
    { Parser::Transition_::SHIFT, 245, 1, ms_lookahead_table_+1332 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1333 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1334 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1335 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1336 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1337 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1338 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1339 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1340 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1341 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1342 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1343 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1344 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1345 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1346 },
    { Parser::Transition_::SHIFT, 152, 1, ms_lookahead_table_+1347 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1348 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1349 },
    { Parser::Transition_::SHIFT, 246, 1, ms_lookahead_table_+1349 },
    { Parser::Transition_::REDUCE, 51, 0, ms_lookahead_table_+1350 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1350 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1350 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1351 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1352 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1353 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1354 },
    { Parser::Transition_::SHIFT, 155, 1, ms_lookahead_table_+1355 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1356 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1357 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1358 },
    { Parser::Transition_::SHIFT, 160, 1, ms_lookahead_table_+1359 },
    { Parser::Transition_::SHIFT, 173, 1, ms_lookahead_table_+1360 },
    { Parser::Transition_::SHIFT, 180, 1, ms_lookahead_table_+1361 },
    { Parser::Transition_::SHIFT, 248, 1, ms_lookahead_table_+1362 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1363 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1364 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1365 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1366 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1367 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1368 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1369 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1370 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1371 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1372 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1373 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1374 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1375 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1376 },
    { Parser::Transition_::SHIFT, 187, 1, ms_lookahead_table_+1377 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1378 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1379 },
    { Parser::Transition_::SHIFT, 249, 1, ms_lookahead_table_+1379 },
    { Parser::Transition_::REDUCE, 52, 0, ms_lookahead_table_+1380 },
    { Parser::Transition_::REDUCE, 8, 0, ms_lookahead_table_+1380 },
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+1380 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+1380 },
    { Parser::Transition_::SHIFT, 252, 1, ms_lookahead_table_+1381 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1382 },
    { Parser::Transition_::SHIFT, 195, 1, ms_lookahead_table_+1382 },
    { Parser::Transition_::SHIFT, 205, 1, ms_lookahead_table_+1383 },
    { Parser::Transition_::SHIFT, 189, 1, ms_lookahead_table_+1384 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+1385 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+1386 },
    { Parser::Transition_::SHIFT, 253, 1, ms_lookahead_table_+1387 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+1388 },
    { Parser::Transition_::SHIFT, 216, 1, ms_lookahead_table_+1389 },
    { Parser::Transition_::SHIFT, 251, 1, ms_lookahead_table_+1390 },
    { Parser::Transition_::SHIFT, 254, 1, ms_lookahead_table_+1391 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+1392 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+1393 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+1394 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+1395 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+1396 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+1397 },
    { Parser::Transition_::REDUCE, 25, 0, ms_lookahead_table_+1398 },
    { Parser::Transition_::REDUCE, 23, 0, ms_lookahead_table_+1398 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1398 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+1398 },
    { Parser::Transition_::SHIFT, 154, 1, ms_lookahead_table_+1399 },
    { Parser::Transition_::SHIFT, 256, 1, ms_lookahead_table_+1400 },
    { Parser::Transition_::SHIFT, 191, 1, ms_lookahead_table_+1401 },
    { Parser::Transition_::SHIFT, 192, 1, ms_lookahead_table_+1402 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+1403 },
    { Parser::Transition_::SHIFT, 221, 1, ms_lookahead_table_+1404 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+1405 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+1406 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+1407 },
    { Parser::Transition_::SHIFT, 233, 1, ms_lookahead_table_+1408 },
    { Parser::Transition_::SHIFT, 242, 1, ms_lookahead_table_+1409 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1410 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1410 },
    { Parser::Transition_::SHIFT, 258, 1, ms_lookahead_table_+1410 },
    { Parser::Transition_::SHIFT, 259, 1, ms_lookahead_table_+1411 },
    { Parser::Transition_::SHIFT, 260, 1, ms_lookahead_table_+1412 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1413 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1413 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1414 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1415 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1416 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1417 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1418 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1419 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1420 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1421 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1422 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1423 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1424 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1425 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1426 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1427 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1428 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1429 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1430 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1431 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1432 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1433 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1434 },
    { Parser::Transition_::SHIFT, 152, 1, ms_lookahead_table_+1435 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1436 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1437 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1437 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1438 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1439 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1440 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1441 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1442 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1443 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1444 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1445 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1446 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1447 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1448 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1449 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1450 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1451 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1452 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1453 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1454 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1455 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1456 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1457 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1458 },
    { Parser::Transition_::SHIFT, 187, 1, ms_lookahead_table_+1459 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1460 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1461 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+1461 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1461 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1462 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1463 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1464 },
    { Parser::Transition_::SHIFT, 85, 1, ms_lookahead_table_+1465 },
    { Parser::Transition_::SHIFT, 93, 1, ms_lookahead_table_+1466 },
    { Parser::Transition_::SHIFT, 97, 1, ms_lookahead_table_+1467 },
    { Parser::Transition_::SHIFT, 101, 1, ms_lookahead_table_+1468 },
    { Parser::Transition_::SHIFT, 132, 1, ms_lookahead_table_+1469 },
    { Parser::Transition_::SHIFT, 136, 1, ms_lookahead_table_+1470 },
    { Parser::Transition_::SHIFT, 140, 1, ms_lookahead_table_+1471 },
    { Parser::Transition_::SHIFT, 144, 1, ms_lookahead_table_+1472 },
    { Parser::Transition_::SHIFT, 148, 1, ms_lookahead_table_+1473 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1474 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1475 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1476 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1477 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1478 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1479 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1480 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1481 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1482 },
    { Parser::Transition_::SHIFT, 262, 1, ms_lookahead_table_+1483 },
    { Parser::Transition_::SHIFT, 84, 1, ms_lookahead_table_+1484 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1485 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1485 },
    { Parser::Transition_::SHIFT, 264, 1, ms_lookahead_table_+1485 },
    { Parser::Transition_::SHIFT, 265, 1, ms_lookahead_table_+1486 },
    { Parser::Transition_::SHIFT, 266, 1, ms_lookahead_table_+1487 },
    { Parser::Transition_::SHIFT, 193, 1, ms_lookahead_table_+1488 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1489 },
    { Parser::Transition_::SHIFT, 88, 1, ms_lookahead_table_+1489 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1490 },
    { Parser::Transition_::SHIFT, 155, 1, ms_lookahead_table_+1490 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1491 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1491 },
    { Parser::Transition_::SHIFT, 268, 1, ms_lookahead_table_+1491 },
    { Parser::Transition_::SHIFT, 269, 1, ms_lookahead_table_+1492 },
    { Parser::Transition_::SHIFT, 270, 1, ms_lookahead_table_+1493 },
    { Parser::Transition_::SHIFT, 216, 1, ms_lookahead_table_+1494 },
    { Parser::Transition_::SHIFT, 251, 1, ms_lookahead_table_+1495 },
    { Parser::Transition_::SHIFT, 254, 1, ms_lookahead_table_+1496 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1497 },
    { Parser::Transition_::SHIFT, 196, 1, ms_lookahead_table_+1497 },
    { Parser::Transition_::SHIFT, 198, 1, ms_lookahead_table_+1498 },
    { Parser::Transition_::SHIFT, 203, 1, ms_lookahead_table_+1499 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1500 },
    { Parser::Transition_::SHIFT, 206, 1, ms_lookahead_table_+1500 },
    { Parser::Transition_::SHIFT, 208, 1, ms_lookahead_table_+1501 },
    { Parser::Transition_::SHIFT, 213, 1, ms_lookahead_table_+1502 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1503 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1503 },
    { Parser::Transition_::SHIFT, 264, 1, ms_lookahead_table_+1503 },
    { Parser::Transition_::SHIFT, 265, 1, ms_lookahead_table_+1504 },
    { Parser::Transition_::SHIFT, 272, 1, ms_lookahead_table_+1505 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1506 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1506 },
    { Parser::Transition_::SHIFT, 274, 1, ms_lookahead_table_+1506 },
    { Parser::Transition_::SHIFT, 275, 1, ms_lookahead_table_+1507 },
    { Parser::Transition_::SHIFT, 276, 1, ms_lookahead_table_+1508 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1509 },
    { Parser::Transition_::SHIFT, 196, 1, ms_lookahead_table_+1509 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1510 },
    { Parser::Transition_::SHIFT, 206, 1, ms_lookahead_table_+1510 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1511 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1511 },
    { Parser::Transition_::SHIFT, 278, 1, ms_lookahead_table_+1511 },
    { Parser::Transition_::SHIFT, 279, 1, ms_lookahead_table_+1512 },
    { Parser::Transition_::SHIFT, 280, 1, ms_lookahead_table_+1513 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1514 },
    { Parser::Transition_::SHIFT, 198, 1, ms_lookahead_table_+1514 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1515 },
    { Parser::Transition_::SHIFT, 208, 1, ms_lookahead_table_+1515 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1516 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1516 },
    { Parser::Transition_::SHIFT, 282, 1, ms_lookahead_table_+1516 },
    { Parser::Transition_::SHIFT, 283, 1, ms_lookahead_table_+1517 },
    { Parser::Transition_::SHIFT, 284, 1, ms_lookahead_table_+1518 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1519 },
    { Parser::Transition_::SHIFT, 203, 1, ms_lookahead_table_+1519 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1520 },
    { Parser::Transition_::SHIFT, 213, 1, ms_lookahead_table_+1520 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1521 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1521 },
    { Parser::Transition_::SHIFT, 286, 1, ms_lookahead_table_+1521 },
    { Parser::Transition_::SHIFT, 287, 1, ms_lookahead_table_+1522 },
    { Parser::Transition_::SHIFT, 288, 1, ms_lookahead_table_+1523 },
    { Parser::Transition_::SHIFT, 229, 1, ms_lookahead_table_+1524 },
    { Parser::Transition_::SHIFT, 230, 1, ms_lookahead_table_+1525 },
    { Parser::Transition_::SHIFT, 231, 1, ms_lookahead_table_+1526 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1527 },
    { Parser::Transition_::SHIFT, 105, 1, ms_lookahead_table_+1527 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1528 },
    { Parser::Transition_::SHIFT, 160, 1, ms_lookahead_table_+1528 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1529 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1529 },
    { Parser::Transition_::SHIFT, 290, 1, ms_lookahead_table_+1529 },
    { Parser::Transition_::SHIFT, 294, 1, ms_lookahead_table_+1530 },
    { Parser::Transition_::SHIFT, 298, 1, ms_lookahead_table_+1531 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1532 },
    { Parser::Transition_::SHIFT, 291, 1, ms_lookahead_table_+1532 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1533 },
    { Parser::Transition_::SHIFT, 292, 1, ms_lookahead_table_+1533 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1534 },
    { Parser::Transition_::SHIFT, 293, 1, ms_lookahead_table_+1534 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1535 },
    { Parser::Transition_::SHIFT, 108, 1, ms_lookahead_table_+1535 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1536 },
    { Parser::Transition_::SHIFT, 295, 1, ms_lookahead_table_+1536 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1537 },
    { Parser::Transition_::SHIFT, 296, 1, ms_lookahead_table_+1537 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1538 },
    { Parser::Transition_::SHIFT, 297, 1, ms_lookahead_table_+1538 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1539 },
    { Parser::Transition_::SHIFT, 163, 1, ms_lookahead_table_+1539 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1540 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1540 },
    { Parser::Transition_::SHIFT, 300, 1, ms_lookahead_table_+1540 },
    { Parser::Transition_::SHIFT, 305, 1, ms_lookahead_table_+1541 },
    { Parser::Transition_::SHIFT, 310, 1, ms_lookahead_table_+1542 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1543 },
    { Parser::Transition_::SHIFT, 301, 1, ms_lookahead_table_+1543 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1544 },
    { Parser::Transition_::SHIFT, 302, 1, ms_lookahead_table_+1544 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1545 },
    { Parser::Transition_::SHIFT, 303, 1, ms_lookahead_table_+1545 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1546 },
    { Parser::Transition_::SHIFT, 304, 1, ms_lookahead_table_+1546 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1547 },
    { Parser::Transition_::SHIFT, 111, 1, ms_lookahead_table_+1547 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1548 },
    { Parser::Transition_::SHIFT, 306, 1, ms_lookahead_table_+1548 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1549 },
    { Parser::Transition_::SHIFT, 307, 1, ms_lookahead_table_+1549 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1550 },
    { Parser::Transition_::SHIFT, 308, 1, ms_lookahead_table_+1550 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1551 },
    { Parser::Transition_::SHIFT, 309, 1, ms_lookahead_table_+1551 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1552 },
    { Parser::Transition_::SHIFT, 166, 1, ms_lookahead_table_+1552 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1553 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1553 },
    { Parser::Transition_::SHIFT, 312, 1, ms_lookahead_table_+1553 },
    { Parser::Transition_::SHIFT, 317, 1, ms_lookahead_table_+1554 },
    { Parser::Transition_::SHIFT, 322, 1, ms_lookahead_table_+1555 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1556 },
    { Parser::Transition_::SHIFT, 313, 1, ms_lookahead_table_+1556 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1557 },
    { Parser::Transition_::SHIFT, 314, 1, ms_lookahead_table_+1557 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1558 },
    { Parser::Transition_::SHIFT, 315, 1, ms_lookahead_table_+1558 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1559 },
    { Parser::Transition_::SHIFT, 316, 1, ms_lookahead_table_+1559 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1560 },
    { Parser::Transition_::SHIFT, 114, 1, ms_lookahead_table_+1560 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1561 },
    { Parser::Transition_::SHIFT, 318, 1, ms_lookahead_table_+1561 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1562 },
    { Parser::Transition_::SHIFT, 319, 1, ms_lookahead_table_+1562 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1563 },
    { Parser::Transition_::SHIFT, 320, 1, ms_lookahead_table_+1563 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1564 },
    { Parser::Transition_::SHIFT, 321, 1, ms_lookahead_table_+1564 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1565 },
    { Parser::Transition_::SHIFT, 169, 1, ms_lookahead_table_+1565 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1566 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1566 },
    { Parser::Transition_::SHIFT, 324, 1, ms_lookahead_table_+1566 },
    { Parser::Transition_::SHIFT, 325, 1, ms_lookahead_table_+1567 },
    { Parser::Transition_::SHIFT, 326, 1, ms_lookahead_table_+1568 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1569 },
    { Parser::Transition_::SHIFT, 224, 1, ms_lookahead_table_+1569 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1570 },
    { Parser::Transition_::SHIFT, 227, 1, ms_lookahead_table_+1570 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1571 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1571 },
    { Parser::Transition_::SHIFT, 328, 1, ms_lookahead_table_+1571 },
    { Parser::Transition_::SHIFT, 329, 1, ms_lookahead_table_+1572 },
    { Parser::Transition_::SHIFT, 330, 1, ms_lookahead_table_+1573 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1574 },
    { Parser::Transition_::SHIFT, 118, 1, ms_lookahead_table_+1574 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1575 },
    { Parser::Transition_::SHIFT, 173, 1, ms_lookahead_table_+1575 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1576 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1576 },
    { Parser::Transition_::SHIFT, 332, 1, ms_lookahead_table_+1576 },
    { Parser::Transition_::SHIFT, 333, 1, ms_lookahead_table_+1577 },
    { Parser::Transition_::SHIFT, 334, 1, ms_lookahead_table_+1578 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1579 },
    { Parser::Transition_::SHIFT, 236, 1, ms_lookahead_table_+1579 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1580 },
    { Parser::Transition_::SHIFT, 239, 1, ms_lookahead_table_+1580 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1581 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1581 },
    { Parser::Transition_::SHIFT, 336, 1, ms_lookahead_table_+1581 },
    { Parser::Transition_::SHIFT, 337, 1, ms_lookahead_table_+1582 },
    { Parser::Transition_::SHIFT, 338, 1, ms_lookahead_table_+1583 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1584 },
    { Parser::Transition_::SHIFT, 125, 1, ms_lookahead_table_+1584 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1585 },
    { Parser::Transition_::SHIFT, 180, 1, ms_lookahead_table_+1585 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1586 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1586 },
    { Parser::Transition_::SHIFT, 340, 1, ms_lookahead_table_+1586 },
    { Parser::Transition_::SHIFT, 341, 1, ms_lookahead_table_+1587 },
    { Parser::Transition_::SHIFT, 342, 1, ms_lookahead_table_+1588 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1589 },
    { Parser::Transition_::SHIFT, 245, 1, ms_lookahead_table_+1589 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1590 },
    { Parser::Transition_::SHIFT, 248, 1, ms_lookahead_table_+1590 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1591 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+1591 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+1591 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+1592 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+1593 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+1594 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+1595 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+1596 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+1597 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+1598 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+1599 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+1600 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+1601 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+1602 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+1603 },
    { Parser::Transition_::SHIFT, 344, 1, ms_lookahead_table_+1604 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+1605 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+1605 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+1606 },
    { Parser::Transition_::SHIFT, 55, 1, ms_lookahead_table_+1607 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+1608 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+1609 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+1610 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+1611 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+1612 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+1613 },
    { Parser::Transition_::SHIFT, 58, 1, ms_lookahead_table_+1614 },
    { Parser::Transition_::SHIFT, 51, 1, ms_lookahead_table_+1615 },
    { Parser::Transition_::SHIFT, 62, 1, ms_lookahead_table_+1616 }
};
BarfCpp_::Size const Parser::ms_transition_count_ = sizeof(Parser::ms_transition_table_) / sizeof(*Parser::ms_transition_table_);

Parser::Token::Id const Parser::ms_lookahead_table_[] =
{
    Parser::Terminal::TEXT,
    Parser::Nonterminal_::body,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::for_each,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '?',
    '[',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '(',
    Parser::Terminal::ID,
    ')',
    '(',
    Parser::Terminal::ID,
    ')',
    '[',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '=',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '%',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '>',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '%',
    '*',
    '/',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '%',
    '*',
    '/',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '%',
    '*',
    '+',
    '-',
    '/',
    '!',
    '(',
    '-',
    '=',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '%',
    '*',
    '+',
    '-',
    '.',
    '/',
    '%',
    '*',
    '+',
    '-',
    '.',
    '/',
    '!',
    '(',
    '-',
    '=',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '%',
    '*',
    '+',
    '-',
    '.',
    '/',
    '%',
    '*',
    '+',
    '-',
    '.',
    '/',
    '&',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '=',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '%',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '>',
    '|',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '!',
    '%',
    '&',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    ']',
    '|',
    ')',
    '!',
    '%',
    '&',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    ']',
    '|',
    '?',
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '(',
    ')',
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    Parser::Terminal::END_CODE,
    '(',
    Parser::Terminal::ID,
    ')',
    '(',
    Parser::Terminal::ID,
    ')',
    '(',
    Parser::Terminal::ID,
    ')',
    '(',
    Parser::Terminal::ID,
    ')',
    '[',
    Parser::Terminal::END_CODE,
    ']',
    Parser::Terminal::STRING_LITERAL,
    ')',
    Parser::Terminal::END_CODE,
    ']',
    ')',
    Parser::Terminal::END_CODE,
    '(',
    Parser::Terminal::ID,
    ',',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    Parser::Terminal::END_CODE,
    '(',
    Parser::Terminal::ID,
    ',',
    Parser::Terminal::ID,
    ')',
    Parser::Terminal::END_CODE,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    Parser::Terminal::END_CODE,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    Parser::Terminal::CODE_NEWLINE,
    '(',
    Parser::Terminal::ID,
    ')',
    '[',
    Parser::Terminal::CODE_NEWLINE,
    ']',
    Parser::Terminal::STRING_LITERAL,
    ')',
    Parser::Terminal::CODE_NEWLINE,
    ']',
    ')',
    Parser::Terminal::CODE_NEWLINE,
    '(',
    Parser::Terminal::ID,
    ',',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    Parser::Terminal::CODE_NEWLINE,
    '(',
    Parser::Terminal::ID,
    ',',
    Parser::Terminal::ID,
    ')',
    Parser::Terminal::CODE_NEWLINE,
    Parser::Terminal::CODE_NEWLINE,
    Parser::Terminal::TEXT,
    Parser::Terminal::TEXT,
    Parser::Nonterminal_::body,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::conditional_series_end,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::else_statement,
    Parser::Nonterminal_::else_if_statement,
    Parser::Nonterminal_::end_if,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::for_each,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::ELSE,
    Parser::Terminal::ELSE_IF,
    Parser::Terminal::END_IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::END_CODE,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    Parser::Terminal::END_CODE,
    Parser::Terminal::END_CODE,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::ELSE,
    Parser::Terminal::ELSE_IF,
    Parser::Terminal::END_IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::CODE_NEWLINE,
    '(',
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|',
    Parser::Terminal::CODE_NEWLINE,
    Parser::Terminal::CODE_NEWLINE,
    Parser::Terminal::TEXT,
    Parser::Nonterminal_::body,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::end_if,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::for_each,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::END_IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::END_IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::TEXT,
    Parser::Nonterminal_::body,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::end_define,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::for_each,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::END_DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::END_CODE,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::END_DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::CODE_NEWLINE,
    Parser::Terminal::TEXT,
    Parser::Nonterminal_::body,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::end_loop,
    Parser::Nonterminal_::for_each,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::END_LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::END_CODE,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::END_LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::CODE_NEWLINE,
    Parser::Terminal::TEXT,
    Parser::Nonterminal_::body,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::for_each,
    Parser::Nonterminal_::end_for_each,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::END_FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::END_CODE,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::IF,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::DEFINE,
    Parser::Terminal::LOOP,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::END_FOR_EACH,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::CODE_NEWLINE,
    Parser::Terminal::TEXT,
    Parser::Nonterminal_::body,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::conditional_series_end,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::else_statement,
    Parser::Nonterminal_::else_if_statement,
    Parser::Nonterminal_::end_if,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::for_each,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::executable,
    Parser::Nonterminal_::code,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::if_statement,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Nonterminal_::loop,
    Parser::Nonterminal_::for_each,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::code,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::DUMP_SYMBOL_TABLE,
    Parser::Terminal::UNDEFINE,
    Parser::Terminal::DECLARE_ARRAY,
    Parser::Terminal::DECLARE_MAP,
    Parser::Terminal::INCLUDE,
    Parser::Terminal::SANDBOX_INCLUDE,
    Parser::Terminal::WARNING,
    Parser::Terminal::ERROR,
    Parser::Terminal::FATAL_ERROR,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::code_body,
    Parser::Nonterminal_::expression,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::conditional_series,
    Parser::Nonterminal_::if_statement,
    Parser::Terminal::IF,
    Parser::Terminal::IF,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::conditional_series_end,
    Parser::Nonterminal_::else_statement,
    Parser::Nonterminal_::else_if_statement,
    Parser::Nonterminal_::end_if,
    Parser::Terminal::ELSE,
    Parser::Terminal::ELSE_IF,
    Parser::Terminal::END_IF,
    Parser::Terminal::ELSE,
    Parser::Terminal::ELSE_IF,
    Parser::Terminal::END_IF,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::if_statement,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::else_statement,
    Parser::Terminal::ELSE,
    Parser::Terminal::ELSE,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::else_if_statement,
    Parser::Terminal::ELSE_IF,
    Parser::Terminal::ELSE_IF,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::end_if,
    Parser::Terminal::END_IF,
    Parser::Terminal::END_IF,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::define,
    Parser::Nonterminal_::define_scalar,
    Parser::Nonterminal_::define_array_element,
    Parser::Nonterminal_::define_map_element,
    Parser::Terminal::DEFINE,
    Parser::Terminal::DEFINE,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::define_scalar,
    Parser::Terminal::DEFINE,
    '(',
    Parser::Terminal::ID,
    ')',
    Parser::Terminal::DEFINE,
    '(',
    Parser::Terminal::ID,
    ')',
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::define_array_element,
    Parser::Terminal::DEFINE,
    '(',
    Parser::Terminal::ID,
    '[',
    ']',
    Parser::Terminal::DEFINE,
    '(',
    Parser::Terminal::ID,
    '[',
    ']',
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::define_map_element,
    Parser::Terminal::DEFINE,
    '(',
    Parser::Terminal::ID,
    '[',
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::DEFINE,
    '(',
    Parser::Terminal::ID,
    '[',
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::end_define,
    Parser::Terminal::END_DEFINE,
    Parser::Terminal::END_DEFINE,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::loop,
    Parser::Terminal::LOOP,
    Parser::Terminal::LOOP,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::end_loop,
    Parser::Terminal::END_LOOP,
    Parser::Terminal::END_LOOP,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::for_each,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::FOR_EACH,
    Parser::Terminal::START_CODE,
    Parser::Terminal::CODE_LINE,
    Parser::Nonterminal_::end_for_each,
    Parser::Terminal::END_FOR_EACH,
    Parser::Terminal::END_FOR_EACH,
    '!',
    '(',
    '-',
    Parser::Terminal::ID,
    Parser::Terminal::SIZEOF,
    Parser::Terminal::IS_DEFINED,
    Parser::Terminal::INTEGER_LITERAL,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::KEYWORD_INT,
    Parser::Terminal::KEYWORD_STRING,
    Parser::Terminal::STRING_LENGTH,
    Parser::Terminal::TO_CHARACTER_LITERAL,
    Parser::Terminal::TO_STRING_LITERAL,
    Parser::Nonterminal_::expression,
    '!',
    '%',
    '&',
    '*',
    '+',
    '-',
    '.',
    '/',
    '<',
    '=',
    '>',
    '|'
};
BarfCpp_::Size const Parser::ms_lookahead_count_ = sizeof(Parser::ms_lookahead_table_) / sizeof(*Parser::ms_lookahead_table_);

char const *const Parser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "TEXT",
    "START_CODE",
    "END_CODE",
    "CODE_LINE",
    "CODE_NEWLINE",
    "ID",
    "DUMP_SYMBOL_TABLE",
    "IF",
    "ELSE",
    "ELSE_IF",
    "END_IF",
    "UNDEFINE",
    "DECLARE_ARRAY",
    "DECLARE_MAP",
    "DEFINE",
    "END_DEFINE",
    "LOOP",
    "END_LOOP",
    "FOR_EACH",
    "END_FOR_EACH",
    "INCLUDE",
    "SANDBOX_INCLUDE",
    "WARNING",
    "ERROR",
    "FATAL_ERROR",
    "SIZEOF",
    "IS_DEFINED",
    "INTEGER_LITERAL",
    "STRING_LITERAL",
    "KEYWORD_INT",
    "KEYWORD_STRING",
    "STRING_LENGTH",
    "TO_CHARACTER_LITERAL",
    "TO_STRING_LITERAL",
    "BAD_TOKEN",
    "body",
    "executable",
    "code",
    "code_body",
    "conditional_series",
    "conditional_series_end",
    "if_statement",
    "else_statement",
    "else_if_statement",
    "end_if",
    "define",
    "define_scalar",
    "define_array_element",
    "define_map_element",
    "end_define",
    "loop",
    "end_loop",
    "for_each",
    "end_for_each",
    "expression"
};
BarfCpp_::Size const Parser::ms_token_name_count_ = sizeof(Parser::ms_token_name_table_) / sizeof(*Parser::ms_token_name_table_);

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 74 "barf_preprocessor_parser.trison"

FiLoc const &Parser::GetFiLoc () const
{
    assert(m_scanner != NULL);
    return m_scanner->GetFiLoc();
}

bool Parser::OpenFile (string const &input_filename)
{
    assert(m_scanner != NULL);
    ResetForNewInput();
    return m_scanner->OpenFile(input_filename);
}

void Parser::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    assert(m_scanner != NULL);
    ResetForNewInput();
    return m_scanner->OpenString(input_string, input_name, use_line_numbers);
}

void Parser::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    assert(m_scanner != NULL);
    ResetForNewInput();
    return m_scanner->OpenUsingStream(input_stream, input_name, use_line_numbers);
}

} // end of namespace Preprocessor
} // end of namespace Barf

#line 5914 "barf_preprocessor_parser.cpp"
