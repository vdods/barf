// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// barf_preprocessor_parser.cpp generated by trison
// from barf_preprocessor_parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "barf_preprocessor_parser.hpp"



#define TRISON_CPP_DEBUG_CODE_(flags, spew_code) if (DebugSpewIsEnabled() && ((flags) & ActiveDebugSpewFlags()) != 0) { spew_code; }

#include <algorithm>
#include <limits>
#include <sstream>
#include <utility>


#line 61 "barf_preprocessor_parser.trison"

#include "barf_preprocessor_ast.hpp"
#include "barf_preprocessor_scanner.hpp"

namespace Barf {
namespace Preprocessor {

#line 27 "barf_preprocessor_parser.cpp"

Parser::Parser ()
{
    m_max_allowable_lookahead_count = 1;
    m_max_allowable_parse_tree_depth = 64;
    m_realized_state_ = NULL;
    m_hypothetical_state_ = NULL;
    SetDebugSpewStream(NULL);
    SetActiveDebugSpewFlags(DSF__ALL);


#line 68 "barf_preprocessor_parser.trison"

    m_scanner = new Scanner();

#line 43 "barf_preprocessor_parser.cpp"
}

Parser::~Parser ()
{
    // Perform all the internal cleanup needed.
    CleanUpAllInternals_();
    TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 53 "barf_preprocessor_parser.cpp"
 << "Executing destructor actions\n")


#line 71 "barf_preprocessor_parser.trison"

    delete m_scanner;
    m_scanner = NULL;

#line 62 "barf_preprocessor_parser.cpp"
}

bool Parser::IsAtEndOfInput ()
{
    return true; // TEMP
}

std::string Parser::DebugSpewPrefix () const
{
    std::ostringstream out;
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 76 "barf_preprocessor_parser.cpp"
;
    return out.str();
}

void Parser::ResetForNewInput ()
{
    TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 86 "barf_preprocessor_parser.cpp"
 << "Executing reset-for-new-input actions\n")

    // Perform all the internal cleanup needed.
    CleanUpAllInternals_();
}

Parser::ParserReturnCode Parser::Parse (Ast::Base * *return_token, Nonterminal::Name nonterminal_to_parse)
{

#line 75 "barf_preprocessor_parser.trison"

    EmitExecutionMessage("starting preprocessor parser");

#line 100 "barf_preprocessor_parser.cpp"

    ParserReturnCode const parse_return_code = Parse_(return_token, nonterminal_to_parse);


#line 78 "barf_preprocessor_parser.trison"

    if (parse_return_code == PRC_SUCCESS)
        EmitExecutionMessage("preprocessor parse was successful");

#line 110 "barf_preprocessor_parser.cpp"

    return parse_return_code;
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

void Parser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 125 "barf_preprocessor_parser.cpp"
 << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 133 "barf_preprocessor_parser.cpp"
 << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, Parser::ParserReturnCode parser_return_code)
{
    if (std::size_t(parser_return_code) < Parser::ms_parser_return_code_string_count_)
        stream << Parser::ms_parser_return_code_string_table_[std::size_t(parser_return_code)];
    else
        stream << "!INVALID!ParserReturnCode!";
    return stream;
}

std::ostream &operator << (std::ostream &stream, Parser::Token const &token)
{
    if (token.m_id < Parser::ms_token_name_count_)
        stream << Parser::ms_token_name_table_[token.m_id];
    else
        stream << "!INVALID!TOKEN!";
    return stream;
}

char const *const Parser::ms_parser_return_code_string_table_[] =
{
    "PRC_SUCCESS",
    "PRC_UNHANDLED_PARSE_ERROR",
    "PRC_EXCEEDED_MAX_ALLOWABLE_LOOKAHEAD_COUNT",
    "PRC_EXCEEDED_MAX_ALLOWABLE_PARSE_TREE_DEPTH",
    "PRC_INTERNAL_ERROR",
};
std::size_t const Parser::ms_parser_return_code_string_count_ = sizeof(Parser::ms_parser_return_code_string_table_) / sizeof(*Parser::ms_parser_return_code_string_table_);

char const *const Parser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "TEXT",
    "START_CODE",
    "END_CODE",
    "CODE_LINE",
    "CODE_NEWLINE",
    "ID",
    "DUMP_SYMBOL_TABLE",
    "IF",
    "ELSE",
    "ELSE_IF",
    "END_IF",
    "UNDEFINE",
    "DECLARE_ARRAY",
    "DECLARE_MAP",
    "DEFINE",
    "END_DEFINE",
    "LOOP",
    "END_LOOP",
    "FOR_EACH",
    "END_FOR_EACH",
    "INCLUDE",
    "SANDBOX_INCLUDE",
    "WARNING",
    "ERROR",
    "FATAL_ERROR",
    "SIZEOF",
    "IS_DEFINED",
    "INTEGER_LITERAL",
    "STRING_LITERAL",
    "KEYWORD_INT",
    "KEYWORD_STRING",
    "STRING_LENGTH",
    "TO_CHARACTER_LITERAL",
    "TO_STRING_LITERAL",
    "BAD_TOKEN",
    "body",
    "executable",
    "code",
    "code_body",
    "conditional_series",
    "conditional_series_end",
    "if_statement",
    "else_statement",
    "else_if_statement",
    "end_if",
    "define",
    "define_scalar",
    "define_array_element",
    "define_map_element",
    "end_define",
    "loop",
    "end_loop",
    "for_each",
    "end_for_each",
    "expression"
};
std::size_t const Parser::ms_token_name_count_ = sizeof(Parser::ms_token_name_table_) / sizeof(*Parser::ms_token_name_table_);

void Parser::ThrowAwayToken_ (Token const &token_) throw()
{
    TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 492 "barf_preprocessor_parser.cpp"
 << "Executing throw-away-token actions on token " << token_ << '\n')
    ThrowAwayTokenData_(token_.m_data);
}

void Parser::ThrowAwayTokenData_ (Ast::Base * const &token_data) throw()
{

#line 137 "barf_preprocessor_parser.trison"

    delete token_data;

#line 504 "barf_preprocessor_parser.cpp"
}

Parser::Token Parser::Scan_ () throw()
{
    TRISON_CPP_DEBUG_CODE_(DSF_SCANNER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 512 "barf_preprocessor_parser.cpp"
 << "Executing scan actions to retrieve next token...\n")


#line 140 "barf_preprocessor_parser.trison"

    assert(m_scanner != NULL);
    return m_scanner->Scan();

#line 521 "barf_preprocessor_parser.cpp"

    TRISON_CPP_DEBUG_CODE_(DSF_PROGRAMMER_ERROR, *DebugSpewStream() << "PROGRAMMER ERROR: No value returned from scan_actions code block\n")
    assert(false && "no value returned from scan_actions code block");
}

void Parser::RunNonassocErrorActions_ (Token const &lookahead)
{
}

template <typename T>
std::ostream &operator << (std::ostream &out, std::set<T> const &s)
{
    out << "{ ";
    for (typename std::set<T>::const_iterator it = s.begin(), it_end = s.end(); it != it_end; ++it)
        out << *it << ", ";
    out << '}';
    return out;
}

template <typename T>
std::ostream &operator << (std::ostream &out, std::vector<T> const &s)
{
    out << "[ ";
    for (typename std::vector<T>::const_iterator it = s.begin(), it_end = s.end(); it != it_end; ++it)
        out << *it << ", ";
    out << ']';
    return out;
}

std::uint32_t Parser::NonterminalStartStateIndex_ (Parser::Nonterminal::Name nonterminal)
{
    switch (nonterminal)
    {
        case Nonterminal::body: return 0;
        case Nonterminal::code: return 14;
        case Nonterminal::code_body: return 20;
        case Nonterminal::conditional_series: return 215;
        case Nonterminal::conditional_series_end: return 239;
        case Nonterminal::define: return 293;
        case Nonterminal::define_array_element: return 317;
        case Nonterminal::define_map_element: return 340;
        case Nonterminal::define_scalar: return 298;
        case Nonterminal::else_if_statement: return 272;
        case Nonterminal::else_statement: return 257;
        case Nonterminal::end_define: return 365;
        case Nonterminal::end_for_each: return 437;
        case Nonterminal::end_if: return 244;
        case Nonterminal::end_loop: return 401;
        case Nonterminal::executable: return 9;
        case Nonterminal::expression: return 26;
        case Nonterminal::for_each: return 414;
        case Nonterminal::if_statement: return 220;
        case Nonterminal::loop: return 378;
        default: assert(false && "invalid nonterminal"); return 0;
    }
}

bool Parser::HasEncounteredErrorState () const
{
    return (m_realized_state_ == NULL) ? false : m_realized_state_->HasEncounteredErrorState();
}

std::int64_t Parser::MaxAllowableLookaheadCount () const
{
    return m_max_allowable_lookahead_count;
}

std::size_t Parser::MaxRealizedLookaheadCount () const
{
    return (m_realized_state_ == NULL) ? 0 : m_realized_state_->MaxRealizedLookaheadCount();
}

std::int64_t Parser::MaxAllowableParseTreeDepth () const
{
    return m_max_allowable_parse_tree_depth;
}

std::uint32_t Parser::MaxRealizedParseTreeDepth () const
{
    return (m_hypothetical_state_ == NULL) ? 0 : m_hypothetical_state_->m_max_realized_parse_tree_depth;
}

void Parser::SetMaxAllowableLookaheadCount (std::int64_t max_allowable_lookahead_count)
{
    m_max_allowable_lookahead_count = max_allowable_lookahead_count;
}

void Parser::SetMaxAllowableParseTreeDepth (std::int64_t max_allowable_parse_tree_depth)
{
    m_max_allowable_parse_tree_depth = max_allowable_parse_tree_depth;
}

Parser::ParserReturnCode Parser::Parse_ (Ast::Base * *return_token, Nonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(DSF_START_END_PARSE, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 621 "barf_preprocessor_parser.cpp"
 << "Starting parse\n")

    ParserReturnCode parser_return_code_ = PRC_INTERNAL_ERROR;
    *return_token = NULL;


    std::uint32_t start_state_index = NonterminalStartStateIndex_(nonterminal_to_parse);

    if (m_realized_state_ != NULL) // This happens when parsing again, not from scratch.
    {
        assert(m_hypothetical_state_ == NULL);
        // Note that this resets the error state.
        m_realized_state_->Reinitialize(start_state_index);
        // Delete this entirely to be initialized anew, since it has no state that
        // carries over between parses.
        delete m_hypothetical_state_;
        m_hypothetical_state_ = NULL;
    }
    else // This happens when parsing for the first time.
        m_realized_state_ = new RealizedState_(start_state_index);

    m_hypothetical_state_ = new HypotheticalState_(start_state_index);

    TRISON_CPP_DEBUG_CODE_(DSF_STACK_AND_LOOKAHEADS,
        *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 649 "barf_preprocessor_parser.cpp"
 << "<stack> . <lookaheads>: ";
        m_realized_state_->PrintStackAndLookaheads(*DebugSpewStream());
        *DebugSpewStream() << '\n';
    )

    bool should_return = false;
    std::size_t iteration_index = 0;
    while (!should_return)
    {
        TRISON_CPP_DEBUG_CODE_(
            DSF_ITERATION_COUNT,
            *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 664 "barf_preprocessor_parser.cpp"
 << "\n";
            *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 669 "barf_preprocessor_parser.cpp"
 << "---------- ITERATION " << iteration_index << " --------------\n";
            PrintParserStatus_(*DebugSpewStream());
            *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 675 "barf_preprocessor_parser.cpp"
 << '\n';
        )

        if (m_realized_state_->HasExceededMaxAllowableLookaheadCount(m_max_allowable_lookahead_count))
        {
            TRISON_CPP_DEBUG_CODE_(DSF_LIMIT_EXCEEDED, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 684 "barf_preprocessor_parser.cpp"
 << "Max realized lookahead count (" << m_realized_state_->MaxRealizedLookaheadCount() << ") has exceeded max allowable lookahead token count (" << m_max_allowable_lookahead_count << "); modify this limit using the default_max_allowable_lookahead_count directive (see trison.cpp.targetspec), or using the SetMaxAllowableLookaheadCount method.  Returning with error.\n")
            parser_return_code_ = PRC_EXCEEDED_MAX_ALLOWABLE_LOOKAHEAD_COUNT;
            break;
        }

        if (m_hypothetical_state_->HasExceededMaxAllowableParseTreeDepth(m_max_allowable_parse_tree_depth))
        {
            TRISON_CPP_DEBUG_CODE_(DSF_LIMIT_EXCEEDED, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 695 "barf_preprocessor_parser.cpp"
 << "Parse tree depth (" << m_hypothetical_state_->ParseTreeDepth() << ") has exceeded max allowable parse tree depth (" << m_max_allowable_parse_tree_depth << "); modify this limit using the default_max_allowable_parse_tree_depth directive (see trison.cpp.targetspec), or using the SetMaxAllowableParseTreeDepth method.  Returning with error.\n")
            parser_return_code_ = PRC_EXCEEDED_MAX_ALLOWABLE_PARSE_TREE_DEPTH;
            break;
        }

        if (m_hypothetical_state_->m_root->HasTrunkChild())
            ExecuteAndRemoveTrunkActions_(should_return, parser_return_code_, return_token);
        else
            ContinueNPDAParse_(should_return);

        TRISON_CPP_DEBUG_CODE_(DSF_ITERATION_COUNT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 709 "barf_preprocessor_parser.cpp"
 << '\n')
        ++iteration_index;
    }

    TRISON_CPP_DEBUG_CODE_(
        DSF_ITERATION_COUNT,
        *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 719 "barf_preprocessor_parser.cpp"
 << "\n";
        *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 724 "barf_preprocessor_parser.cpp"
 << "---------- RETURNING --------------\n";
        PrintParserStatus_(*DebugSpewStream());
        *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 730 "barf_preprocessor_parser.cpp"
 << '\n';
    )

    assert(std::size_t(parser_return_code_) < ms_parser_return_code_string_count_ && "this should never happen");
    TRISON_CPP_DEBUG_CODE_(
        DSF_START_END_PARSE,
        *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 740 "barf_preprocessor_parser.cpp"
 << "Parse() is returning " << ms_parser_return_code_string_table_[parser_return_code_] << '\n';
    )

    return parser_return_code_;
}

void Parser::ExecuteAndRemoveTrunkActions_ (bool &should_return, ParserReturnCode &parser_return_code_, Ast::Base * *&return_token)
{
    TRISON_CPP_DEBUG_CODE_(DSF_PARSE_TREE_MESSAGE, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 752 "barf_preprocessor_parser.cpp"
 << "Parse stack tree has trunk; executing trunk actions.\n")
    TRISON_CPP_DEBUG_CODE_(DSF_PARSE_TREE_MESSAGE, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 757 "barf_preprocessor_parser.cpp"
 << '\n')

    if (m_hypothetical_state_->m_root->HasTrunkChild())
    {
        // The trunk_child is popped and then will die by the end of this function.
        // Using std::unique_ptr for exception safety -- if an exception is thrown within
        // this function, then trunk_child still needs to be deleted.
        std::unique_ptr<ParseTreeNode_> trunk_child(m_hypothetical_state_->m_root->PopTrunkChild());
        assert(trunk_child->m_parent_node == NULL);
        assert(trunk_child->m_child_nodes.empty());

        bool destroy_and_recreate_parse_tree = false;

        switch (trunk_child->m_spec.m_type)
        {
            case ParseTreeNode_::RETURN: {
                TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 777 "barf_preprocessor_parser.cpp"
 << "Executing trunk action RETURN.\n")
                assert(m_realized_state_->TokenStack().size() == 2);
                parser_return_code_ = PRC_SUCCESS;
                // This doesn't change the structure of the stack but does take ownership of the top stack token.
                // This must be done so that the return token isn't destroyed with the parser.
                m_realized_state_->StealTokenStackTop(return_token);
                should_return = true;
                break;
            }
            case ParseTreeNode_::REDUCE: {
                // Execute the appropriate rule on the top tokens in the stack
                std::uint32_t const &rule_index = trunk_child->m_spec.m_single_data;
                TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 793 "barf_preprocessor_parser.cpp"
 << "Executing trunk action REDUCE rule " << rule_index << "; " << Grammar_::ms_rule_table_[rule_index].m_description << '\n')
                Grammar_::Rule_ const &rule = Grammar_::ms_rule_table_[rule_index];
                Token::Data reduced_nonterminal_token_data = ExecuteReductionRule_(rule_index, m_realized_state_->TokenStack());
                m_realized_state_->ExecuteActionReduce(rule, reduced_nonterminal_token_data, m_hypothetical_state_->m_hps_queue);
                // This is done essentially so that m_realized_lookahead_cursor can be reset.
                destroy_and_recreate_parse_tree = true;
                break;
            }
            case ParseTreeNode_::SHIFT: {
                std::uint32_t const &shifted_token_id = trunk_child->m_spec.m_single_data;
                TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 807 "barf_preprocessor_parser.cpp"
 << "Executing trunk action SHIFT " << Token(shifted_token_id) << '\n')
                m_realized_state_->ExecuteActionShift(trunk_child->m_child_branch_vector, m_hypothetical_state_->m_hps_queue);
                break;
            }
            case ParseTreeNode_::INSERT_LOOKAHEAD_ERROR: {
                TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 816 "barf_preprocessor_parser.cpp"
 << "Executing trunk action INSERT_LOOKAHEAD_ERROR, and setting has-encountered-error-state flag.\n")
                m_realized_state_->ExecuteActionInsertLookaheadError(m_hypothetical_state_->m_hps_queue);
                break;
            }
            case ParseTreeNode_::DISCARD_LOOKAHEAD: {
                TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 825 "barf_preprocessor_parser.cpp"
 << "Executing trunk action DISCARD_LOOKAHEAD.\n")
                m_realized_state_->ExecuteActionDiscardLookahead(m_hypothetical_state_->m_hps_queue);
                break;
            }
            case ParseTreeNode_::POP_STACK: {
                std::uint32_t const &pop_count = trunk_child->m_spec.m_single_data;
                TRISON_CPP_DEBUG_CODE_(DSF_PARSER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 835 "barf_preprocessor_parser.cpp"
 << "Executing trunk action POP_STACK " << pop_count << ".\n")

                // This one is tricky to implement within RealizedState_ alone, mainly because
                // of the ThrowAwayToken_ call.
                if (m_realized_state_->TokenStack().size() > pop_count)
                {
                    for (std::uint32_t i = 0; i < pop_count; ++i)
                    {
                        // TODO: Could print the m_realized_state_ m_branch_vector_stack element being popped.
                        ThrowAwayToken_(m_realized_state_->PopStack());
                    }
                }
                else
                {
                    // We're popping more than the whole stack, which is an error
                    parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
                    should_return = true;
                }

                // Because POP_STACK involves popping the stack, the parse tree should be destroyed and
                // recreated (from the branches in the top of the realized state stack).  This is somewhat
                // draconian and non-optimal, but simple and effective.
                destroy_and_recreate_parse_tree = true;
                // TODO: Because HPS branches are blocked right after POP_STACK, maybe don't bother adding any
                // additional children below POP_STACK nodes (i.e. one HPS child of POP_STACK is sufficient to
                // keep it alive probably).  This would reduce the number of memory operations.
                break;
            }

            default:
                assert(false && "this should not happen");
                break;
        }

        TRISON_CPP_DEBUG_CODE_(DSF_STACK_AND_LOOKAHEADS,
            *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 874 "barf_preprocessor_parser.cpp"
 << "<stack> . <lookaheads>: ";
            m_realized_state_->PrintStackAndLookaheads(*DebugSpewStream());
            *DebugSpewStream() << '\n';
        )

        if (destroy_and_recreate_parse_tree)
        {
            TRISON_CPP_DEBUG_CODE_(DSF_PARSE_TREE_MESSAGE, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 885 "barf_preprocessor_parser.cpp"
 << "    Destroying and recreating parse tree based on top of branch stack of of realized state.\n")
            m_hypothetical_state_->DestroyParseTree();
            CreateParseTreeFromRealizedState_();
        }
    }
}

void Parser::ContinueNPDAParse_ (bool &should_return)
{
    // If there are no non-blocked hps-es, then the parse should stop.  If any non-blocked hps-es
    // are processed, then this flag will be set to false.
    should_return = true;

    TRISON_CPP_DEBUG_CODE_(DSF_PARSE_TREE_MESSAGE, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 902 "barf_preprocessor_parser.cpp"
 << "Parse stack tree does not have trunk; continuing parse.\n")

    // If there's a SHIFT/REDUCE conflict, then see if it can be resolved first.
    {
        ParseTreeNode_ *shift  = NULL;
        ParseTreeNode_ *reduce = NULL;
        // TODO: Move this handling into its own function
        // NOTE: This only works at the root.  If that were to change, then various things
        // would need to scan over only the HPSes that are contained within the relevant subtree.
        bool has_shift_reduce_conflict = m_hypothetical_state_->m_root->HasShiftReduceConflict(shift, reduce);
        bool has_shift_reduce_conflict_and_should_resolve = false;
        if (has_shift_reduce_conflict)
        {
            // Should not do anything unless the shift and reduce branches have the same
            // m_realized_lookahead_cursor (e.g. a REDUCE action will start out with
            // m_realized_lookahead_cursor == 0, while a SHIFT action will start out with
            // m_realized_lookahead_cursor == 1, but the REDUCE action branch needs to be
            // allowed to catch up before having any chance at the SHIFT/REDUCE conflict
            // being resolvable).
            if (m_hypothetical_state_->MinAndMaxRealizedLookaheadCursorsAreEqual())
                has_shift_reduce_conflict_and_should_resolve = true;
            else
            {
                TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 929 "barf_preprocessor_parser.cpp"
 << "    SHIFT/REDUCE conflict encountered, but the min and max realized lookahead cursors for all HPSes are not equal, so it's not ready for the conflict to be resolved.\n")
            }
        }

        if (has_shift_reduce_conflict_and_should_resolve)
        {
            assert(shift != NULL);
            assert(reduce != NULL);
            ParseTreeNode_::PrecedenceLevelRange shift_precedence_level_range = shift->ComputePrecedenceLevelRange(1);
            ParseTreeNode_::PrecedenceLevelRange reduce_precedence_level_range = reduce->ComputePrecedenceLevelRange(1);
            assert(reduce_precedence_level_range.first == reduce_precedence_level_range.second);

            TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 945 "barf_preprocessor_parser.cpp"
 << "    SHIFT/REDUCE conflict encountered. REDUCE precedence level range: [" << Grammar_::ms_precedence_table_[reduce_precedence_level_range.first].m_name << ", " << Grammar_::ms_precedence_table_[reduce_precedence_level_range.second].m_name << "], SHIFT precedence level range: [" << Grammar_::ms_precedence_table_[shift_precedence_level_range.first].m_name << ", " << Grammar_::ms_precedence_table_[shift_precedence_level_range.second].m_name << "]\n")

            // 6 possibilities (the higher lines indicate higher precedence level.  same line
            // indicates equality).  there is always exactly one reduce hps, and at least
            // one shift hps.
            //
            // note that if a shift and a reduce have the same precedence level, then they also
            // have the same associativity.
            //
            // 1.     shift        2.     shift        3.
            //        shift               shift
            // reduce              reduce shift        reduce shift
            //
            // 4.                  5.                  6.
            //                                                shift
            // reduce shift        reduce              reduce shift
            //        shift               shift               shift
            //        shift               shift
            //
            // cases 1 and 5 can be trivially resolved -- by pruning the reduce
            // and by pruning the shift respectively.
            //
            // case 2 can only be resolved if the associativity of the reduction rule
            // is RIGHT, in which case the reduce is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 3 may be trivially resolved via rule associativity (LEFT causes the
            // shift to be pruned, RIGHT causes the reduce to be pruned, and NONASSOC
            // should cause an error).
            //
            // case 4 can only be resolved if the associativity of the reduction rule
            // is LEFT, in which case the shift is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 6 can not be resolved at this point.

            bool conflict_resolved = false;

            // Case 1
            if (reduce_precedence_level_range.second < shift_precedence_level_range.first)
            {
                TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 990 "barf_preprocessor_parser.cpp"
 << "        Case 1; REDUCE < SHIFT; pruning REDUCE and continuing.\n")
                // TODO: Use std::unique_ptr and pass in via move so that the `reduce = NULL` is unnecessary.
                m_hypothetical_state_->DeleteBranch(reduce);
                reduce = NULL;
                conflict_resolved = true;
            }
            // Case 2
            else if (reduce_precedence_level_range.first == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
                TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1004 "barf_preprocessor_parser.cpp"
 << "        Case 2; REDUCE <= SHIFT;\n")
                Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduce->m_spec.m_single_data];
                Grammar_::Precedence_ const &reduction_rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity == Grammar_::ASSOC_RIGHT)
                {
                    TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1013 "barf_preprocessor_parser.cpp"
 << "        Pruning REDUCE (because it is right-associative) and continuing.\n")
                    m_hypothetical_state_->DeleteBranch(reduce);
                    reduce = NULL;
                    conflict_resolved = true;
                }
                else
                {
                    TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1024 "barf_preprocessor_parser.cpp"
 << "        Can't resolve conflict at this time.\n")
                }
            }
            // Case 3
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first == shift_precedence_level_range.second)
            {
                Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduce->m_spec.m_single_data];
                Grammar_::Precedence_ const &reduction_rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
                TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1037 "barf_preprocessor_parser.cpp"
 << "        Case 3; REDUCE == SHIFT; rule " << reduce->m_spec.m_single_data << " associativity: " <<
 Grammar_::ms_associativity_string_table_[reduction_rule_precedence.m_associativity] << '\n')
                switch (reduction_rule_precedence.m_associativity)
                {
                    case Grammar_::ASSOC_LEFT:
                        TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1046 "barf_preprocessor_parser.cpp"
 << "        Pruning SHIFT (because REDUCE is left-associative) and continuing.\n")
                        m_hypothetical_state_->DeleteBranch(shift);
                        shift = NULL;
                        conflict_resolved = true;
                        break;

                    case Grammar_::ASSOC_NONASSOC:
                        TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1057 "barf_preprocessor_parser.cpp"
 << "        Composition of nonassoc rules with the same precedence is an error.  Pruning both SHIFT and REDUCE.  Recreating parse tree under INSERT_LOOKAHEAD_ERROR action.\n")
                        // Neither SHIFT nor REDUCE should survive.  Instead, create an INSERT_LOOKAHEAD_ERROR
                        // action to initiate error panic.  This works only because the shift and reduce nodes
                        // are children of the parse tree root.
                        assert(shift->m_parent_node == m_hypothetical_state_->m_root);
                        assert(reduce->m_parent_node == m_hypothetical_state_->m_root);

                        // Lookahead_(0) is the token that would be SHIFT'ed.
                        RunNonassocErrorActions_(Lookahead_(0));

                        m_hypothetical_state_->DeleteBranch(shift);
                        m_hypothetical_state_->DeleteBranch(reduce);
                        // Just verify that the HPS queue has been totally nullified by the above actions.
                        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                        {
                            assert(*hps_it == NULL);
                        }
                        m_hypothetical_state_->m_hps_queue.clear();
                        assert(m_hypothetical_state_->m_new_hps_queue.empty());
                        assert(m_hypothetical_state_->m_root->m_child_nodes.empty());

                        // Create fresh HPSes at the root from the realized state.
                        CreateParseTreeFromRealizedState_();
                        // TODO: This operation could be optimized due to the fact that each HPS will
                        // take exactly one action; INSERT_LOOKAHEAD_ERROR.  But for now, just do the
                        // easy thing.
                        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                        {
                            ParseTreeNode_ *hps = *hps_it;
                            assert(hps != NULL);
                            ParseTreeNode_ *new_hps = TakeHypotheticalActionOnHPS_(*hps, ParseTreeNode_::INSERT_LOOKAHEAD_ERROR, ParseTreeNode_::UNUSED_DATA);
                            m_hypothetical_state_->m_new_hps_queue.push_back(new_hps);
                            // Note that DeleteBranch only nullifies elements in m_hps_queue, it doesn't
                            // alter the container itself.
                            m_hypothetical_state_->DeleteBranch(hps);
                        }
                        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                        {
                            assert(*hps_it == NULL);
                        }
                        m_hypothetical_state_->m_hps_queue.clear();

                        // Now that all the INSERT_LOOKAHEAD_ERROR HPSes have been created and put into
                        // m_new_hps_queue, the existing HPSes have been deleted, and the processing later
                        // in this function (see `if (conflict_resolved)` block) is expecting the HPSes to
                        // be in m_hps_queue, swap the queues.
                        assert(m_hypothetical_state_->m_hps_queue.empty());
                        assert(!m_hypothetical_state_->m_new_hps_queue.empty());
                        std::swap(m_hypothetical_state_->m_hps_queue, m_hypothetical_state_->m_new_hps_queue);

                        // Mark the conflict as resolved.
                        conflict_resolved = true;
                        break;

                    case Grammar_::ASSOC_RIGHT:
                        TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1116 "barf_preprocessor_parser.cpp"
 << "        Pruning REDUCE (because it is right-associative) and continuing.\n")
                        m_hypothetical_state_->DeleteBranch(reduce);
                        reduce = NULL;
                        conflict_resolved = true;
                        break;

                    default:
                        assert(false && "this should never happen");
                        break;
                }
            }
            // Case 4
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.second &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
                TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1135 "barf_preprocessor_parser.cpp"
 << "        Case 4; REDUCE >= SHIFT;\n")
                Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduce->m_spec.m_single_data];
                Grammar_::Precedence_ const &reduction_rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity == Grammar_::ASSOC_LEFT)
                {
                    TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1144 "barf_preprocessor_parser.cpp"
 << "        Pruning SHIFT (because REDUCE is left-associative) and continuing.\n")
                    m_hypothetical_state_->DeleteBranch(shift);
                    shift = NULL;
                    conflict_resolved = true;
                }
                else
                {
                    TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1155 "barf_preprocessor_parser.cpp"
 << "        Can't resolve conflict at this time.\n")
                }
            }
            // Case 5
            else if (reduce_precedence_level_range.first > shift_precedence_level_range.second)
            {
                TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1165 "barf_preprocessor_parser.cpp"
 << "        Case 5; REDUCE > SHIFT; pruning SHIFT and continuing.\n")
                m_hypothetical_state_->DeleteBranch(shift);
                shift = NULL;
                conflict_resolved = true;
            }
            // Case 6
            else {
                TRISON_CPP_DEBUG_CODE_(DSF_SHIFT_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1176 "barf_preprocessor_parser.cpp"
 << "        Case 6; ambiguous SHIFT/REDUCE precedence comparison; can't resolve conflict at this time.\n")
                assert(reduce_precedence_level_range.first > shift_precedence_level_range.first);
                assert(reduce_precedence_level_range.second < shift_precedence_level_range.second);
            }

            if (conflict_resolved)
            {
                should_return = false;

                assert(m_hypothetical_state_->m_new_hps_queue.empty());
                // Take new hps-es and clear old ones.
                for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                {
                    ParseTreeNode_ *hps = *hps_it;
                    if (hps != NULL)
                        m_hypothetical_state_->m_new_hps_queue.push_back(hps);
                }
                m_hypothetical_state_->m_hps_queue.clear();
                std::swap(m_hypothetical_state_->m_hps_queue, m_hypothetical_state_->m_new_hps_queue);
                assert(m_hypothetical_state_->m_new_hps_queue.empty());
                // TODO: Break this large function up into smaller logical units
                return;
            }
        }
    }

    // Compute the minimum of all hps-es' m_realized_lookahead_cursor values, in order
    // to determine which ones have processed the lowest number of lookaheads.  This is
    // done so that one hps doesn't get way ahead of the others.
    std::uint32_t min_realized_lookahead_cursor;
    m_hypothetical_state_->ComputeMinAndMaxRealizedLookaheadCursors(&min_realized_lookahead_cursor, NULL);

    // Process transitions in order of their SortedTypeIndex.  Only process HPSes that are at min_realized_lookahead_cursor.
    assert(m_hypothetical_state_->m_new_hps_queue.empty()); // This is the starting condition
    for (std::uint32_t current_sorted_type_index = 0; current_sorted_type_index <= 3; ++current_sorted_type_index)
    {
        TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_PROCESSING, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1216 "barf_preprocessor_parser.cpp"
 << "    Processing transitions having SortedTypeIndex equal to " << current_sorted_type_index << " and m_realized_lookahead_cursor equal to " << min_realized_lookahead_cursor << ".\n")

        if (!m_hypothetical_state_->m_new_hps_queue.empty())
        {
            TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_PROCESSING, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1224 "barf_preprocessor_parser.cpp"
 << "        Early-out based on sorted type index.\n")
            break;
        }

        // Process non-blocked hps-es.
        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
        {
            // Skip nullified HPS nodes.
            if (*hps_it == NULL)
                continue;

            ParseTreeNode_ &hps = **hps_it;

            assert(hps.m_spec.m_type == ParseTreeNode_::HPS);
            TRISON_CPP_DEBUG_CODE_(
                DSF_TRANSITION_PROCESSING,
                *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1244 "barf_preprocessor_parser.cpp"
 << "        Processing ";
                hps.Print(*DebugSpewStream(), this, DebugSpewPrefix(), 0, true);
            )

            // If a hps is blocked, then save it for the next parse iteration but don't do anything with it.
            if (hps.IsBlockedHPS())
            {
                TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_PROCESSING, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1255 "barf_preprocessor_parser.cpp"
 << "            Hypothetical Parser State is blocked; preserving for next iteration.\n")
                m_hypothetical_state_->m_new_hps_queue.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // If a hps' m_realized_lookahead_cursor is greater than min_realized_lookahead_cursor, then
            // save it for the next parse iteration but don't do anything with it.
            if (hps.m_realized_lookahead_cursor > min_realized_lookahead_cursor)
            {
                TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_PROCESSING, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1269 "barf_preprocessor_parser.cpp"
 << "            Hypothetical Parser State isn't at min_realized_lookahead_cursor (which is " << min_realized_lookahead_cursor << "); preserving for next iteration.\n")
                m_hypothetical_state_->m_new_hps_queue.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // This hps isn't blocked, so indicate that the parse should continue.
            should_return = false;

            std::uint32_t hps_state_index = hps.m_hypothetical_head.StatePtr()->Data();

            // Retrieve all transitions whose SortedTypeIndex is current_sorted_type_index.
            Npda_::TransitionVector_ const &non_epsilon_transitions = Npda_::NonEpsilonTransitionsOfState_(hps_state_index, current_sorted_type_index);
            // Exercise all valid transitions whose SortedTypeIndex is current_sorted_type_index.
            for (Npda_::TransitionVector_::const_iterator transition_it = non_epsilon_transitions.begin(), transition_it_end = non_epsilon_transitions.end(); transition_it != transition_it_end; ++transition_it)
            {
                Npda_::Transition_ const &transition = *transition_it;
                assert(transition.m_type >= Npda_::Transition_::RETURN);
                assert(transition.m_type <= Npda_::Transition_::POP_STACK);
                assert(Npda_::Transition_::Order::SortedTypeIndex(Npda_::Transition_::Type(transition.m_type)) == current_sorted_type_index);

/*
                TRISON_CPP_DEBUG_CODE_(
                    DSF_TRANSITION_PROCESSING,
                    *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1297 "barf_preprocessor_parser.cpp"
 << "            Processing transition " << ParseTreeNode_::AsString(ParseTreeNode_::Type(transition.m_type)) << " with transition token " << Token(transition.m_token_index) << " and data ";
                    if (transition.m_data_index == ParseTreeNode_::UNUSED_DATA)
                        *DebugSpewStream() << "<N/A>";
                    else
                        *DebugSpewStream() << transition.m_data_index;
                    *DebugSpewStream() << " and sorted type index " << Npda_::Transition_::Order::SortedTypeIndex(Npda_::Transition_::Type(transition.m_type)) << '\n';
                )
*/

                ParseTreeNode_ *resulting_hps = NULL;
                // If it's a default transition, there's no need to access the lookahead (except in
                // a certain case).
                if (transition.m_token_index == Nonterminal::none_)
                {
                    // Logic regarding empty reduction rules -- if this transition is REDUCE for an empty reduction rule
                    // and the lookahead is the nonterminal for that REDUCE action, then don't reduce, since that
                    // would produce an infinite loop.  There is a case where it's not necessary to access the lookahead:
                    // if this HPS is the child of a REDUCE action for the same nonterminal, then we know the lookahead
                    // is that nonterminal, so it's not necessary to check the lookahead (we don't want to access the
                    // lookahead unnecessarily).  But it's not an if-and-only-if condition; we could have just REDUCE'd
                    // that nonterminal but the HPS has no parent because the trunk action was executed and then popped,
                    // meaning that the parent of this HPS would be the parse tree root.
                    bool take_action = true;
                    assert(hps.m_parent_node != NULL);
                    if (transition.m_type == Npda_::Transition_::REDUCE)
                    {
                        Grammar_::Rule_ const &rule = Grammar_::ms_rule_table_[transition.m_data_index];
                        bool is_empty_reduction_rule = rule.m_token_count == 0;
                        bool just_reduced_this_nonterminal = hps.m_parent_node->m_spec.m_type == ParseTreeNode_::REDUCE && hps.m_parent_node->m_spec.m_single_data == rule.m_reduction_nonterminal_token_id;
                        // The fancy logical construction here is to avoid accessing the lookahead unless necessary
                        // (and technically this is not optimal, since really when executing the trunk actions,
                        // the information of "parent is REDUCE and the reduction rule nonterminal is this one"
                        // is lost in the current implementation.
                        if (is_empty_reduction_rule &&
                            (just_reduced_this_nonterminal ||
                             rule.m_reduction_nonterminal_token_id == hps.LookaheadTokenId(*this))) // lookahead is this nonterminal
                        {
                            TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_PROCESSING, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1338 "barf_preprocessor_parser.cpp"
 << "            Skipping default action REDUCE on empty reduction rule because the lookahead matches the reduction nonterminal.\n")
                            take_action = false;
                        }
                    }

                    if (take_action)
                    {
                        TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_EXERCISING, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1349 "barf_preprocessor_parser.cpp"
 << "            Exercising transition without accessing lookahead... ")
                        resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseTreeNode_::Type(transition.m_type), transition.m_data_index);
                        TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_EXERCISING, *DebugSpewStream() << '\n')
                    }
                }
                // Otherwise, the lookahead must be accessed.
                else
                {
                    Token::Id lookahead_token_id = hps.LookaheadTokenId(*this);
                    if (transition.m_token_index == lookahead_token_id)
                    {
                        TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_EXERCISING, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1364 "barf_preprocessor_parser.cpp"
 << "            Exercising transition using lookahead " << Token(lookahead_token_id) << " ... ")
                        resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseTreeNode_::Type(transition.m_type), transition.m_data_index);
                        TRISON_CPP_DEBUG_CODE_(DSF_TRANSITION_EXERCISING, *DebugSpewStream() << '\n')
                    }
                }
                if (resulting_hps != NULL)
                    m_hypothetical_state_->m_new_hps_queue.push_back(resulting_hps);
            }
        }
    }

    // Take new hps-es and clear old ones.
    assert(!m_hypothetical_state_->m_new_hps_queue.empty());
    TRISON_CPP_DEBUG_CODE_(DSF_HPS_REMOVE_DEFUNCT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1381 "barf_preprocessor_parser.cpp"
 << "    Removing defunct HPSes...\n")
    for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseTreeNode_ *hps = *hps_it;
        if (hps != NULL)
        {
            TRISON_CPP_DEBUG_CODE_(
                DSF_HPS_REMOVE_DEFUNCT,
                hps->Print(*DebugSpewStream(), this, DebugSpewPrefix(), 2);
            )
            m_hypothetical_state_->DeleteBranch(hps);
        }
    }
    m_hypothetical_state_->m_hps_queue.clear();
    std::swap(m_hypothetical_state_->m_hps_queue, m_hypothetical_state_->m_new_hps_queue);
    assert(m_hypothetical_state_->m_new_hps_queue.empty());
}

Parser::Token::Data Parser::ExecuteReductionRule_ (std::uint32_t const rule_index_, TokenStack_ const &token_stack) throw()
{
    assert(rule_index_ < Grammar_::ms_rule_count_);
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return NULL;

        case 0:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 193 "barf_preprocessor_parser.trison"

        return new Body();
    
#line 1417 "barf_preprocessor_parser.cpp"
            break;
        }

        case 1:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Text * text(Dsc<Text *>(token_stack[token_stack.size()-1].m_data));

#line 198 "barf_preprocessor_parser.trison"

        Body *body = new Body();
        body->Append(text);
        return body;
    
#line 1432 "barf_preprocessor_parser.cpp"
            break;
        }

        case 2:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Body * body(Dsc<Body *>(token_stack[token_stack.size()-2].m_data));
            ExecutableAst * executable(Dsc<ExecutableAst *>(token_stack[token_stack.size()-1].m_data));

#line 205 "barf_preprocessor_parser.trison"

        if (executable != NULL)
            body->Append(executable);
        return body;
    
#line 1448 "barf_preprocessor_parser.cpp"
            break;
        }

        case 3:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Body * body(Dsc<Body *>(token_stack[token_stack.size()-3].m_data));
            ExecutableAst * executable(Dsc<ExecutableAst *>(token_stack[token_stack.size()-2].m_data));
            Text * text(Dsc<Text *>(token_stack[token_stack.size()-1].m_data));

#line 212 "barf_preprocessor_parser.trison"

        if (executable != NULL)
            body->Append(executable);
        body->Append(text);
        return body;
    
#line 1466 "barf_preprocessor_parser.cpp"
            break;
        }

        case 4:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            ExecutableAst * code(Dsc<ExecutableAst *>(token_stack[token_stack.size()-1].m_data));

#line 223 "barf_preprocessor_parser.trison"

        return code;
    
#line 1479 "barf_preprocessor_parser.cpp"
            break;
        }

        case 5:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Conditional * conditional(Dsc<Conditional *>(token_stack[token_stack.size()-1].m_data));

#line 228 "barf_preprocessor_parser.trison"

        return conditional;
    
#line 1492 "barf_preprocessor_parser.cpp"
            break;
        }

        case 6:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Define * define(Dsc<Define *>(token_stack[token_stack.size()-3].m_data));
            Body * body(Dsc<Body *>(token_stack[token_stack.size()-2].m_data));

#line 233 "barf_preprocessor_parser.trison"

        define->SetBody(body);
        return define;
    
#line 1507 "barf_preprocessor_parser.cpp"
            break;
        }

        case 7:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Loop * loop(Dsc<Loop *>(token_stack[token_stack.size()-3].m_data));
            Body * body(Dsc<Body *>(token_stack[token_stack.size()-2].m_data));

#line 239 "barf_preprocessor_parser.trison"

        loop->SetBody(body);
        return loop;
    
#line 1522 "barf_preprocessor_parser.cpp"
            break;
        }

        case 8:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            ForEach * for_each(Dsc<ForEach *>(token_stack[token_stack.size()-3].m_data));
            Body * body(Dsc<Body *>(token_stack[token_stack.size()-2].m_data));

#line 245 "barf_preprocessor_parser.trison"

        for_each->SetBody(body);
        return for_each;
    
#line 1537 "barf_preprocessor_parser.cpp"
            break;
        }

        case 9:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            ExecutableAst * code_body(Dsc<ExecutableAst *>(token_stack[token_stack.size()-2].m_data));

#line 253 "barf_preprocessor_parser.trison"
 return code_body; 
#line 1548 "barf_preprocessor_parser.cpp"
            break;
        }

        case 10:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            ExecutableAst * code_body(Dsc<ExecutableAst *>(token_stack[token_stack.size()-2].m_data));

#line 255 "barf_preprocessor_parser.trison"
 return code_body; 
#line 1559 "barf_preprocessor_parser.cpp"
            break;
        }

        case 11:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 261 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1569 "barf_preprocessor_parser.cpp"
            break;
        }

        case 12:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 264 "barf_preprocessor_parser.trison"
 return expression; 
#line 1580 "barf_preprocessor_parser.cpp"
            break;
        }

        case 13:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 267 "barf_preprocessor_parser.trison"
 return new DumpSymbolTable(); 
#line 1590 "barf_preprocessor_parser.cpp"
            break;
        }

        case 14:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));

#line 270 "barf_preprocessor_parser.trison"
 return new Undefine(id); 
#line 1601 "barf_preprocessor_parser.cpp"
            break;
        }

        case 15:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));

#line 273 "barf_preprocessor_parser.trison"
 return new DeclareArray(id); 
#line 1612 "barf_preprocessor_parser.cpp"
            break;
        }

        case 16:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));

#line 276 "barf_preprocessor_parser.trison"
 return new DeclareMap(id); 
#line 1623 "barf_preprocessor_parser.cpp"
            break;
        }

        case 17:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * include_filename_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 279 "barf_preprocessor_parser.trison"
 return new Include(include_filename_expression, false); 
#line 1634 "barf_preprocessor_parser.cpp"
            break;
        }

        case 18:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * include_filename_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 282 "barf_preprocessor_parser.trison"
 return new Include(include_filename_expression, true); 
#line 1645 "barf_preprocessor_parser.cpp"
            break;
        }

        case 19:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * message_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 285 "barf_preprocessor_parser.trison"
 return new Message(message_expression, Message::WARNING); 
#line 1656 "barf_preprocessor_parser.cpp"
            break;
        }

        case 20:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * message_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 288 "barf_preprocessor_parser.trison"
 return new Message(message_expression, Message::ERROR); 
#line 1667 "barf_preprocessor_parser.cpp"
            break;
        }

        case 21:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * message_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 291 "barf_preprocessor_parser.trison"
 return new Message(message_expression, Message::FATAL_ERROR); 
#line 1678 "barf_preprocessor_parser.cpp"
            break;
        }

        case 22:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Conditional * conditional(Dsc<Conditional *>(token_stack[token_stack.size()-3].m_data));
            Body * if_body(Dsc<Body *>(token_stack[token_stack.size()-2].m_data));
            Body * else_body(Dsc<Body *>(token_stack[token_stack.size()-1].m_data));

#line 297 "barf_preprocessor_parser.trison"

        conditional->SetIfBody(if_body);
        conditional->SetElseBody(else_body);
        return conditional;
    
#line 1695 "barf_preprocessor_parser.cpp"
            break;
        }

        case 23:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 306 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1705 "barf_preprocessor_parser.cpp"
            break;
        }

        case 24:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Body * body(Dsc<Body *>(token_stack[token_stack.size()-2].m_data));

#line 308 "barf_preprocessor_parser.trison"
 return body; 
#line 1716 "barf_preprocessor_parser.cpp"
            break;
        }

        case 25:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Conditional * conditional(Dsc<Conditional *>(token_stack[token_stack.size()-3].m_data));
            Body * if_body(Dsc<Body *>(token_stack[token_stack.size()-2].m_data));
            Body * else_body(Dsc<Body *>(token_stack[token_stack.size()-1].m_data));

#line 311 "barf_preprocessor_parser.trison"

        conditional->SetIfBody(if_body);
        conditional->SetElseBody(else_body);
        Body *body = new Body();
        body->Append(conditional);
        return body;
    
#line 1735 "barf_preprocessor_parser.cpp"
            break;
        }

        case 26:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 323 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 1746 "barf_preprocessor_parser.cpp"
            break;
        }

        case 27:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 326 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 1757 "barf_preprocessor_parser.cpp"
            break;
        }

        case 28:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 331 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1767 "barf_preprocessor_parser.cpp"
            break;
        }

        case 29:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 333 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1777 "barf_preprocessor_parser.cpp"
            break;
        }

        case 30:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 339 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 1788 "barf_preprocessor_parser.cpp"
            break;
        }

        case 31:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 342 "barf_preprocessor_parser.trison"
 return new Conditional(expression); 
#line 1799 "barf_preprocessor_parser.cpp"
            break;
        }

        case 32:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 347 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1809 "barf_preprocessor_parser.cpp"
            break;
        }

        case 33:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 349 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1819 "barf_preprocessor_parser.cpp"
            break;
        }

        case 34:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Define * define(Dsc<Define *>(token_stack[token_stack.size()-1].m_data));

#line 354 "barf_preprocessor_parser.trison"
 return define; 
#line 1830 "barf_preprocessor_parser.cpp"
            break;
        }

        case 35:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Define * define(Dsc<Define *>(token_stack[token_stack.size()-1].m_data));

#line 356 "barf_preprocessor_parser.trison"
 return define; 
#line 1841 "barf_preprocessor_parser.cpp"
            break;
        }

        case 36:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Define * define(Dsc<Define *>(token_stack[token_stack.size()-1].m_data));

#line 358 "barf_preprocessor_parser.trison"
 return define; 
#line 1852 "barf_preprocessor_parser.cpp"
            break;
        }

        case 37:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-3].m_data));

#line 364 "barf_preprocessor_parser.trison"
 return new Define(id); 
#line 1863 "barf_preprocessor_parser.cpp"
            break;
        }

        case 38:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-3].m_data));

#line 367 "barf_preprocessor_parser.trison"
 return new Define(id); 
#line 1874 "barf_preprocessor_parser.cpp"
            break;
        }

        case 39:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));

#line 373 "barf_preprocessor_parser.trison"
 return new DefineArrayElement(id); 
#line 1885 "barf_preprocessor_parser.cpp"
            break;
        }

        case 40:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));

#line 376 "barf_preprocessor_parser.trison"
 return new DefineArrayElement(id); 
#line 1896 "barf_preprocessor_parser.cpp"
            break;
        }

        case 41:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-6].m_data));
            Text * key(Dsc<Text *>(token_stack[token_stack.size()-4].m_data));

#line 382 "barf_preprocessor_parser.trison"
 return new DefineMapElement(id, key); 
#line 1908 "barf_preprocessor_parser.cpp"
            break;
        }

        case 42:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-6].m_data));
            Text * key(Dsc<Text *>(token_stack[token_stack.size()-4].m_data));

#line 385 "barf_preprocessor_parser.trison"
 return new DefineMapElement(id, key); 
#line 1920 "barf_preprocessor_parser.cpp"
            break;
        }

        case 43:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 390 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1930 "barf_preprocessor_parser.cpp"
            break;
        }

        case 44:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 392 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1940 "barf_preprocessor_parser.cpp"
            break;
        }

        case 45:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * iterator_id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));
            Expression * iteration_count_expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 398 "barf_preprocessor_parser.trison"
 return new Loop(iterator_id, iteration_count_expression); 
#line 1952 "barf_preprocessor_parser.cpp"
            break;
        }

        case 46:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * iterator_id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));
            Expression * iteration_count_expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 401 "barf_preprocessor_parser.trison"
 return new Loop(iterator_id, iteration_count_expression); 
#line 1964 "barf_preprocessor_parser.cpp"
            break;
        }

        case 47:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 406 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1974 "barf_preprocessor_parser.cpp"
            break;
        }

        case 48:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 408 "barf_preprocessor_parser.trison"
 return NULL; 
#line 1984 "barf_preprocessor_parser.cpp"
            break;
        }

        case 49:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * key_id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));
            Ast::Id * map_id(Dsc<Ast::Id *>(token_stack[token_stack.size()-3].m_data));

#line 414 "barf_preprocessor_parser.trison"
 return new ForEach(key_id, map_id); 
#line 1996 "barf_preprocessor_parser.cpp"
            break;
        }

        case 50:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * key_id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));
            Ast::Id * map_id(Dsc<Ast::Id *>(token_stack[token_stack.size()-3].m_data));

#line 417 "barf_preprocessor_parser.trison"
 return new ForEach(key_id, map_id); 
#line 2008 "barf_preprocessor_parser.cpp"
            break;
        }

        case 51:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 422 "barf_preprocessor_parser.trison"
 return NULL; 
#line 2018 "barf_preprocessor_parser.cpp"
            break;
        }

        case 52:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 424 "barf_preprocessor_parser.trison"
 return NULL; 
#line 2028 "barf_preprocessor_parser.cpp"
            break;
        }

        case 53:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Text * str(Dsc<Text *>(token_stack[token_stack.size()-1].m_data));

#line 430 "barf_preprocessor_parser.trison"
 return str; 
#line 2039 "barf_preprocessor_parser.cpp"
            break;
        }

        case 54:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Integer * integer(Dsc<Integer *>(token_stack[token_stack.size()-1].m_data));

#line 433 "barf_preprocessor_parser.trison"
 return integer; 
#line 2050 "barf_preprocessor_parser.cpp"
            break;
        }

        case 55:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));

#line 436 "barf_preprocessor_parser.trison"
 return new Sizeof(id); 
#line 2061 "barf_preprocessor_parser.cpp"
            break;
        }

        case 56:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 439 "barf_preprocessor_parser.trison"
 return new Operation(Operation::INT_CAST, expression); 
#line 2072 "barf_preprocessor_parser.cpp"
            break;
        }

        case 57:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 442 "barf_preprocessor_parser.trison"
 return new Operation(Operation::STRING_CAST, expression); 
#line 2083 "barf_preprocessor_parser.cpp"
            break;
        }

        case 58:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 445 "barf_preprocessor_parser.trison"
 return new Operation(Operation::STRING_LENGTH, expression); 
#line 2094 "barf_preprocessor_parser.cpp"
            break;
        }

        case 59:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * character_index_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 448 "barf_preprocessor_parser.trison"
 return new Operation(Operation::TO_CHARACTER_LITERAL, character_index_expression); 
#line 2105 "barf_preprocessor_parser.cpp"
            break;
        }

        case 60:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * string_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 451 "barf_preprocessor_parser.trison"
 return new Operation(Operation::TO_STRING_LITERAL, string_expression); 
#line 2116 "barf_preprocessor_parser.cpp"
            break;
        }

        case 61:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));

#line 454 "barf_preprocessor_parser.trison"
 return new IsDefined(id, NULL); 
#line 2127 "barf_preprocessor_parser.cpp"
            break;
        }

        case 62:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));
            Expression * element_index_expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 457 "barf_preprocessor_parser.trison"
 return new IsDefined(id, element_index_expression); 
#line 2139 "barf_preprocessor_parser.cpp"
            break;
        }

        case 63:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-1].m_data));

#line 460 "barf_preprocessor_parser.trison"
 return new Dereference(id, NULL, DEREFERENCE_ALWAYS); 
#line 2150 "barf_preprocessor_parser.cpp"
            break;
        }

        case 64:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-4].m_data));
            Expression * element_index_expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 463 "barf_preprocessor_parser.trison"
 return new Dereference(id, element_index_expression, DEREFERENCE_ALWAYS); 
#line 2162 "barf_preprocessor_parser.cpp"
            break;
        }

        case 65:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));

#line 466 "barf_preprocessor_parser.trison"
 return new Dereference(id, NULL, DEREFERENCE_IFF_DEFINED); 
#line 2173 "barf_preprocessor_parser.cpp"
            break;
        }

        case 66:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-5].m_data));
            Expression * element_index_expression(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));

#line 469 "barf_preprocessor_parser.trison"
 return new Dereference(id, element_index_expression, DEREFERENCE_IFF_DEFINED); 
#line 2185 "barf_preprocessor_parser.cpp"
            break;
        }

        case 67:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 472 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::CONCATENATE, right); 
#line 2197 "barf_preprocessor_parser.cpp"
            break;
        }

        case 68:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-4].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 475 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LOGICAL_OR, right); 
#line 2209 "barf_preprocessor_parser.cpp"
            break;
        }

        case 69:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-4].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 478 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LOGICAL_AND, right); 
#line 2221 "barf_preprocessor_parser.cpp"
            break;
        }

        case 70:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-4].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 481 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::EQUAL, right); 
#line 2233 "barf_preprocessor_parser.cpp"
            break;
        }

        case 71:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-4].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 484 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::NOT_EQUAL, right); 
#line 2245 "barf_preprocessor_parser.cpp"
            break;
        }

        case 72:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 487 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LESS_THAN, right); 
#line 2257 "barf_preprocessor_parser.cpp"
            break;
        }

        case 73:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-4].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 490 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::LESS_THAN_OR_EQUAL, right); 
#line 2269 "barf_preprocessor_parser.cpp"
            break;
        }

        case 74:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 493 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::GREATER_THAN, right); 
#line 2281 "barf_preprocessor_parser.cpp"
            break;
        }

        case 75:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-4].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 496 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::GREATER_THAN_OR_EQUAL, right); 
#line 2293 "barf_preprocessor_parser.cpp"
            break;
        }

        case 76:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 499 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::PLUS, right); 
#line 2305 "barf_preprocessor_parser.cpp"
            break;
        }

        case 77:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 502 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::MINUS, right); 
#line 2317 "barf_preprocessor_parser.cpp"
            break;
        }

        case 78:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 505 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::MULTIPLY, right); 
#line 2329 "barf_preprocessor_parser.cpp"
            break;
        }

        case 79:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 508 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::DIVIDE, right); 
#line 2341 "barf_preprocessor_parser.cpp"
            break;
        }

        case 80:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * left(Dsc<Expression *>(token_stack[token_stack.size()-3].m_data));
            Expression * right(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 511 "barf_preprocessor_parser.trison"
 return new Operation(left, Operation::REMAINDER, right); 
#line 2353 "barf_preprocessor_parser.cpp"
            break;
        }

        case 81:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 514 "barf_preprocessor_parser.trison"
 return new Operation(Operation::NEGATIVE, expression); 
#line 2364 "barf_preprocessor_parser.cpp"
            break;
        }

        case 82:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-1].m_data));

#line 517 "barf_preprocessor_parser.trison"
 return new Operation(Operation::LOGICAL_NOT, expression); 
#line 2375 "barf_preprocessor_parser.cpp"
            break;
        }

        case 83:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Expression * expression(Dsc<Expression *>(token_stack[token_stack.size()-2].m_data));

#line 520 "barf_preprocessor_parser.trison"
 return expression; 
#line 2386 "barf_preprocessor_parser.cpp"
            break;
        }

    }

    TRISON_CPP_DEBUG_CODE_(DSF_PROGRAMMER_ERROR, *DebugSpewStream() << "PROGRAMMER ERROR: No value returned from reduction rule code block; rule " << rule_index_ << ": " << Grammar_::ms_rule_table_[rule_index_].m_description << '\n')
    assert(false && "no value returned from reduction rule code block");
    return NULL;
}

void Parser::PrintParserStatus_ (std::ostream &out) const
{
    assert(m_hypothetical_state_->m_root != NULL);

    // TODO: Print full stack (this is quite a lot)
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2405 "barf_preprocessor_parser.cpp"
 << "Realized state branch node stacks are (each listed bottom to top):\n";
    for (BranchVector_::const_iterator it = m_realized_state_->BranchVectorStack().back().begin(),
                                       it_end = m_realized_state_->BranchVectorStack().back().end();
         it != it_end;
         ++it)
    {
        Branch_ const &branch = *it;
        out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2416 "barf_preprocessor_parser.cpp"
 << "    (";
        branch.StatePtr()->PrintRootToLeaf(out, IdentityTransform_<Npda_::StateIndex_>);
        out << ")\n";
    }

    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2425 "barf_preprocessor_parser.cpp"
 << "Max realized lookahead count (so far) is:\n";
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2430 "barf_preprocessor_parser.cpp"
 << "    " << m_realized_state_->MaxRealizedLookaheadCount();
    if (m_max_allowable_lookahead_count >= 0)
        out << " (max allowable lookahead count is " << m_max_allowable_lookahead_count << ")\n";
    else
        out << " (allowable lookahead count is unlimited)\n";
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2439 "barf_preprocessor_parser.cpp"
 << "Max realized parse tree depth (so far) is:\n";
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2444 "barf_preprocessor_parser.cpp"
 << "    " << m_hypothetical_state_->MaxRealizedParseTreeDepth();
    if (m_max_allowable_parse_tree_depth >= 0)
        out << " (max allowable parse tree depth is " << m_max_allowable_parse_tree_depth << ")\n";
    else
        out << " (allowable parse tree depth is unlimited)\n";
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2453 "barf_preprocessor_parser.cpp"
 << "Has-encountered-error-state (so far) is:\n";
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2458 "barf_preprocessor_parser.cpp"
 << "    " << (m_realized_state_->HasEncounteredErrorState() ? "true" : "false") << '\n';
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2463 "barf_preprocessor_parser.cpp"
 << "Realized stack tokens then . delimiter then realized lookahead queue is:\n";
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2468 "barf_preprocessor_parser.cpp"
 << "    ";
    for (TokenStack_::const_iterator it = m_realized_state_->TokenStack().begin(),
                                     it_end = m_realized_state_->TokenStack().end();
         it != it_end;
         ++it)
    {
        Token const &token = *it;
        out << token << ' ';
    }
    out << ". ";
    for (TokenQueue_::const_iterator it = m_realized_state_->LookaheadQueue().begin(),
                                     it_end = m_realized_state_->LookaheadQueue().end();
         it != it_end;
         ++it)
    {
        Token const &token = *it;
        out << token << ' ';
    }
    out << '\n';
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2491 "barf_preprocessor_parser.cpp"
 << '\n';

    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2497 "barf_preprocessor_parser.cpp"
 << "Parse tree (hypothetical parser states); Notation legend: <real-stack> <hyp-stack> . <hyp-lookaheads> , <real-lookaheads>\n";
    m_hypothetical_state_->m_root->Print(out, this, DebugSpewPrefix());
    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2503 "barf_preprocessor_parser.cpp"
 << '\n';

    out << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2509 "barf_preprocessor_parser.cpp"
 << "HPS queue:\n";
    for (HPSQueue_::const_iterator it = m_hypothetical_state_->m_hps_queue.begin(), it_end = m_hypothetical_state_->m_hps_queue.end(); it != it_end; ++it)
    {
        ParseTreeNode_ *hps = *it;
        assert(hps != NULL);
        hps->Print(out, this, DebugSpewPrefix(), 1);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::RealizedState_
// ////////////////////////////////////////////////////////////////////////////

Parser::RealizedState_::RealizedState_ (Npda_::StateIndex_ initial_state)
    :   m_max_realized_lookahead_count(0)
    ,   m_has_encountered_error_state(false)
{
    Initialize(initial_state);
}

void Parser::RealizedState_::PushBackLookahead (Token const &lookahead, HPSQueue_ const &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out.

    m_lookahead_queue.push_back(lookahead);
    UpdateMaxRealizedLookaheadCount();
}

Parser::Token Parser::RealizedState_::PopStack ()
{
    assert(!m_token_stack.empty());

    Token popped_token(m_token_stack.back());
    m_token_stack.pop_back();

    assert(!m_branch_vector_stack.empty());
    m_branch_vector_stack.pop_back();

    assert(m_branch_vector_stack.size() == m_token_stack.size());

    return popped_token;
}

Parser::Token Parser::RealizedState_::PopFrontLookahead (HPSQueue_ &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out.

    assert(!m_lookahead_queue.empty());
    // Because the contents of m_lookahead_queue are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseTreeNode_ &hps = **hps_it;
        --hps.m_realized_lookahead_cursor;
    }
    Token retval(m_lookahead_queue.back());
    m_lookahead_queue.pop_front();
    return retval;
}

void Parser::RealizedState_::StealTokenStackTop (Ast::Base * *&return_token)
{
    assert(return_token != NULL);
    assert(!m_token_stack.empty());
    *return_token = m_token_stack.back().m_data;
    // Assign the token default so that the actual return token isn't destroyed when the parser is destroyed.
    m_token_stack.back().m_data = NULL;
}

// void Parser::RealizedState_::ExecuteAction (Npda_::Transition_::Type action, ActionData_ action_data)
// {
// }

void Parser::RealizedState_::ExecuteActionReduce (Grammar_::Rule_ const &rule, Token::Data const &reduced_nonterminal_token_data, HPSQueue_ &hps_queue)
{
    for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
        PopStack();
    // Push the reduced nonterminal token data onto the front of the lookahead queue
    PushFrontLookahead(Token(rule.m_reduction_nonterminal_token_id, reduced_nonterminal_token_data), hps_queue);
}

void Parser::RealizedState_::ExecuteActionShift (BranchVector_ const &shifted_branch_vector, HPSQueue_ &hps_queue)
{
    // Ensure that each of the branch nodes in the shifted vector are actually children of
    // the current set of branch nodes.
    assert(!m_branch_vector_stack.empty());
    // Ensure that the stack is actually consistent with regard to the parent/child relationships.
    for (BranchVector_::const_iterator it = shifted_branch_vector.begin(), it_end = shifted_branch_vector.end(); it != it_end; ++it)
    {
        // Note that m_branch_vector_stack.back() is the top of the branch vector stack.
        assert(std::any_of(m_branch_vector_stack.back().begin(), m_branch_vector_stack.back().end(), [it](Branch_ const &stack_top_branch){ return stack_top_branch == it->Parent(); }));
    }
    // Ensure that there's actually a lookahead.
    assert(!m_lookahead_queue.empty());

    // Push onto the branch node stack.
    m_branch_vector_stack.push_back(shifted_branch_vector);
    // Push the token onto the stack.
    m_token_stack.push_back(m_lookahead_queue.front());
    // Pop the shifted lookahead from the queue
    PopFrontLookahead(hps_queue);
}

void Parser::RealizedState_::ExecuteActionInsertLookaheadError (HPSQueue_ &hps_queue)
{
    PushFrontLookahead(Token(Terminal::ERROR_), hps_queue);
    SetHasEncounteredErrorState();
}

void Parser::RealizedState_::ExecuteActionDiscardLookahead (HPSQueue_ &hps_queue)
{
    assert(!m_lookahead_queue.empty());
    PopFrontLookahead(hps_queue);
}

void Parser::RealizedState_::PrintStackAndLookaheads (std::ostream &out) const
{
    for (TokenStack_::const_iterator it = TokenStack().begin(), it_end = TokenStack().end(); it != it_end; ++it)
    {
        Token const &token = *it;
        out << token << ' ';
    }
    out << '.';
    for (TokenQueue_::const_iterator it = LookaheadQueue().begin(), it_end = LookaheadQueue().end(); it != it_end; ++it)
    {
        Token const &token = *it;
        out << ' ' << token;
    }
}

void Parser::RealizedState_::ClearStack ()
{
    m_branch_vector_stack.clear();
    m_token_stack.clear();
}

void Parser::RealizedState_::Reinitialize (Npda_::StateIndex_ initial_state)
{
    // Clear the stack(s) and reset the error state.
    ClearStack();
    m_has_encountered_error_state = false;
    // But preserve m_lookahead_queue and m_max_realized_lookahead_count.

    Initialize(initial_state);
}

void Parser::RealizedState_::Initialize (Npda_::StateIndex_ initial_state)
{
    assert(m_branch_vector_stack.empty());
    assert(m_token_stack.empty());

    BranchVector_ initial_branch_vector;
    // The Nonterminal::none_ is just a dummy Token::Id to go along with initial_state.
    initial_branch_vector.emplace_back(Branch_(BranchState_::CreateOrphan(initial_state), BranchTokenId_::CreateOrphan(Nonterminal::none_)));
    // TODO: This probably should be emplace_back
    m_branch_vector_stack.push_back(initial_branch_vector);

    // Put a dummy token in to correspond with the start state.
    m_token_stack.push_back(Token(Nonterminal::none_));
}

void Parser::RealizedState_::PushFrontLookahead (Token const &lookahead, HPSQueue_ &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out.

    m_lookahead_queue.push_front(lookahead);
    // Because the contents of m_lookahead_queue_ are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseTreeNode_ &hps = **hps_it;
        ++hps.m_realized_lookahead_cursor;
    }
    UpdateMaxRealizedLookaheadCount();
}

void Parser::RealizedState_::UpdateMaxRealizedLookaheadCount ()
{
    // Subtract the number of parser-generated tokens from the length of m_lookahead_queue.
    std::size_t parser_generated_token_count = 0;
    for ( ; parser_generated_token_count < m_lookahead_queue.size(); ++parser_generated_token_count)
    {
        Token const &lookahead = m_lookahead_queue[parser_generated_token_count];
        if (IsScannerGeneratedTokenId(lookahead.m_id))
            break;
    }
    m_max_realized_lookahead_count = std::max(m_max_realized_lookahead_count, m_lookahead_queue.size() - parser_generated_token_count);
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::HypotheticalState_
// ////////////////////////////////////////////////////////////////////////////

Parser::HypotheticalState_::HypotheticalState_ (std::uint32_t initial_state)
{
    m_root = new ParseTreeNode_(ParseTreeNode_::Spec(ParseTreeNode_::ROOT));

    ParseTreeNode_ *hps             = new ParseTreeNode_(ParseTreeNode_::Spec(ParseTreeNode_::HPS));
    hps->m_hypothetical_head        = Branch_(BranchState_::CreateOrphan(initial_state), BranchTokenId_::CreateOrphan(Nonterminal::none_));

    m_root->AddChild(hps);
    m_hps_queue.push_back(hps);
    m_max_realized_parse_tree_depth = 0;
}

Parser::HypotheticalState_::~HypotheticalState_ ()
{
    m_hps_queue.clear();
    m_new_hps_queue.clear();

    delete m_root;
    m_root = NULL;
}

bool Parser::HypotheticalState_::MinAndMaxRealizedLookaheadCursorsAreEqual () const
{
    std::uint32_t min;
    std::uint32_t max;
    ComputeMinAndMaxRealizedLookaheadCursors(&min, &max);
    return min == max;
}

bool Parser::HypotheticalState_::HasExceededMaxAllowableParseTreeDepth (std::int64_t max_allowable_parse_tree_depth) const
{
    // If the limit is negative, then excess is not possible.
    return max_allowable_parse_tree_depth >= 0 && std::int64_t(ParseTreeDepth()) > max_allowable_parse_tree_depth;
}

void Parser::HypotheticalState_::DeleteBranch (ParseTreeNode_ *branch_node)
{
    assert(!branch_node->IsRoot());

    // Find the most root-ward ancestor that is an only child that isn't the root node.
    ParseTreeNode_ *branch_root = branch_node->BranchRoot();
    assert(branch_root != NULL);
    assert(!branch_root->IsRoot());
    assert(branch_root->HasParent());

    branch_root->RemoveFromParent();
    branch_node->NullifyHPSNodeDescendantsInHPSQueue(m_hps_queue);
    delete branch_root;
}

void Parser::HypotheticalState_::DestroyParseTree ()
{
    assert(m_new_hps_queue.empty());
    // Clear all HPSes, which represent the leaf nodes of the parse tree.
    m_hps_queue.clear();
    // Delete the parse tree root, which deletes all nodes.
    delete m_root;
    // At this point, the parse tree has been destroyed.  Create a new root node.
    m_root = new ParseTreeNode_(ParseTreeNode_::Spec(ParseTreeNode_::ROOT));
}

void Parser::HypotheticalState_::ComputeMinAndMaxRealizedLookaheadCursors (std::uint32_t *min, std::uint32_t *max) const
{
    if (min != NULL)
        *min = std::numeric_limits<std::uint32_t>::max();
    if (max != NULL)
        *max = std::numeric_limits<std::uint32_t>::min();

    for (HPSQueue_::const_iterator hps_it = m_hps_queue.begin(), hps_it_end = m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        // Skip nullified HPS nodes.
        if (*hps_it == NULL)
            continue;

        ParseTreeNode_ const &hps = **hps_it;
        if (min != NULL && hps.m_realized_lookahead_cursor < *min)
            *min = hps.m_realized_lookahead_cursor;
        if (max != NULL && hps.m_realized_lookahead_cursor > *max)
            *max = hps.m_realized_lookahead_cursor;
    }
}

std::uint32_t Parser::HypotheticalState_::ParseTreeDepth () const
{
    std::uint32_t parse_tree_depth = 0;

    for (HPSQueue_::const_iterator hps_it = m_hps_queue.begin(), hps_it_end = m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        // Skip nullified HPS nodes.
        if (*hps_it == NULL)
            continue;

        ParseTreeNode_ const &hps = **hps_it;
        std::uint32_t branch_depth = hps.m_depth - m_root->m_depth;
        if (branch_depth > parse_tree_depth)
            parse_tree_depth = branch_depth;
    }

    // Update m_max_realized_parse_tree_depth
    if (parse_tree_depth > m_max_realized_parse_tree_depth)
        m_max_realized_parse_tree_depth = parse_tree_depth;

    return parse_tree_depth;
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::ParseTreeNode_
// ////////////////////////////////////////////////////////////////////////////

char const *Parser::ParseTreeNode_::AsString (Type type)
{
    static char const *const LOOKUP_TABLE[COUNT_] =
    {
        "ROOT",
        "RETURN",
        "REDUCE",
        "SHIFT",
        "INSERT_LOOKAHEAD_ERROR",
        "DISCARD_LOOKAHEAD",
        "POP_STACK",
        "HPS"
    };
    assert(std::uint32_t(type) < COUNT_);
    return LOOKUP_TABLE[std::uint32_t(type)];
}

bool Parser::ParseTreeNode_::ParseTreeNodeOrder::operator () (Parser::ParseTreeNode_ const *lhs, Parser::ParseTreeNode_ const *rhs) const
{
    assert(lhs != NULL);
    assert(rhs != NULL);
    assert(lhs->m_spec.m_type == rhs->m_spec.m_type); // ParseTreeNodeSet should contain only nodes of the same type.
    // for HPS, their contents must be compared.
    if (lhs->m_spec.m_type == HPS)
    {
        assert(lhs->m_child_nodes.empty());
        assert(rhs->m_child_nodes.empty());
        // hps-es are equal if their m_realized_lookahead_cursor and m_hypothetical_lookahead_token_id_queue members are.
        if (lhs->m_realized_lookahead_cursor != rhs->m_realized_lookahead_cursor)
            return lhs->m_realized_lookahead_cursor < rhs->m_realized_lookahead_cursor;
        else if (lhs->m_hypothetical_head.StatePtr() != rhs->m_hypothetical_head.StatePtr())
            return lhs->m_hypothetical_head.StatePtr() < rhs->m_hypothetical_head.StatePtr();
        else
            return std::lexicographical_compare(
                lhs->m_hypothetical_lookahead_token_id_queue.begin(), lhs->m_hypothetical_lookahead_token_id_queue.end(),
                rhs->m_hypothetical_lookahead_token_id_queue.begin(), rhs->m_hypothetical_lookahead_token_id_queue.end(),
                CompareTokenId_
            );
    }
    // For REDUCE, their contents must be compared.
    else if (lhs->m_spec.m_type == REDUCE)
    {
        // m_single_data contains the reduction rule index.
        Grammar_::Rule_ const &lhs_rule = Grammar_::ms_rule_table_[lhs->m_spec.m_single_data];
        Grammar_::Rule_ const &rhs_rule = Grammar_::ms_rule_table_[rhs->m_spec.m_single_data];
        // Sort first by rule precedence, then by rule index (lower has higher priority).
        if (Grammar_::ms_precedence_table_[lhs_rule.m_precedence_index].m_level != Grammar_::ms_precedence_table_[rhs_rule.m_precedence_index].m_level)
            return Grammar_::ms_precedence_table_[lhs_rule.m_precedence_index].m_level > Grammar_::ms_precedence_table_[rhs_rule.m_precedence_index].m_level;
        else // Sort based on rule index.
            return lhs->m_spec.m_single_data < rhs->m_spec.m_single_data;
    }
    // Otherwise just use pointer value.
    else
        return lhs < rhs;
}

Parser::ParseTreeNode_::~ParseTreeNode_ ()
{
    // TODO: figure out if stack element tokens should be thrown away
    // TODO: figure out if local lookahead queue tokens should be thrown away
    // TODO: are they actually uninitialized (default value)?
    for (ChildMap::iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseTreeNodeSet &child_node_set = it->second;
        for (ParseTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseTreeNode_ *child = *child_it;
            assert(child != NULL);
            assert(child->m_parent_node == this);
            delete child;
        }
        child_node_set.clear(); // not strictly necessary, but is cleaner.
    }
}

bool Parser::ParseTreeNode_::HasTrunkChild () const
{
    if (m_spec.m_type != ROOT || m_child_nodes.size() != 1)
        return false;
    ParseTreeNodeSet const &single_type_child_node_set = m_child_nodes.begin()->second;
    if (single_type_child_node_set.size() != 1)
        return false;
    ParseTreeNode_ *single_child = *single_type_child_node_set.begin();
    assert(single_child != NULL);
    assert(single_child->m_spec.m_type != ROOT);
    return single_child->m_spec.m_type != HPS;
}

Parser::ParseTreeNode_ *Parser::ParseTreeNode_::PopTrunkChild ()
{
    assert(HasTrunkChild());
    ParseTreeNode_ *trunk_child = *m_child_nodes.begin()->second.begin();
    assert(trunk_child != NULL);
    assert(trunk_child->m_parent_node == this);
    // Reassign the children of the trunk child to this node (root).
    m_child_nodes = trunk_child->m_child_nodes;
    trunk_child->m_child_nodes.clear();
    // Set the reassigned child nodes' parent to be this node (root).
    for (ChildMap::iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseTreeNodeSet &child_node_set = child_map_it->second;
        for (ParseTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseTreeNode_ *child = *child_it;
            assert(child != NULL);
            child->m_parent_node = this;
        }
    }
    trunk_child->m_parent_node = NULL;
    return trunk_child;
}

bool Parser::ParseTreeNode_::HasExactlyOneChild () const
{
    return m_child_nodes.size() == 1 && m_child_nodes.begin()->second.size() == 1;
}

Parser::ParseTreeNode_ *Parser::ParseTreeNode_::BranchRoot ()
{
    assert(!IsRoot());
    assert(HasParent());
    ParseTreeNode_ *node = this;
    while (node->HasParent() && !node->m_parent_node->IsRoot() && node->m_parent_node->HasExactlyOneChild())
    {
        node = node->m_parent_node;
        assert(node->m_spec.m_type != HPS);
    }
    return node;
}

Parser::Token::Id Parser::ParseTreeNode_::LookaheadTokenId (Parser &parser) const
{
    if (m_hypothetical_lookahead_token_id_queue.empty())
        return parser.Lookahead_(m_realized_lookahead_cursor).m_id;
    else
        return m_hypothetical_lookahead_token_id_queue.front();
}

bool Parser::ParseTreeNode_::IsBlockedHPS () const
{
    assert(m_spec.m_type == HPS);
    if (m_parent_node == NULL)
        return false;
    switch (m_parent_node->m_spec.m_type)
    {
        // Nothing can happen after returning, so this has to be blocking.
        case RETURN:
        case POP_STACK: return true;

        default:        return false;
    }
}

Parser::ParseTreeNode_::PrecedenceLevelRange Parser::ParseTreeNode_::ComputePrecedenceLevelRange (std::uint32_t current_child_depth) const
{
    if (m_spec.m_type == HPS)
    {
        // Need to look back at the rule of the (current_child_depth-1)th ancestor of this node in order
        // to get the correct rule precedence, because that's where the conflict occurred.

        assert(current_child_depth >= 2);
        // These asserts are equivalent to checking that the stack depth is at least 2.
        assert(bool(m_hypothetical_head.StatePtr()));
        assert(bool(m_hypothetical_head.StatePtr()->HasParent()));

        // Thinking of m_hypothetical_head.StatePtr() as the top of the state stack, we want to get the
        // (current_child_depth-1)th element from the top.
        BranchStatePtr_ child_branch_node_ptr = m_hypothetical_head.StatePtr();
        for (std::uint32_t i = 0; i < current_child_depth-2; ++i)
        {
            // This assert checks that the stack depth is sufficient.
            assert(child_branch_node_ptr->HasParent());
            child_branch_node_ptr = child_branch_node_ptr->Parent();
        }
        std::uint32_t state_index = child_branch_node_ptr->Data();

        assert(state_index < Npda_::ms_state_count_);
        Npda_::State_ const &state = Npda_::ms_state_table_[state_index];
        // If there's an associated rule, then use the precedence from that.
        if (state.m_associated_rule_index < Grammar_::ms_rule_count_)
        {
            Grammar_::Rule_ const &associated_rule = Grammar_::ms_rule_table_[state.m_associated_rule_index];
            assert(associated_rule.m_precedence_index < Grammar_::ms_precedence_count_);
            Grammar_::Precedence_ const &rule_precedence = Grammar_::ms_precedence_table_[associated_rule.m_precedence_index];
            return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
        }
        // Otherwise (e.g. a RETURN state), return default precedence.
        else
        {
            Grammar_::Precedence_ const &default_precedence = Grammar_::ms_precedence_table_[0]; // 0 is default precedence.
            return PrecedenceLevelRange(default_precedence.m_level, default_precedence.m_level);
        }
    }
    else if (m_spec.m_type == REDUCE)
    {
        std::uint32_t reduction_rule_index = m_spec.m_single_data;
        Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduction_rule_index];
        assert(reduction_rule.m_precedence_index < Grammar_::ms_precedence_count_);
        Grammar_::Precedence_ const &rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == SHIFT)
    {
        PrecedenceLevelRange retval(std::numeric_limits<std::int32_t>::max(), std::numeric_limits<std::int32_t>::min());
        assert(!m_child_nodes.empty());
        // The range is the smallest range encompassing the range of each child node.
        for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
        {
            ParseTreeNodeSet const &child_node_set = child_map_it->second;
            for (ParseTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
            {
                assert(*child_it != NULL);
                ParseTreeNode_ const &child = **child_it;
                PrecedenceLevelRange child_precedence_level_range(child.ComputePrecedenceLevelRange(current_child_depth+1));
                retval.first = std::min(retval.first, child_precedence_level_range.first);
                retval.second = std::max(retval.second, child_precedence_level_range.second);
            }
        }
        assert(retval.first <= retval.second);
        return retval;
    }
    else
    {
        // TODO: Probably need to do something to determine if this can't happen or prevent it.
        assert(false);
        return PrecedenceLevelRange(0, 0);
    }
}

bool Parser::ParseTreeNode_::HasShiftReduceConflict (ParseTreeNode_ *&shift, ParseTreeNode_ *&reduce)
{
    ChildMap::iterator shift_children_it = m_child_nodes.find(Spec(SHIFT));
    ChildMap::iterator reduce_children_it = m_child_nodes.find(Spec(REDUCE));
    if (shift_children_it == m_child_nodes.end() || reduce_children_it == m_child_nodes.end())
        return false;

    ParseTreeNodeSet &shift_children = shift_children_it->second;
    ParseTreeNodeSet &reduce_children = reduce_children_it->second;
    assert(shift_children.size() == 1);
    assert(reduce_children.size() == 1);

    shift = *shift_children.begin();
    reduce = *reduce_children.begin();
    return true;
}

void Parser::ParseTreeNode_::AddChild (ParseTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == NULL);
    assert(child->m_spec.m_type != ROOT);

    m_child_nodes[child->m_spec].insert(child);
    child->m_parent_node = this;
    child->m_depth = m_depth + 1; // Always +1 relative to parent.

    // If this node is SHIFT and the child is HPS, then add the child's NPDA state to this node's
    // m_child_branch_vector.  This is the only situation in which m_child_branch_vector is added to.
    if (m_spec.m_type == SHIFT && child->m_spec.m_type == HPS)
    {
        assert(bool(child->m_hypothetical_head.StatePtr()));
        assert(std::none_of(m_child_branch_vector.begin(), m_child_branch_vector.end(), [child](Branch_ const &node_state){ return node_state.StatePtr() == child->m_hypothetical_head.StatePtr(); }) && "child branch node should not already be in the set");
        m_child_branch_vector.push_back(child->m_hypothetical_head);
    }
}

void Parser::ParseTreeNode_::RemoveChild (ParseTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == this);
    assert(HasChildrenHavingSpec(child->m_spec));
    assert(m_child_nodes[child->m_spec].find(child) != m_child_nodes[child->m_spec].end());
    m_child_nodes[child->m_spec].erase(child);
    if (m_child_nodes[child->m_spec].empty())
        m_child_nodes.erase(child->m_spec);
    child->m_parent_node = NULL;
    child->m_depth = 0; // Reset.

    // If there are no children and this isn't the root node, remove it from its parent.
    if (m_child_nodes.empty() && m_parent_node != NULL)
        RemoveFromParent();
}

void Parser::ParseTreeNode_::RemoveFromParent ()
{
    assert(m_parent_node != NULL);
    m_parent_node->RemoveChild(this);
}

void Parser::ParseTreeNode_::NullifyHPSNodeDescendantsInHPSQueue (HPSQueue_ &hps_queue) const
{
    if (m_spec.m_type == HPS)
    {
        // NOTE: This is a linear search, which is not as efficient as a different way of handling this.
        HPSQueue_::iterator it = std::find(hps_queue.begin(), hps_queue.end(), this);
        if (it != hps_queue.end())
            *it = NULL;
    }
    for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseTreeNodeSet const &child_node_set = child_map_it->second;
        for (ParseTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            assert(*child_it != NULL);
            ParseTreeNode_ const &child = **child_it;
            child.NullifyHPSNodeDescendantsInHPSQueue(hps_queue);
        }
    }
}

Parser::ParseTreeNode_ *Parser::ParseTreeNode_::CloneLeafNode () const
{
    ParseTreeNode_ *retval = new ParseTreeNode_(m_spec);
    CloneLeafNodeInto(*retval);
    return retval;
}

void Parser::ParseTreeNode_::CloneLeafNodeInto (Parser::ParseTreeNode_ &orphan_target) const
{
    assert(orphan_target.m_parent_node == NULL);
    assert(m_child_nodes.empty());
    orphan_target.m_spec                                    = m_spec;
    orphan_target.m_hypothetical_head                       = m_hypothetical_head;
    orphan_target.m_hypothetical_lookahead_token_id_queue   = m_hypothetical_lookahead_token_id_queue;
    orphan_target.m_realized_lookahead_cursor               = m_realized_lookahead_cursor;
}

void Parser::ParseTreeNode_::Print (std::ostream &out, Parser const *parser, std::string const &prefix, std::uint32_t indent_level, bool suppress_initial_prefix) const
{
    if (!suppress_initial_prefix)
    {
        out << prefix;
        for (std::uint32_t i = 0; i < indent_level; ++i)
            out << "    ";
    }
    out << AsString(m_spec.m_type) << ' ' << this << " (depth = " << m_depth << ')';
    if (m_spec.m_type == HPS)
    {
        out << (IsBlockedHPS() ? " (    blocked," : " (non-blocked,");
        out << " m_realized_lookahead_cursor = " << m_realized_lookahead_cursor << ')';
    }
    switch (m_spec.m_type)
    {
        case REDUCE:    out << " rule " << m_spec.m_single_data << "; " << Grammar_::ms_rule_table_[m_spec.m_single_data].m_description;  break;
        //case SHIFT:     out << " to (?) state " << m_spec.m_single_data << "; " << Npda_::ms_state_table_[m_spec.m_single_data].m_description; break;
        case SHIFT:     out << ' ' << Token(m_spec.m_single_data); break;
        case POP_STACK: out << ' ' << m_spec.m_single_data << " time(s)";                                                       break;
        default:                                                                                                                break;
    }
    if (bool(m_hypothetical_head.StatePtr()))
        out << ' ' << Npda_::ms_state_table_[m_hypothetical_head.StatePtr()->Data()].m_description << ' ';
    if (m_spec.m_type == HPS)
    {
        assert(bool(m_hypothetical_head.StatePtr()));
        assert(bool(m_hypothetical_head.TokenIdPtr()));

        out << "    (";
        m_hypothetical_head.StatePtr()->PrintRootToLeaf(out, IdentityTransform_<Npda_::StateIndex_>);
        out << "); ";

        m_hypothetical_head.TokenIdPtr()->PrintRootToLeaf(out, TokenName_);
        out << " . ";
        for (std::size_t i = 0; i < m_hypothetical_lookahead_token_id_queue.size(); ++i)
            out << ms_token_name_table_[m_hypothetical_lookahead_token_id_queue[i]] << ' ';
        out << ", ";
        if (parser != NULL)
            for (std::size_t i = m_realized_lookahead_cursor; i < parser->m_realized_state_->LookaheadQueue().size(); ++i)
                out << ms_token_name_table_[parser->m_realized_state_->LookaheadQueue()[i].m_id] << ' ';
        else
            out << "<realized-lookaheads-not-printed>";
    }
    out << '\n';

    // Print children recursively with higher indent level
    for (ChildMap::const_iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseTreeNodeSet const &child_node_set = it->second;
        for (ParseTreeNodeSet::const_iterator set_it = child_node_set.begin(), set_it_end = child_node_set.end(); set_it != set_it_end; ++set_it)
            (*set_it)->Print(out, parser, prefix, indent_level+1);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// End of Parser::ParseTreeNode_
// ////////////////////////////////////////////////////////////////////////////

Parser::Token const &Parser::Lookahead_ (TokenQueue_::size_type index) throw()
{
    while (index >= m_realized_state_->LookaheadQueue().size())
    {
        // This does not require updating the hps-es' m_realized_lookahead_cursor.
        m_realized_state_->PushBackLookahead(Scan_(), m_hypothetical_state_->m_hps_queue);

        TRISON_CPP_DEBUG_CODE_(DSF_SCANNER_ACTION, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 3217 "barf_preprocessor_parser.cpp"
 << "Retrieved token " << m_realized_state_->LookaheadQueue().back() << " from scan actions; pushing token onto back of lookahead queue\n")
    }
    return m_realized_state_->LookaheadQueue()[index];
}

Parser::ParseTreeNode_ *Parser::TakeHypotheticalActionOnHPS_ (ParseTreeNode_ const &hps, ParseTreeNode_::Type action_type, std::uint32_t action_data)
{
    // TODO: replace individual arguments action_type, action_data with ParseTreeNode_::Spec and just modify that struct below where it needs it.
    assert(hps.m_spec.m_type == ParseTreeNode_::HPS && "Only a HPS type node can take an action");
    assert(hps.m_parent_node != NULL);

    ParseTreeNode_ *new_hps = NULL;

    switch (action_type)
    {
        case ParseTreeNode_::ROOT: {
            assert(false && "ParseTreeNode_::ROOT is an invalid action type.");
            break;
        }
        case ParseTreeNode_::RETURN: {
            new_hps = hps.CloneLeafNode();
            break;
        }
        case ParseTreeNode_::REDUCE: {
            // Execute the appropriate rule on the top tokens in the stack
            std::uint32_t const &rule_index = action_data;
            Grammar_::Rule_ const &rule = Grammar_::ms_rule_table_[rule_index];

            // Avoid creating the new hps altogether if it won't be added due to a REDUCE/REDUCE conflict.
            ParseTreeNode_ *existing_reduce_action_node = NULL;
            ParseTreeNode_ *reduce_hps = NULL;
            ParseTreeNode_::Spec action_spec(action_type, action_data);
            if (hps.m_parent_node->HasChildrenHavingSpec(action_spec)) // Check for an existing REDUCE action
            {
                // This may or may not be a conflict.  Need to determine that.

                ParseTreeNode_::ParseTreeNodeSet &reduce_node_set = hps.m_parent_node->ChildrenHavingSpec(action_spec);
                assert(reduce_node_set.size() == 1);
                existing_reduce_action_node = *reduce_node_set.begin();
                assert(existing_reduce_action_node != NULL);
                assert(existing_reduce_action_node->m_spec.m_type == ParseTreeNode_::REDUCE);

                // If the hypothetical action is identical to the existing one, then there's no problem,
                // just add it as a child to the existing one.
                if (existing_reduce_action_node->m_spec.m_single_data == rule_index)
                {
                    new_hps = hps.CloneLeafNode();
                    reduce_hps = new_hps;
                }
                // Otherwise this is a REDUCE/REDUCE conflict
                else
                {
                    TRISON_CPP_DEBUG_CODE_(DSF_REDUCE_REDUCE_CONFLICT, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 3273 "barf_preprocessor_parser.cpp"
 << "TakeHypotheticalActionOnHPS_ - REDUCE/REDUCE conflict encountered ... ")

                    // If the new REDUCE action beats the existing one in a conflict, just replace the existing one
                    // (replacement instead of creating a new one and deleting the old is an optimization which also
                    // avoids an annoying traversal through m_hypothetical_state_->m_hps_queue).
                    // NOTE: This depends on the fact that a REDUCE node has exactly one HPS child,
                    // which is what these three asserts check.  TODO: maybe make abstractions for these sorts of checks.
                    assert(existing_reduce_action_node->m_child_nodes.size() == 1);
                    assert(existing_reduce_action_node->m_child_nodes.begin()->second.size() == 1);
                    assert((*existing_reduce_action_node->m_child_nodes.begin()->second.begin())->m_spec.m_type == ParseTreeNode_::HPS);
                    if (Grammar_::CompareRuleByPrecedence_(action_data, existing_reduce_action_node->m_spec.m_single_data))
                    {
                        TRISON_CPP_DEBUG_CODE_(DSF_REDUCE_REDUCE_CONFLICT, *DebugSpewStream() << "resolving in favor of new hps.\n")

                        reduce_hps = *existing_reduce_action_node->m_child_nodes.begin()->second.begin();
                        assert(reduce_hps != NULL);

                        // Remove the nodes from the ParseTreeNode_ tree.
                        assert(existing_reduce_action_node != NULL);
                        existing_reduce_action_node->RemoveFromParent();
                        reduce_hps->RemoveFromParent();
                        // Modify the nodes.
                        existing_reduce_action_node->m_spec = action_spec; // Replace with the winning reduction rule Spec.
                        hps.CloneLeafNodeInto(*reduce_hps); // NOTE: This modifies the existing hps, so no update of m_hypothetical_state_->m_hps_queue is necessary.
                        // Re-add them to the ParseTreeNode_ tree.
                        existing_reduce_action_node->AddChild(reduce_hps);
                        hps.m_parent_node->AddChild(existing_reduce_action_node);
                    }
                    else
                    {
                        TRISON_CPP_DEBUG_CODE_(DSF_REDUCE_REDUCE_CONFLICT, *DebugSpewStream() << "resolving in favor of existing hps.\n")
                    }
                }
            }
            else
            {
                new_hps = hps.CloneLeafNode();
                reduce_hps = new_hps;
            }

            if (reduce_hps != NULL)
            {
                // Pop those stack tokens.
                for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
                {
                    assert(reduce_hps->m_hypothetical_head.HasParent());
                    reduce_hps->m_hypothetical_head = reduce_hps->m_hypothetical_head.Parent();
                }
                // Push the reduced nonterminal token data onto the front of the lookahead queue
                reduce_hps->m_hypothetical_lookahead_token_id_queue.push_front(rule.m_reduction_nonterminal_token_id);
            }

            break;
        }
        case ParseTreeNode_::SHIFT: {
            // Move the front of the lookahead queue to the top of the stack, assigning the appropriate state index.
            std::uint32_t const &state_index = action_data;
            // TODO: probably make "Shift" method for ParseTreeNode_ to do all this bookkeeping and parallel LookaheadTokenId tracking.
            new_hps = hps.CloneLeafNode();
            Token::Id lookahead_token_id = new_hps->LookaheadTokenId(*this);
            // Create a new Branch_ and link it to the parent node's.
            new_hps->m_hypothetical_head = Branch_(BranchState_::CreateWithParent(hps.m_hypothetical_head.StatePtr(), state_index), BranchTokenId_::CreateWithParent(hps.m_hypothetical_head.TokenIdPtr(), lookahead_token_id));
            assert(new_hps->m_hypothetical_head.HasParent());
            assert(new_hps->m_hypothetical_head.Parent() == hps.m_hypothetical_head);

            // Store the lookahead token id in action_data so it can printed.
            action_data = std::uint32_t(lookahead_token_id);
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseTreeNode_::INSERT_LOOKAHEAD_ERROR: {
            new_hps = hps.CloneLeafNode();
            new_hps->m_hypothetical_lookahead_token_id_queue.push_front(Terminal::ERROR_);
            break;
        }
        case ParseTreeNode_::DISCARD_LOOKAHEAD: {
            new_hps = hps.CloneLeafNode();
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseTreeNode_::POP_STACK: {
            // TODO: make separate action nodes for each pop, instead of using action data,
            // since for example two branches may agree on popping at least once, even if
            // one of them is killed later.
            std::uint32_t const &pop_count = action_data;
            // Check if there are actually enough stack elements to pop successfully.
            // If not, then don't create an HPS, and break early.
            if (pop_count >= hps.m_hypothetical_head.StatePtr()->BranchLength())
            {
                new_hps = NULL;
                break;
            }

            new_hps = hps.CloneLeafNode();
            for (std::uint32_t i = 0; i < pop_count; ++i)
            {
                assert(new_hps->m_hypothetical_head.HasParent());
                new_hps->m_hypothetical_head = new_hps->m_hypothetical_head.Parent();
            }
            TRISON_CPP_DEBUG_CODE_(DSF_HPS_NODE_CREATION_DELETION, *DebugSpewStream() << "creating HPS to be child of POP_STACK node... ")
            break;
        }
        case ParseTreeNode_::HPS: {
            assert(false && "ParseTreeNode_::HPS is an invalid action type.");
            break;
        }
        default: {
            assert(false && "invalid ParseTreeNode_::Type");
            break;
        }
    }

    if (new_hps != NULL)
    {
        assert(new_hps->m_parent_node == NULL);

        ParseTreeNode_ *action_node = NULL;

        // Ensure the action node exists, creating it if necessary.
        ParseTreeNode_::Spec action_spec(action_type, action_data);
        if (hps.m_parent_node->HasChildrenHavingSpec(action_spec))
        {
            ParseTreeNode_::ParseTreeNodeSet &children_of_action_type = hps.m_parent_node->ChildrenHavingSpec(action_spec);
            assert(children_of_action_type.size() == 1);
            action_node = *children_of_action_type.begin();
            TRISON_CPP_DEBUG_CODE_(DSF_HPS_NODE_CREATION_DELETION, *DebugSpewStream() << "using existing action node of type " << ParseTreeNode_::AsString(action_spec.m_type) << "... ")

            // If the new hps already exists (can only happen as a child of POP_STACK), then don't add it.
            if (action_type == ParseTreeNode_::POP_STACK && action_node->HasChildrenHavingSpec(new_hps->m_spec))
            {
                ParseTreeNode_::ParseTreeNodeSet const &child_hps_set = action_node->ChildrenHavingSpec(new_hps->m_spec);
                if (child_hps_set.find(new_hps) != child_hps_set.end())
                {
                    TRISON_CPP_DEBUG_CODE_(DSF_HPS_NODE_CREATION_DELETION, *DebugSpewStream() << "not adding duplicate HPS as child of POP_STACK node... ")
                    delete new_hps;
                    new_hps = NULL;
                }
            }
        }
        else
        {
            TRISON_CPP_DEBUG_CODE_(DSF_HPS_NODE_CREATION_DELETION, *DebugSpewStream() << "creating new action node of type " << ParseTreeNode_::AsString(action_spec.m_type) << "... ")
            action_node = new ParseTreeNode_(action_spec);
            TRISON_CPP_DEBUG_CODE_(DSF_HPS_NODE_CREATION_DELETION, *DebugSpewStream() << "(action_node = " << action_node << ") ")
            hps.m_parent_node->AddChild(action_node);
        }

        if (new_hps != NULL)
            action_node->AddChild(new_hps);
    }

    return new_hps;
}

void Parser::CreateParseTreeFromRealizedState_ ()
{
    BranchVector_ const &reconstruct_branch_vector = m_realized_state_->BranchVectorStack().back();

    // Add HPS nodes for each branch in the top of the realized state stack.
    assert(!reconstruct_branch_vector.empty());
    TRISON_CPP_DEBUG_CODE_(DSF_PARSE_TREE_MESSAGE, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 3443 "barf_preprocessor_parser.cpp"
 << "        Reconstructing branches:\n")
    for (BranchVector_::const_iterator it = reconstruct_branch_vector.begin(), it_end = reconstruct_branch_vector.end(); it != it_end; ++it)
    {
        Branch_ const &reconstruct_branch = *it;
        TRISON_CPP_DEBUG_CODE_(DSF_PARSE_TREE_MESSAGE, *DebugSpewStream() << 
#line 147 "barf_preprocessor_parser.trison"
"Preprocessor::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 3451 "barf_preprocessor_parser.cpp"
 << "            " << reconstruct_branch.StatePtr() << '\n')

        ParseTreeNode_ *hps             = new ParseTreeNode_(ParseTreeNode_::Spec(ParseTreeNode_::HPS));
        hps->m_hypothetical_head        = reconstruct_branch;

        m_hypothetical_state_->m_root->AddChild(hps);
        m_hypothetical_state_->m_hps_queue.push_back(hps);
    }
}

void Parser::ClearStack_ ()
{
    if (m_realized_state_ != NULL)
    {
        // TODO: Could print the m_realized_state_ m_branch_vector_stack element being popped.
        while (!m_realized_state_->TokenStack().empty())
            ThrowAwayToken_(m_realized_state_->PopStack());
    }

    delete m_hypothetical_state_;
    m_hypothetical_state_ = NULL;
}

void Parser::CleanUpAllInternals_ ()
{
    if (m_realized_state_ != NULL)
    {
        // TODO: Could print the m_realized_state_ m_branch_vector_stack element being popped.
        while (!m_realized_state_->TokenStack().empty())
            ThrowAwayToken_(m_realized_state_->PopStack());

        while (!m_realized_state_->LookaheadQueue().empty())
            ThrowAwayToken_(m_realized_state_->PopFrontLookahead(m_hypothetical_state_->m_hps_queue));

        // Note that this implicitly resets the error state (since that's tracked by m_realized_state_).
        delete m_realized_state_;
        m_realized_state_ = NULL;
    }

    delete m_hypothetical_state_;
    m_hypothetical_state_ = NULL;
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::Grammar_
// ////////////////////////////////////////////////////////////////////////////

bool Parser::Grammar_::CompareRuleByPrecedence_ (std::uint32_t lhs_rule_index, std::uint32_t rhs_rule_index)
{
    if (ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level != ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level)
        return ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level > ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level;
    else
        return lhs_rule_index < rhs_rule_index;
}

// These values are prescribed within trison and can't be changed.
char const *const Parser::Grammar_::ms_associativity_string_table_[] =
{
    "%left",
    "%nonassoc",
    "%right",
};

std::size_t const Parser::Grammar_::ms_associativity_count_ = sizeof(Parser::Grammar_::ms_associativity_string_table_) / sizeof(*Parser::Grammar_::ms_associativity_string_table_);

Parser::Grammar_::Precedence_ const Parser::Grammar_::ms_precedence_table_[] =
{
    { 0, Parser::Grammar_::Associativity(0), "DEFAULT_" },
    { 1, Parser::Grammar_::Associativity(0), "LOGICAL_OR" },
    { 2, Parser::Grammar_::Associativity(0), "LOGICAL_AND" },
    { 3, Parser::Grammar_::Associativity(0), "EQUALITY" },
    { 4, Parser::Grammar_::Associativity(0), "COMPARISON" },
    { 5, Parser::Grammar_::Associativity(0), "CONCATENATION" },
    { 6, Parser::Grammar_::Associativity(0), "ADDITION" },
    { 7, Parser::Grammar_::Associativity(0), "MULTIPLICATION" },
    { 8, Parser::Grammar_::Associativity(2), "UNARY" }
};

std::size_t const Parser::Grammar_::ms_precedence_count_ = sizeof(Parser::Grammar_::ms_precedence_table_) / sizeof(*Parser::Grammar_::ms_precedence_table_);

Parser::Grammar_::Rule_ const Parser::Grammar_::ms_rule_table_[] =
{
    { Parser::Nonterminal::body, 0, 0, "body <-" },
    { Parser::Nonterminal::body, 1, 0, "body <- TEXT" },
    { Parser::Nonterminal::body, 2, 0, "body <- body executable" },
    { Parser::Nonterminal::body, 3, 0, "body <- body executable TEXT" },
    { Parser::Nonterminal::executable, 1, 0, "executable <- code" },
    { Parser::Nonterminal::executable, 1, 0, "executable <- conditional_series" },
    { Parser::Nonterminal::executable, 3, 0, "executable <- define body end_define" },
    { Parser::Nonterminal::executable, 3, 0, "executable <- loop body end_loop" },
    { Parser::Nonterminal::executable, 3, 0, "executable <- for_each body end_for_each" },
    { Parser::Nonterminal::code, 3, 0, "code <- START_CODE code_body END_CODE" },
    { Parser::Nonterminal::code, 3, 0, "code <- CODE_LINE code_body CODE_NEWLINE" },
    { Parser::Nonterminal::code_body, 0, 0, "code_body <-" },
    { Parser::Nonterminal::code_body, 1, 0, "code_body <- expression" },
    { Parser::Nonterminal::code_body, 3, 0, "code_body <- DUMP_SYMBOL_TABLE '(' ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- UNDEFINE '(' ID ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- DECLARE_ARRAY '(' ID ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- DECLARE_MAP '(' ID ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- INCLUDE '(' expression ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- SANDBOX_INCLUDE '(' expression ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- WARNING '(' expression ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- ERROR '(' expression ')'" },
    { Parser::Nonterminal::code_body, 4, 0, "code_body <- FATAL_ERROR '(' expression ')'" },
    { Parser::Nonterminal::conditional_series, 3, 0, "conditional_series <- if_statement body conditional_series_end" },
    { Parser::Nonterminal::conditional_series_end, 1, 0, "conditional_series_end <- end_if" },
    { Parser::Nonterminal::conditional_series_end, 3, 0, "conditional_series_end <- else_statement body end_if" },
    { Parser::Nonterminal::conditional_series_end, 3, 0, "conditional_series_end <- else_if_statement body conditional_series_end" },
    { Parser::Nonterminal::if_statement, 6, 0, "if_statement <- START_CODE IF '(' expression ')' END_CODE" },
    { Parser::Nonterminal::if_statement, 6, 0, "if_statement <- CODE_LINE IF '(' expression ')' CODE_NEWLINE" },
    { Parser::Nonterminal::else_statement, 3, 0, "else_statement <- START_CODE ELSE END_CODE" },
    { Parser::Nonterminal::else_statement, 3, 0, "else_statement <- CODE_LINE ELSE CODE_NEWLINE" },
    { Parser::Nonterminal::else_if_statement, 6, 0, "else_if_statement <- START_CODE ELSE_IF '(' expression ')' END_CODE" },
    { Parser::Nonterminal::else_if_statement, 6, 0, "else_if_statement <- CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE" },
    { Parser::Nonterminal::end_if, 3, 0, "end_if <- START_CODE END_IF END_CODE" },
    { Parser::Nonterminal::end_if, 3, 0, "end_if <- CODE_LINE END_IF CODE_NEWLINE" },
    { Parser::Nonterminal::define, 1, 0, "define <- define_scalar" },
    { Parser::Nonterminal::define, 1, 0, "define <- define_array_element" },
    { Parser::Nonterminal::define, 1, 0, "define <- define_map_element" },
    { Parser::Nonterminal::define_scalar, 6, 0, "define_scalar <- START_CODE DEFINE '(' ID ')' END_CODE" },
    { Parser::Nonterminal::define_scalar, 6, 0, "define_scalar <- CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE" },
    { Parser::Nonterminal::define_array_element, 8, 0, "define_array_element <- START_CODE DEFINE '(' ID '[' ']' ')' END_CODE" },
    { Parser::Nonterminal::define_array_element, 8, 0, "define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE" },
    { Parser::Nonterminal::define_map_element, 9, 0, "define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { Parser::Nonterminal::define_map_element, 9, 0, "define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { Parser::Nonterminal::end_define, 3, 0, "end_define <- START_CODE END_DEFINE END_CODE" },
    { Parser::Nonterminal::end_define, 3, 0, "end_define <- CODE_LINE END_DEFINE CODE_NEWLINE" },
    { Parser::Nonterminal::loop, 8, 0, "loop <- START_CODE LOOP '(' ID ',' expression ')' END_CODE" },
    { Parser::Nonterminal::loop, 8, 0, "loop <- CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE" },
    { Parser::Nonterminal::end_loop, 3, 0, "end_loop <- START_CODE END_LOOP END_CODE" },
    { Parser::Nonterminal::end_loop, 3, 0, "end_loop <- CODE_LINE END_LOOP CODE_NEWLINE" },
    { Parser::Nonterminal::for_each, 8, 0, "for_each <- START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE" },
    { Parser::Nonterminal::for_each, 8, 0, "for_each <- CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE" },
    { Parser::Nonterminal::end_for_each, 3, 0, "end_for_each <- START_CODE END_FOR_EACH END_CODE" },
    { Parser::Nonterminal::end_for_each, 3, 0, "end_for_each <- CODE_LINE END_FOR_EACH CODE_NEWLINE" },
    { Parser::Nonterminal::expression, 1, 0, "expression <- STRING_LITERAL" },
    { Parser::Nonterminal::expression, 1, 0, "expression <- INTEGER_LITERAL" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- SIZEOF '(' ID ')'" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- KEYWORD_INT '(' expression ')'" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- KEYWORD_STRING '(' expression ')'" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- STRING_LENGTH '(' expression ')'" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- TO_CHARACTER_LITERAL '(' expression ')'" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- TO_STRING_LITERAL '(' expression ')'" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- IS_DEFINED '(' ID ')'" },
    { Parser::Nonterminal::expression, 7, 0, "expression <- IS_DEFINED '(' ID '[' expression ']' ')'" },
    { Parser::Nonterminal::expression, 1, 0, "expression <- ID" },
    { Parser::Nonterminal::expression, 4, 0, "expression <- ID '[' expression ']'" },
    { Parser::Nonterminal::expression, 2, 0, "expression <- ID '?'" },
    { Parser::Nonterminal::expression, 5, 0, "expression <- ID '[' expression ']' '?'" },
    { Parser::Nonterminal::expression, 3, 5, "expression <- expression '.' expression" },
    { Parser::Nonterminal::expression, 4, 1, "expression <- expression '|' '|' expression" },
    { Parser::Nonterminal::expression, 4, 2, "expression <- expression '&' '&' expression" },
    { Parser::Nonterminal::expression, 4, 3, "expression <- expression '=' '=' expression" },
    { Parser::Nonterminal::expression, 4, 3, "expression <- expression '!' '=' expression" },
    { Parser::Nonterminal::expression, 3, 4, "expression <- expression '<' expression" },
    { Parser::Nonterminal::expression, 4, 4, "expression <- expression '<' '=' expression" },
    { Parser::Nonterminal::expression, 3, 4, "expression <- expression '>' expression" },
    { Parser::Nonterminal::expression, 4, 4, "expression <- expression '>' '=' expression" },
    { Parser::Nonterminal::expression, 3, 6, "expression <- expression '+' expression" },
    { Parser::Nonterminal::expression, 3, 6, "expression <- expression '-' expression" },
    { Parser::Nonterminal::expression, 3, 7, "expression <- expression '*' expression" },
    { Parser::Nonterminal::expression, 3, 7, "expression <- expression '/' expression" },
    { Parser::Nonterminal::expression, 3, 7, "expression <- expression '%' expression" },
    { Parser::Nonterminal::expression, 2, 8, "expression <- '-' expression" },
    { Parser::Nonterminal::expression, 2, 8, "expression <- '!' expression" },
    { Parser::Nonterminal::expression, 3, 0, "expression <- '(' expression ')'" }
};
std::size_t const Parser::Grammar_::ms_rule_count_ = sizeof(Parser::Grammar_::ms_rule_table_) / sizeof(*Parser::Grammar_::ms_rule_table_);

// ////////////////////////////////////////////////////////////////////////////
// Parser::Npda_
// ////////////////////////////////////////////////////////////////////////////

Parser::Npda_::StateIndexVector_ const &Parser::Npda_::EpsilonClosureOfState_ (StateIndex_ state_index)
{
    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<StateIndex_,StateIndexVector_> LookupTable;
    static LookupTable s_lookup_table;

    LookupTable::iterator find_it = s_lookup_table.find(state_index);
    if (find_it != s_lookup_table.end())
        return find_it->second;

    // Compute the epsilon closure as a set
    StateIndexSet_ epsilon_closure_set;
    ComputeEpsilonClosureOfState_(state_index, epsilon_closure_set);

    // Copy the states in the set into the memoized vector.
//    std::cerr << "EpsilonClosureOfState_(" << state_index << "):"; // HIPPO
    StateIndexVector_ &epsilon_closure = s_lookup_table[state_index];
    epsilon_closure.reserve(epsilon_closure_set.size());
    for (StateIndexSet_::const_iterator it = epsilon_closure_set.begin(), it_end = epsilon_closure_set.end(); it != it_end; ++it)
    {
//        std::cerr << ' ' << *it; // HIPPO
        epsilon_closure.push_back(*it);
    }
//    std::cerr << ";\n"; // HIPPO
    // Return the memoized value.
    return epsilon_closure;
}

void Parser::Npda_::ComputeEpsilonClosureOfState_ (StateIndex_ state_index, StateIndexSet_ &epsilon_closure)
{
    // NOTE: The working definition of epsilon closure in this implementation used to only include
    // states that had non-epsilon transitions, but has been changed to include all epsilon-reachable
    // states, including those having no non-epsilon transitions.

    // This implementation allows epsilon cycles.

    // If this state has already been visited, there's no reason to continue.
    if (epsilon_closure.find(state_index) != epsilon_closure.end())
        return;
    // Otherwise, mark it as visited.  This also prevents infinite recursion.
    else
        epsilon_closure.insert(state_index);

    // This set collects the epsilon closure with no duplicates
    State_ const &state = ms_state_table_[state_index];
    for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count;
         transition != transition_end;
         ++transition)
    {
        if (transition->m_type == Transition_::EPSILON)
            ComputeEpsilonClosureOfState_(transition->m_data_index, epsilon_closure);
    }
}

Parser::Npda_::TransitionVector_ const &Parser::Npda_::NonEpsilonTransitionsOfState_ (StateIndex_ state_index, std::uint32_t sorted_type_index)
{
    assert(0 <= sorted_type_index && sorted_type_index <= 3);

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::pair<StateIndex_,std::uint32_t> KeyType;
    typedef std::map<KeyType,TransitionVector_> LookupTable;
    static LookupTable s_lookup_table;

    KeyType key(state_index, sorted_type_index);
    LookupTable::iterator it = s_lookup_table.find(key);
    if (it != s_lookup_table.end())
        return it->second;

    // TODO: probably don't need to memoize epsilon closures because non-epsilon transitions is memoized.
    TransitionSet_ non_epsilon_transition_set;
    StateIndexVector_ const &epsilon_closure = EpsilonClosureOfState_(state_index);
    for (StateIndexVector_::const_iterator it = epsilon_closure.begin(), it_end = epsilon_closure.end(); it != it_end; ++it)
    {
        State_ const &state = ms_state_table_[*it];
        for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count; transition != transition_end; ++transition)
        {
            std::uint32_t transition_sorted_type_index = Transition_::Order::SortedTypeIndex(Transition_::Type(transition->m_type));
            if (transition->m_type != Transition_::EPSILON && transition_sorted_type_index == sorted_type_index)
                non_epsilon_transition_set.insert(*transition);
        }
    }

    TransitionVector_ &non_epsilon_transitions = s_lookup_table[key];
    non_epsilon_transitions.reserve(non_epsilon_transition_set.size());
    for (TransitionSet_::const_iterator it = non_epsilon_transition_set.begin(), it_end = non_epsilon_transition_set.end(); it != it_end; ++it)
        non_epsilon_transitions.push_back(*it);
    return non_epsilon_transitions;
}

Parser::Npda_::State_ const Parser::Npda_::ms_state_table_[] =
{
    { 2, ms_transition_table_+0, 84, "START body" },
    { 1, ms_transition_table_+2, 84, "RETURN body" },
    { 4, ms_transition_table_+3, 84, "head of: body" },
    { 1, ms_transition_table_+7, 0, "rule 0: body <- ." },
    { 3, ms_transition_table_+8, 1, "rule 1: body <- . TEXT" },
    { 1, ms_transition_table_+11, 1, "rule 1: body <- TEXT ." },
    { 3, ms_transition_table_+12, 2, "rule 2: body <- . body executable" },
    { 4, ms_transition_table_+15, 2, "rule 2: body <- body . executable" },
    { 1, ms_transition_table_+19, 2, "rule 2: body <- body executable ." },
    { 2, ms_transition_table_+20, 84, "START executable" },
    { 1, ms_transition_table_+22, 84, "RETURN executable" },
    { 5, ms_transition_table_+23, 84, "head of: executable" },
    { 4, ms_transition_table_+28, 4, "rule 4: executable <- . code" },
    { 1, ms_transition_table_+32, 4, "rule 4: executable <- code ." },
    { 2, ms_transition_table_+33, 84, "START code" },
    { 1, ms_transition_table_+35, 84, "RETURN code" },
    { 2, ms_transition_table_+36, 84, "head of: code" },
    { 3, ms_transition_table_+38, 9, "rule 9: code <- . START_CODE code_body END_CODE" },
    { 4, ms_transition_table_+41, 9, "rule 9: code <- START_CODE . code_body END_CODE" },
    { 3, ms_transition_table_+45, 9, "rule 9: code <- START_CODE code_body . END_CODE" },
    { 2, ms_transition_table_+48, 84, "START code_body" },
    { 1, ms_transition_table_+50, 84, "RETURN code_body" },
    { 11, ms_transition_table_+51, 84, "head of: code_body" },
    { 1, ms_transition_table_+62, 11, "rule 11: code_body <- ." },
    { 4, ms_transition_table_+63, 12, "rule 12: code_body <- . expression" },
    { 1, ms_transition_table_+67, 12, "rule 12: code_body <- expression ." },
    { 2, ms_transition_table_+68, 84, "START expression" },
    { 1, ms_transition_table_+70, 84, "RETURN expression" },
    { 31, ms_transition_table_+71, 84, "head of: expression" },
    { 3, ms_transition_table_+102, 53, "rule 53: expression <- . STRING_LITERAL" },
    { 1, ms_transition_table_+105, 53, "rule 53: expression <- STRING_LITERAL ." },
    { 3, ms_transition_table_+106, 54, "rule 54: expression <- . INTEGER_LITERAL" },
    { 1, ms_transition_table_+109, 54, "rule 54: expression <- INTEGER_LITERAL ." },
    { 3, ms_transition_table_+110, 55, "rule 55: expression <- . SIZEOF '(' ID ')'" },
    { 3, ms_transition_table_+113, 55, "rule 55: expression <- SIZEOF . '(' ID ')'" },
    { 3, ms_transition_table_+116, 55, "rule 55: expression <- SIZEOF '(' . ID ')'" },
    { 3, ms_transition_table_+119, 55, "rule 55: expression <- SIZEOF '(' ID . ')'" },
    { 1, ms_transition_table_+122, 55, "rule 55: expression <- SIZEOF '(' ID ')' ." },
    { 3, ms_transition_table_+123, 56, "rule 56: expression <- . KEYWORD_INT '(' expression ')'" },
    { 3, ms_transition_table_+126, 56, "rule 56: expression <- KEYWORD_INT . '(' expression ')'" },
    { 4, ms_transition_table_+129, 56, "rule 56: expression <- KEYWORD_INT '(' . expression ')'" },
    { 3, ms_transition_table_+133, 56, "rule 56: expression <- KEYWORD_INT '(' expression . ')'" },
    { 1, ms_transition_table_+136, 56, "rule 56: expression <- KEYWORD_INT '(' expression ')' ." },
    { 3, ms_transition_table_+137, 57, "rule 57: expression <- . KEYWORD_STRING '(' expression ')'" },
    { 3, ms_transition_table_+140, 57, "rule 57: expression <- KEYWORD_STRING . '(' expression ')'" },
    { 4, ms_transition_table_+143, 57, "rule 57: expression <- KEYWORD_STRING '(' . expression ')'" },
    { 3, ms_transition_table_+147, 57, "rule 57: expression <- KEYWORD_STRING '(' expression . ')'" },
    { 1, ms_transition_table_+150, 57, "rule 57: expression <- KEYWORD_STRING '(' expression ')' ." },
    { 3, ms_transition_table_+151, 58, "rule 58: expression <- . STRING_LENGTH '(' expression ')'" },
    { 3, ms_transition_table_+154, 58, "rule 58: expression <- STRING_LENGTH . '(' expression ')'" },
    { 4, ms_transition_table_+157, 58, "rule 58: expression <- STRING_LENGTH '(' . expression ')'" },
    { 3, ms_transition_table_+161, 58, "rule 58: expression <- STRING_LENGTH '(' expression . ')'" },
    { 1, ms_transition_table_+164, 58, "rule 58: expression <- STRING_LENGTH '(' expression ')' ." },
    { 3, ms_transition_table_+165, 59, "rule 59: expression <- . TO_CHARACTER_LITERAL '(' expression ')'" },
    { 3, ms_transition_table_+168, 59, "rule 59: expression <- TO_CHARACTER_LITERAL . '(' expression ')'" },
    { 4, ms_transition_table_+171, 59, "rule 59: expression <- TO_CHARACTER_LITERAL '(' . expression ')'" },
    { 3, ms_transition_table_+175, 59, "rule 59: expression <- TO_CHARACTER_LITERAL '(' expression . ')'" },
    { 1, ms_transition_table_+178, 59, "rule 59: expression <- TO_CHARACTER_LITERAL '(' expression ')' ." },
    { 3, ms_transition_table_+179, 60, "rule 60: expression <- . TO_STRING_LITERAL '(' expression ')'" },
    { 3, ms_transition_table_+182, 60, "rule 60: expression <- TO_STRING_LITERAL . '(' expression ')'" },
    { 4, ms_transition_table_+185, 60, "rule 60: expression <- TO_STRING_LITERAL '(' . expression ')'" },
    { 3, ms_transition_table_+189, 60, "rule 60: expression <- TO_STRING_LITERAL '(' expression . ')'" },
    { 1, ms_transition_table_+192, 60, "rule 60: expression <- TO_STRING_LITERAL '(' expression ')' ." },
    { 3, ms_transition_table_+193, 61, "rule 61: expression <- . IS_DEFINED '(' ID ')'" },
    { 3, ms_transition_table_+196, 61, "rule 61: expression <- IS_DEFINED . '(' ID ')'" },
    { 3, ms_transition_table_+199, 61, "rule 61: expression <- IS_DEFINED '(' . ID ')'" },
    { 3, ms_transition_table_+202, 61, "rule 61: expression <- IS_DEFINED '(' ID . ')'" },
    { 1, ms_transition_table_+205, 61, "rule 61: expression <- IS_DEFINED '(' ID ')' ." },
    { 3, ms_transition_table_+206, 62, "rule 62: expression <- . IS_DEFINED '(' ID '[' expression ']' ')'" },
    { 3, ms_transition_table_+209, 62, "rule 62: expression <- IS_DEFINED . '(' ID '[' expression ']' ')'" },
    { 3, ms_transition_table_+212, 62, "rule 62: expression <- IS_DEFINED '(' . ID '[' expression ']' ')'" },
    { 3, ms_transition_table_+215, 62, "rule 62: expression <- IS_DEFINED '(' ID . '[' expression ']' ')'" },
    { 4, ms_transition_table_+218, 62, "rule 62: expression <- IS_DEFINED '(' ID '[' . expression ']' ')'" },
    { 3, ms_transition_table_+222, 62, "rule 62: expression <- IS_DEFINED '(' ID '[' expression . ']' ')'" },
    { 3, ms_transition_table_+225, 62, "rule 62: expression <- IS_DEFINED '(' ID '[' expression ']' . ')'" },
    { 1, ms_transition_table_+228, 62, "rule 62: expression <- IS_DEFINED '(' ID '[' expression ']' ')' ." },
    { 3, ms_transition_table_+229, 63, "rule 63: expression <- . ID" },
    { 1, ms_transition_table_+232, 63, "rule 63: expression <- ID ." },
    { 3, ms_transition_table_+233, 64, "rule 64: expression <- . ID '[' expression ']'" },
    { 3, ms_transition_table_+236, 64, "rule 64: expression <- ID . '[' expression ']'" },
    { 4, ms_transition_table_+239, 64, "rule 64: expression <- ID '[' . expression ']'" },
    { 3, ms_transition_table_+243, 64, "rule 64: expression <- ID '[' expression . ']'" },
    { 1, ms_transition_table_+246, 64, "rule 64: expression <- ID '[' expression ']' ." },
    { 3, ms_transition_table_+247, 65, "rule 65: expression <- . ID '?'" },
    { 3, ms_transition_table_+250, 65, "rule 65: expression <- ID . '?'" },
    { 1, ms_transition_table_+253, 65, "rule 65: expression <- ID '?' ." },
    { 3, ms_transition_table_+254, 66, "rule 66: expression <- . ID '[' expression ']' '?'" },
    { 3, ms_transition_table_+257, 66, "rule 66: expression <- ID . '[' expression ']' '?'" },
    { 4, ms_transition_table_+260, 66, "rule 66: expression <- ID '[' . expression ']' '?'" },
    { 3, ms_transition_table_+264, 66, "rule 66: expression <- ID '[' expression . ']' '?'" },
    { 3, ms_transition_table_+267, 66, "rule 66: expression <- ID '[' expression ']' . '?'" },
    { 1, ms_transition_table_+270, 66, "rule 66: expression <- ID '[' expression ']' '?' ." },
    { 3, ms_transition_table_+271, 67, "rule 67: expression <- . expression '.' expression" },
    { 3, ms_transition_table_+274, 67, "rule 67: expression <- expression . '.' expression" },
    { 4, ms_transition_table_+277, 67, "rule 67: expression <- expression '.' . expression" },
    { 1, ms_transition_table_+281, 67, "rule 67: expression <- expression '.' expression ." },
    { 3, ms_transition_table_+282, 68, "rule 68: expression <- . expression '|' '|' expression" },
    { 3, ms_transition_table_+285, 68, "rule 68: expression <- expression . '|' '|' expression" },
    { 3, ms_transition_table_+288, 68, "rule 68: expression <- expression '|' . '|' expression" },
    { 4, ms_transition_table_+291, 68, "rule 68: expression <- expression '|' '|' . expression" },
    { 1, ms_transition_table_+295, 68, "rule 68: expression <- expression '|' '|' expression ." },
    { 3, ms_transition_table_+296, 69, "rule 69: expression <- . expression '&' '&' expression" },
    { 3, ms_transition_table_+299, 69, "rule 69: expression <- expression . '&' '&' expression" },
    { 3, ms_transition_table_+302, 69, "rule 69: expression <- expression '&' . '&' expression" },
    { 4, ms_transition_table_+305, 69, "rule 69: expression <- expression '&' '&' . expression" },
    { 1, ms_transition_table_+309, 69, "rule 69: expression <- expression '&' '&' expression ." },
    { 3, ms_transition_table_+310, 70, "rule 70: expression <- . expression '=' '=' expression" },
    { 3, ms_transition_table_+313, 70, "rule 70: expression <- expression . '=' '=' expression" },
    { 3, ms_transition_table_+316, 70, "rule 70: expression <- expression '=' . '=' expression" },
    { 4, ms_transition_table_+319, 70, "rule 70: expression <- expression '=' '=' . expression" },
    { 1, ms_transition_table_+323, 70, "rule 70: expression <- expression '=' '=' expression ." },
    { 3, ms_transition_table_+324, 71, "rule 71: expression <- . expression '!' '=' expression" },
    { 3, ms_transition_table_+327, 71, "rule 71: expression <- expression . '!' '=' expression" },
    { 3, ms_transition_table_+330, 71, "rule 71: expression <- expression '!' . '=' expression" },
    { 4, ms_transition_table_+333, 71, "rule 71: expression <- expression '!' '=' . expression" },
    { 1, ms_transition_table_+337, 71, "rule 71: expression <- expression '!' '=' expression ." },
    { 3, ms_transition_table_+338, 72, "rule 72: expression <- . expression '<' expression" },
    { 3, ms_transition_table_+341, 72, "rule 72: expression <- expression . '<' expression" },
    { 4, ms_transition_table_+344, 72, "rule 72: expression <- expression '<' . expression" },
    { 1, ms_transition_table_+348, 72, "rule 72: expression <- expression '<' expression ." },
    { 3, ms_transition_table_+349, 73, "rule 73: expression <- . expression '<' '=' expression" },
    { 3, ms_transition_table_+352, 73, "rule 73: expression <- expression . '<' '=' expression" },
    { 3, ms_transition_table_+355, 73, "rule 73: expression <- expression '<' . '=' expression" },
    { 4, ms_transition_table_+358, 73, "rule 73: expression <- expression '<' '=' . expression" },
    { 1, ms_transition_table_+362, 73, "rule 73: expression <- expression '<' '=' expression ." },
    { 3, ms_transition_table_+363, 74, "rule 74: expression <- . expression '>' expression" },
    { 3, ms_transition_table_+366, 74, "rule 74: expression <- expression . '>' expression" },
    { 4, ms_transition_table_+369, 74, "rule 74: expression <- expression '>' . expression" },
    { 1, ms_transition_table_+373, 74, "rule 74: expression <- expression '>' expression ." },
    { 3, ms_transition_table_+374, 75, "rule 75: expression <- . expression '>' '=' expression" },
    { 3, ms_transition_table_+377, 75, "rule 75: expression <- expression . '>' '=' expression" },
    { 3, ms_transition_table_+380, 75, "rule 75: expression <- expression '>' . '=' expression" },
    { 4, ms_transition_table_+383, 75, "rule 75: expression <- expression '>' '=' . expression" },
    { 1, ms_transition_table_+387, 75, "rule 75: expression <- expression '>' '=' expression ." },
    { 3, ms_transition_table_+388, 76, "rule 76: expression <- . expression '+' expression" },
    { 3, ms_transition_table_+391, 76, "rule 76: expression <- expression . '+' expression" },
    { 4, ms_transition_table_+394, 76, "rule 76: expression <- expression '+' . expression" },
    { 1, ms_transition_table_+398, 76, "rule 76: expression <- expression '+' expression ." },
    { 3, ms_transition_table_+399, 77, "rule 77: expression <- . expression '-' expression" },
    { 3, ms_transition_table_+402, 77, "rule 77: expression <- expression . '-' expression" },
    { 4, ms_transition_table_+405, 77, "rule 77: expression <- expression '-' . expression" },
    { 1, ms_transition_table_+409, 77, "rule 77: expression <- expression '-' expression ." },
    { 3, ms_transition_table_+410, 78, "rule 78: expression <- . expression '*' expression" },
    { 3, ms_transition_table_+413, 78, "rule 78: expression <- expression . '*' expression" },
    { 4, ms_transition_table_+416, 78, "rule 78: expression <- expression '*' . expression" },
    { 1, ms_transition_table_+420, 78, "rule 78: expression <- expression '*' expression ." },
    { 3, ms_transition_table_+421, 79, "rule 79: expression <- . expression '/' expression" },
    { 3, ms_transition_table_+424, 79, "rule 79: expression <- expression . '/' expression" },
    { 4, ms_transition_table_+427, 79, "rule 79: expression <- expression '/' . expression" },
    { 1, ms_transition_table_+431, 79, "rule 79: expression <- expression '/' expression ." },
    { 3, ms_transition_table_+432, 80, "rule 80: expression <- . expression '%' expression" },
    { 3, ms_transition_table_+435, 80, "rule 80: expression <- expression . '%' expression" },
    { 4, ms_transition_table_+438, 80, "rule 80: expression <- expression '%' . expression" },
    { 1, ms_transition_table_+442, 80, "rule 80: expression <- expression '%' expression ." },
    { 3, ms_transition_table_+443, 81, "rule 81: expression <- . '-' expression" },
    { 4, ms_transition_table_+446, 81, "rule 81: expression <- '-' . expression" },
    { 1, ms_transition_table_+450, 81, "rule 81: expression <- '-' expression ." },
    { 3, ms_transition_table_+451, 82, "rule 82: expression <- . '!' expression" },
    { 4, ms_transition_table_+454, 82, "rule 82: expression <- '!' . expression" },
    { 1, ms_transition_table_+458, 82, "rule 82: expression <- '!' expression ." },
    { 3, ms_transition_table_+459, 83, "rule 83: expression <- . '(' expression ')'" },
    { 4, ms_transition_table_+462, 83, "rule 83: expression <- '(' . expression ')'" },
    { 3, ms_transition_table_+466, 83, "rule 83: expression <- '(' expression . ')'" },
    { 1, ms_transition_table_+469, 83, "rule 83: expression <- '(' expression ')' ." },
    { 3, ms_transition_table_+470, 13, "rule 13: code_body <- . DUMP_SYMBOL_TABLE '(' ')'" },
    { 3, ms_transition_table_+473, 13, "rule 13: code_body <- DUMP_SYMBOL_TABLE . '(' ')'" },
    { 3, ms_transition_table_+476, 13, "rule 13: code_body <- DUMP_SYMBOL_TABLE '(' . ')'" },
    { 1, ms_transition_table_+479, 13, "rule 13: code_body <- DUMP_SYMBOL_TABLE '(' ')' ." },
    { 3, ms_transition_table_+480, 14, "rule 14: code_body <- . UNDEFINE '(' ID ')'" },
    { 3, ms_transition_table_+483, 14, "rule 14: code_body <- UNDEFINE . '(' ID ')'" },
    { 3, ms_transition_table_+486, 14, "rule 14: code_body <- UNDEFINE '(' . ID ')'" },
    { 3, ms_transition_table_+489, 14, "rule 14: code_body <- UNDEFINE '(' ID . ')'" },
    { 1, ms_transition_table_+492, 14, "rule 14: code_body <- UNDEFINE '(' ID ')' ." },
    { 3, ms_transition_table_+493, 15, "rule 15: code_body <- . DECLARE_ARRAY '(' ID ')'" },
    { 3, ms_transition_table_+496, 15, "rule 15: code_body <- DECLARE_ARRAY . '(' ID ')'" },
    { 3, ms_transition_table_+499, 15, "rule 15: code_body <- DECLARE_ARRAY '(' . ID ')'" },
    { 3, ms_transition_table_+502, 15, "rule 15: code_body <- DECLARE_ARRAY '(' ID . ')'" },
    { 1, ms_transition_table_+505, 15, "rule 15: code_body <- DECLARE_ARRAY '(' ID ')' ." },
    { 3, ms_transition_table_+506, 16, "rule 16: code_body <- . DECLARE_MAP '(' ID ')'" },
    { 3, ms_transition_table_+509, 16, "rule 16: code_body <- DECLARE_MAP . '(' ID ')'" },
    { 3, ms_transition_table_+512, 16, "rule 16: code_body <- DECLARE_MAP '(' . ID ')'" },
    { 3, ms_transition_table_+515, 16, "rule 16: code_body <- DECLARE_MAP '(' ID . ')'" },
    { 1, ms_transition_table_+518, 16, "rule 16: code_body <- DECLARE_MAP '(' ID ')' ." },
    { 3, ms_transition_table_+519, 17, "rule 17: code_body <- . INCLUDE '(' expression ')'" },
    { 3, ms_transition_table_+522, 17, "rule 17: code_body <- INCLUDE . '(' expression ')'" },
    { 4, ms_transition_table_+525, 17, "rule 17: code_body <- INCLUDE '(' . expression ')'" },
    { 3, ms_transition_table_+529, 17, "rule 17: code_body <- INCLUDE '(' expression . ')'" },
    { 1, ms_transition_table_+532, 17, "rule 17: code_body <- INCLUDE '(' expression ')' ." },
    { 3, ms_transition_table_+533, 18, "rule 18: code_body <- . SANDBOX_INCLUDE '(' expression ')'" },
    { 3, ms_transition_table_+536, 18, "rule 18: code_body <- SANDBOX_INCLUDE . '(' expression ')'" },
    { 4, ms_transition_table_+539, 18, "rule 18: code_body <- SANDBOX_INCLUDE '(' . expression ')'" },
    { 3, ms_transition_table_+543, 18, "rule 18: code_body <- SANDBOX_INCLUDE '(' expression . ')'" },
    { 1, ms_transition_table_+546, 18, "rule 18: code_body <- SANDBOX_INCLUDE '(' expression ')' ." },
    { 3, ms_transition_table_+547, 19, "rule 19: code_body <- . WARNING '(' expression ')'" },
    { 3, ms_transition_table_+550, 19, "rule 19: code_body <- WARNING . '(' expression ')'" },
    { 4, ms_transition_table_+553, 19, "rule 19: code_body <- WARNING '(' . expression ')'" },
    { 3, ms_transition_table_+557, 19, "rule 19: code_body <- WARNING '(' expression . ')'" },
    { 1, ms_transition_table_+560, 19, "rule 19: code_body <- WARNING '(' expression ')' ." },
    { 3, ms_transition_table_+561, 20, "rule 20: code_body <- . ERROR '(' expression ')'" },
    { 3, ms_transition_table_+564, 20, "rule 20: code_body <- ERROR . '(' expression ')'" },
    { 4, ms_transition_table_+567, 20, "rule 20: code_body <- ERROR '(' . expression ')'" },
    { 3, ms_transition_table_+571, 20, "rule 20: code_body <- ERROR '(' expression . ')'" },
    { 1, ms_transition_table_+574, 20, "rule 20: code_body <- ERROR '(' expression ')' ." },
    { 3, ms_transition_table_+575, 21, "rule 21: code_body <- . FATAL_ERROR '(' expression ')'" },
    { 3, ms_transition_table_+578, 21, "rule 21: code_body <- FATAL_ERROR . '(' expression ')'" },
    { 4, ms_transition_table_+581, 21, "rule 21: code_body <- FATAL_ERROR '(' . expression ')'" },
    { 3, ms_transition_table_+585, 21, "rule 21: code_body <- FATAL_ERROR '(' expression . ')'" },
    { 1, ms_transition_table_+588, 21, "rule 21: code_body <- FATAL_ERROR '(' expression ')' ." },
    { 1, ms_transition_table_+589, 9, "rule 9: code <- START_CODE code_body END_CODE ." },
    { 3, ms_transition_table_+590, 10, "rule 10: code <- . CODE_LINE code_body CODE_NEWLINE" },
    { 4, ms_transition_table_+593, 10, "rule 10: code <- CODE_LINE . code_body CODE_NEWLINE" },
    { 3, ms_transition_table_+597, 10, "rule 10: code <- CODE_LINE code_body . CODE_NEWLINE" },
    { 1, ms_transition_table_+600, 10, "rule 10: code <- CODE_LINE code_body CODE_NEWLINE ." },
    { 4, ms_transition_table_+601, 5, "rule 5: executable <- . conditional_series" },
    { 1, ms_transition_table_+605, 5, "rule 5: executable <- conditional_series ." },
    { 2, ms_transition_table_+606, 84, "START conditional_series" },
    { 1, ms_transition_table_+608, 84, "RETURN conditional_series" },
    { 1, ms_transition_table_+609, 84, "head of: conditional_series" },
    { 4, ms_transition_table_+610, 22, "rule 22: conditional_series <- . if_statement body conditional_series_end" },
    { 4, ms_transition_table_+614, 22, "rule 22: conditional_series <- if_statement . body conditional_series_end" },
    { 2, ms_transition_table_+618, 84, "START if_statement" },
    { 1, ms_transition_table_+620, 84, "RETURN if_statement" },
    { 2, ms_transition_table_+621, 84, "head of: if_statement" },
    { 3, ms_transition_table_+623, 26, "rule 26: if_statement <- . START_CODE IF '(' expression ')' END_CODE" },
    { 3, ms_transition_table_+626, 26, "rule 26: if_statement <- START_CODE . IF '(' expression ')' END_CODE" },
    { 3, ms_transition_table_+629, 26, "rule 26: if_statement <- START_CODE IF . '(' expression ')' END_CODE" },
    { 4, ms_transition_table_+632, 26, "rule 26: if_statement <- START_CODE IF '(' . expression ')' END_CODE" },
    { 3, ms_transition_table_+636, 26, "rule 26: if_statement <- START_CODE IF '(' expression . ')' END_CODE" },
    { 3, ms_transition_table_+639, 26, "rule 26: if_statement <- START_CODE IF '(' expression ')' . END_CODE" },
    { 1, ms_transition_table_+642, 26, "rule 26: if_statement <- START_CODE IF '(' expression ')' END_CODE ." },
    { 3, ms_transition_table_+643, 27, "rule 27: if_statement <- . CODE_LINE IF '(' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+646, 27, "rule 27: if_statement <- CODE_LINE . IF '(' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+649, 27, "rule 27: if_statement <- CODE_LINE IF . '(' expression ')' CODE_NEWLINE" },
    { 4, ms_transition_table_+652, 27, "rule 27: if_statement <- CODE_LINE IF '(' . expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+656, 27, "rule 27: if_statement <- CODE_LINE IF '(' expression . ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+659, 27, "rule 27: if_statement <- CODE_LINE IF '(' expression ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+662, 27, "rule 27: if_statement <- CODE_LINE IF '(' expression ')' CODE_NEWLINE ." },
    { 4, ms_transition_table_+663, 22, "rule 22: conditional_series <- if_statement body . conditional_series_end" },
    { 1, ms_transition_table_+667, 22, "rule 22: conditional_series <- if_statement body conditional_series_end ." },
    { 2, ms_transition_table_+668, 84, "START conditional_series_end" },
    { 1, ms_transition_table_+670, 84, "RETURN conditional_series_end" },
    { 3, ms_transition_table_+671, 84, "head of: conditional_series_end" },
    { 4, ms_transition_table_+674, 23, "rule 23: conditional_series_end <- . end_if" },
    { 1, ms_transition_table_+678, 23, "rule 23: conditional_series_end <- end_if ." },
    { 2, ms_transition_table_+679, 84, "START end_if" },
    { 1, ms_transition_table_+681, 84, "RETURN end_if" },
    { 2, ms_transition_table_+682, 84, "head of: end_if" },
    { 3, ms_transition_table_+684, 32, "rule 32: end_if <- . START_CODE END_IF END_CODE" },
    { 3, ms_transition_table_+687, 32, "rule 32: end_if <- START_CODE . END_IF END_CODE" },
    { 3, ms_transition_table_+690, 32, "rule 32: end_if <- START_CODE END_IF . END_CODE" },
    { 1, ms_transition_table_+693, 32, "rule 32: end_if <- START_CODE END_IF END_CODE ." },
    { 3, ms_transition_table_+694, 33, "rule 33: end_if <- . CODE_LINE END_IF CODE_NEWLINE" },
    { 3, ms_transition_table_+697, 33, "rule 33: end_if <- CODE_LINE . END_IF CODE_NEWLINE" },
    { 3, ms_transition_table_+700, 33, "rule 33: end_if <- CODE_LINE END_IF . CODE_NEWLINE" },
    { 1, ms_transition_table_+703, 33, "rule 33: end_if <- CODE_LINE END_IF CODE_NEWLINE ." },
    { 4, ms_transition_table_+704, 24, "rule 24: conditional_series_end <- . else_statement body end_if" },
    { 4, ms_transition_table_+708, 24, "rule 24: conditional_series_end <- else_statement . body end_if" },
    { 2, ms_transition_table_+712, 84, "START else_statement" },
    { 1, ms_transition_table_+714, 84, "RETURN else_statement" },
    { 2, ms_transition_table_+715, 84, "head of: else_statement" },
    { 3, ms_transition_table_+717, 28, "rule 28: else_statement <- . START_CODE ELSE END_CODE" },
    { 3, ms_transition_table_+720, 28, "rule 28: else_statement <- START_CODE . ELSE END_CODE" },
    { 3, ms_transition_table_+723, 28, "rule 28: else_statement <- START_CODE ELSE . END_CODE" },
    { 1, ms_transition_table_+726, 28, "rule 28: else_statement <- START_CODE ELSE END_CODE ." },
    { 3, ms_transition_table_+727, 29, "rule 29: else_statement <- . CODE_LINE ELSE CODE_NEWLINE" },
    { 3, ms_transition_table_+730, 29, "rule 29: else_statement <- CODE_LINE . ELSE CODE_NEWLINE" },
    { 3, ms_transition_table_+733, 29, "rule 29: else_statement <- CODE_LINE ELSE . CODE_NEWLINE" },
    { 1, ms_transition_table_+736, 29, "rule 29: else_statement <- CODE_LINE ELSE CODE_NEWLINE ." },
    { 4, ms_transition_table_+737, 24, "rule 24: conditional_series_end <- else_statement body . end_if" },
    { 1, ms_transition_table_+741, 24, "rule 24: conditional_series_end <- else_statement body end_if ." },
    { 4, ms_transition_table_+742, 25, "rule 25: conditional_series_end <- . else_if_statement body conditional_series_end" },
    { 4, ms_transition_table_+746, 25, "rule 25: conditional_series_end <- else_if_statement . body conditional_series_end" },
    { 2, ms_transition_table_+750, 84, "START else_if_statement" },
    { 1, ms_transition_table_+752, 84, "RETURN else_if_statement" },
    { 2, ms_transition_table_+753, 84, "head of: else_if_statement" },
    { 3, ms_transition_table_+755, 30, "rule 30: else_if_statement <- . START_CODE ELSE_IF '(' expression ')' END_CODE" },
    { 3, ms_transition_table_+758, 30, "rule 30: else_if_statement <- START_CODE . ELSE_IF '(' expression ')' END_CODE" },
    { 3, ms_transition_table_+761, 30, "rule 30: else_if_statement <- START_CODE ELSE_IF . '(' expression ')' END_CODE" },
    { 4, ms_transition_table_+764, 30, "rule 30: else_if_statement <- START_CODE ELSE_IF '(' . expression ')' END_CODE" },
    { 3, ms_transition_table_+768, 30, "rule 30: else_if_statement <- START_CODE ELSE_IF '(' expression . ')' END_CODE" },
    { 3, ms_transition_table_+771, 30, "rule 30: else_if_statement <- START_CODE ELSE_IF '(' expression ')' . END_CODE" },
    { 1, ms_transition_table_+774, 30, "rule 30: else_if_statement <- START_CODE ELSE_IF '(' expression ')' END_CODE ." },
    { 3, ms_transition_table_+775, 31, "rule 31: else_if_statement <- . CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+778, 31, "rule 31: else_if_statement <- CODE_LINE . ELSE_IF '(' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+781, 31, "rule 31: else_if_statement <- CODE_LINE ELSE_IF . '(' expression ')' CODE_NEWLINE" },
    { 4, ms_transition_table_+784, 31, "rule 31: else_if_statement <- CODE_LINE ELSE_IF '(' . expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+788, 31, "rule 31: else_if_statement <- CODE_LINE ELSE_IF '(' expression . ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+791, 31, "rule 31: else_if_statement <- CODE_LINE ELSE_IF '(' expression ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+794, 31, "rule 31: else_if_statement <- CODE_LINE ELSE_IF '(' expression ')' CODE_NEWLINE ." },
    { 4, ms_transition_table_+795, 25, "rule 25: conditional_series_end <- else_if_statement body . conditional_series_end" },
    { 1, ms_transition_table_+799, 25, "rule 25: conditional_series_end <- else_if_statement body conditional_series_end ." },
    { 4, ms_transition_table_+800, 6, "rule 6: executable <- . define body end_define" },
    { 4, ms_transition_table_+804, 6, "rule 6: executable <- define . body end_define" },
    { 2, ms_transition_table_+808, 84, "START define" },
    { 1, ms_transition_table_+810, 84, "RETURN define" },
    { 3, ms_transition_table_+811, 84, "head of: define" },
    { 4, ms_transition_table_+814, 34, "rule 34: define <- . define_scalar" },
    { 1, ms_transition_table_+818, 34, "rule 34: define <- define_scalar ." },
    { 2, ms_transition_table_+819, 84, "START define_scalar" },
    { 1, ms_transition_table_+821, 84, "RETURN define_scalar" },
    { 2, ms_transition_table_+822, 84, "head of: define_scalar" },
    { 3, ms_transition_table_+824, 37, "rule 37: define_scalar <- . START_CODE DEFINE '(' ID ')' END_CODE" },
    { 3, ms_transition_table_+827, 37, "rule 37: define_scalar <- START_CODE . DEFINE '(' ID ')' END_CODE" },
    { 3, ms_transition_table_+830, 37, "rule 37: define_scalar <- START_CODE DEFINE . '(' ID ')' END_CODE" },
    { 3, ms_transition_table_+833, 37, "rule 37: define_scalar <- START_CODE DEFINE '(' . ID ')' END_CODE" },
    { 3, ms_transition_table_+836, 37, "rule 37: define_scalar <- START_CODE DEFINE '(' ID . ')' END_CODE" },
    { 3, ms_transition_table_+839, 37, "rule 37: define_scalar <- START_CODE DEFINE '(' ID ')' . END_CODE" },
    { 1, ms_transition_table_+842, 37, "rule 37: define_scalar <- START_CODE DEFINE '(' ID ')' END_CODE ." },
    { 3, ms_transition_table_+843, 38, "rule 38: define_scalar <- . CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+846, 38, "rule 38: define_scalar <- CODE_LINE . DEFINE '(' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+849, 38, "rule 38: define_scalar <- CODE_LINE DEFINE . '(' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+852, 38, "rule 38: define_scalar <- CODE_LINE DEFINE '(' . ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+855, 38, "rule 38: define_scalar <- CODE_LINE DEFINE '(' ID . ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+858, 38, "rule 38: define_scalar <- CODE_LINE DEFINE '(' ID ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+861, 38, "rule 38: define_scalar <- CODE_LINE DEFINE '(' ID ')' CODE_NEWLINE ." },
    { 4, ms_transition_table_+862, 35, "rule 35: define <- . define_array_element" },
    { 1, ms_transition_table_+866, 35, "rule 35: define <- define_array_element ." },
    { 2, ms_transition_table_+867, 84, "START define_array_element" },
    { 1, ms_transition_table_+869, 84, "RETURN define_array_element" },
    { 2, ms_transition_table_+870, 84, "head of: define_array_element" },
    { 3, ms_transition_table_+872, 39, "rule 39: define_array_element <- . START_CODE DEFINE '(' ID '[' ']' ')' END_CODE" },
    { 3, ms_transition_table_+875, 39, "rule 39: define_array_element <- START_CODE . DEFINE '(' ID '[' ']' ')' END_CODE" },
    { 3, ms_transition_table_+878, 39, "rule 39: define_array_element <- START_CODE DEFINE . '(' ID '[' ']' ')' END_CODE" },
    { 3, ms_transition_table_+881, 39, "rule 39: define_array_element <- START_CODE DEFINE '(' . ID '[' ']' ')' END_CODE" },
    { 3, ms_transition_table_+884, 39, "rule 39: define_array_element <- START_CODE DEFINE '(' ID . '[' ']' ')' END_CODE" },
    { 3, ms_transition_table_+887, 39, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' . ']' ')' END_CODE" },
    { 3, ms_transition_table_+890, 39, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' ']' . ')' END_CODE" },
    { 3, ms_transition_table_+893, 39, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' ']' ')' . END_CODE" },
    { 1, ms_transition_table_+896, 39, "rule 39: define_array_element <- START_CODE DEFINE '(' ID '[' ']' ')' END_CODE ." },
    { 3, ms_transition_table_+897, 40, "rule 40: define_array_element <- . CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+900, 40, "rule 40: define_array_element <- CODE_LINE . DEFINE '(' ID '[' ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+903, 40, "rule 40: define_array_element <- CODE_LINE DEFINE . '(' ID '[' ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+906, 40, "rule 40: define_array_element <- CODE_LINE DEFINE '(' . ID '[' ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+909, 40, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID . '[' ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+912, 40, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' . ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+915, 40, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' . ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+918, 40, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+921, 40, "rule 40: define_array_element <- CODE_LINE DEFINE '(' ID '[' ']' ')' CODE_NEWLINE ." },
    { 4, ms_transition_table_+922, 36, "rule 36: define <- . define_map_element" },
    { 1, ms_transition_table_+926, 36, "rule 36: define <- define_map_element ." },
    { 2, ms_transition_table_+927, 84, "START define_map_element" },
    { 1, ms_transition_table_+929, 84, "RETURN define_map_element" },
    { 2, ms_transition_table_+930, 84, "head of: define_map_element" },
    { 3, ms_transition_table_+932, 41, "rule 41: define_map_element <- . START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 3, ms_transition_table_+935, 41, "rule 41: define_map_element <- START_CODE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 3, ms_transition_table_+938, 41, "rule 41: define_map_element <- START_CODE DEFINE . '(' ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 3, ms_transition_table_+941, 41, "rule 41: define_map_element <- START_CODE DEFINE '(' . ID '[' STRING_LITERAL ']' ')' END_CODE" },
    { 3, ms_transition_table_+944, 41, "rule 41: define_map_element <- START_CODE DEFINE '(' ID . '[' STRING_LITERAL ']' ')' END_CODE" },
    { 3, ms_transition_table_+947, 41, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' . STRING_LITERAL ']' ')' END_CODE" },
    { 3, ms_transition_table_+950, 41, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL . ']' ')' END_CODE" },
    { 3, ms_transition_table_+953, 41, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' . ')' END_CODE" },
    { 3, ms_transition_table_+956, 41, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' . END_CODE" },
    { 1, ms_transition_table_+959, 41, "rule 41: define_map_element <- START_CODE DEFINE '(' ID '[' STRING_LITERAL ']' ')' END_CODE ." },
    { 3, ms_transition_table_+960, 42, "rule 42: define_map_element <- . CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+963, 42, "rule 42: define_map_element <- CODE_LINE . DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+966, 42, "rule 42: define_map_element <- CODE_LINE DEFINE . '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+969, 42, "rule 42: define_map_element <- CODE_LINE DEFINE '(' . ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+972, 42, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID . '[' STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+975, 42, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' . STRING_LITERAL ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+978, 42, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL . ']' ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+981, 42, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' . ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+984, 42, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+987, 42, "rule 42: define_map_element <- CODE_LINE DEFINE '(' ID '[' STRING_LITERAL ']' ')' CODE_NEWLINE ." },
    { 4, ms_transition_table_+988, 6, "rule 6: executable <- define body . end_define" },
    { 1, ms_transition_table_+992, 6, "rule 6: executable <- define body end_define ." },
    { 2, ms_transition_table_+993, 84, "START end_define" },
    { 1, ms_transition_table_+995, 84, "RETURN end_define" },
    { 2, ms_transition_table_+996, 84, "head of: end_define" },
    { 3, ms_transition_table_+998, 43, "rule 43: end_define <- . START_CODE END_DEFINE END_CODE" },
    { 3, ms_transition_table_+1001, 43, "rule 43: end_define <- START_CODE . END_DEFINE END_CODE" },
    { 3, ms_transition_table_+1004, 43, "rule 43: end_define <- START_CODE END_DEFINE . END_CODE" },
    { 1, ms_transition_table_+1007, 43, "rule 43: end_define <- START_CODE END_DEFINE END_CODE ." },
    { 3, ms_transition_table_+1008, 44, "rule 44: end_define <- . CODE_LINE END_DEFINE CODE_NEWLINE" },
    { 3, ms_transition_table_+1011, 44, "rule 44: end_define <- CODE_LINE . END_DEFINE CODE_NEWLINE" },
    { 3, ms_transition_table_+1014, 44, "rule 44: end_define <- CODE_LINE END_DEFINE . CODE_NEWLINE" },
    { 1, ms_transition_table_+1017, 44, "rule 44: end_define <- CODE_LINE END_DEFINE CODE_NEWLINE ." },
    { 4, ms_transition_table_+1018, 7, "rule 7: executable <- . loop body end_loop" },
    { 4, ms_transition_table_+1022, 7, "rule 7: executable <- loop . body end_loop" },
    { 2, ms_transition_table_+1026, 84, "START loop" },
    { 1, ms_transition_table_+1028, 84, "RETURN loop" },
    { 2, ms_transition_table_+1029, 84, "head of: loop" },
    { 3, ms_transition_table_+1031, 45, "rule 45: loop <- . START_CODE LOOP '(' ID ',' expression ')' END_CODE" },
    { 3, ms_transition_table_+1034, 45, "rule 45: loop <- START_CODE . LOOP '(' ID ',' expression ')' END_CODE" },
    { 3, ms_transition_table_+1037, 45, "rule 45: loop <- START_CODE LOOP . '(' ID ',' expression ')' END_CODE" },
    { 3, ms_transition_table_+1040, 45, "rule 45: loop <- START_CODE LOOP '(' . ID ',' expression ')' END_CODE" },
    { 3, ms_transition_table_+1043, 45, "rule 45: loop <- START_CODE LOOP '(' ID . ',' expression ')' END_CODE" },
    { 4, ms_transition_table_+1046, 45, "rule 45: loop <- START_CODE LOOP '(' ID ',' . expression ')' END_CODE" },
    { 3, ms_transition_table_+1050, 45, "rule 45: loop <- START_CODE LOOP '(' ID ',' expression . ')' END_CODE" },
    { 3, ms_transition_table_+1053, 45, "rule 45: loop <- START_CODE LOOP '(' ID ',' expression ')' . END_CODE" },
    { 1, ms_transition_table_+1056, 45, "rule 45: loop <- START_CODE LOOP '(' ID ',' expression ')' END_CODE ." },
    { 3, ms_transition_table_+1057, 46, "rule 46: loop <- . CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1060, 46, "rule 46: loop <- CODE_LINE . LOOP '(' ID ',' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1063, 46, "rule 46: loop <- CODE_LINE LOOP . '(' ID ',' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1066, 46, "rule 46: loop <- CODE_LINE LOOP '(' . ID ',' expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1069, 46, "rule 46: loop <- CODE_LINE LOOP '(' ID . ',' expression ')' CODE_NEWLINE" },
    { 4, ms_transition_table_+1072, 46, "rule 46: loop <- CODE_LINE LOOP '(' ID ',' . expression ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1076, 46, "rule 46: loop <- CODE_LINE LOOP '(' ID ',' expression . ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1079, 46, "rule 46: loop <- CODE_LINE LOOP '(' ID ',' expression ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1082, 46, "rule 46: loop <- CODE_LINE LOOP '(' ID ',' expression ')' CODE_NEWLINE ." },
    { 4, ms_transition_table_+1083, 7, "rule 7: executable <- loop body . end_loop" },
    { 1, ms_transition_table_+1087, 7, "rule 7: executable <- loop body end_loop ." },
    { 2, ms_transition_table_+1088, 84, "START end_loop" },
    { 1, ms_transition_table_+1090, 84, "RETURN end_loop" },
    { 2, ms_transition_table_+1091, 84, "head of: end_loop" },
    { 3, ms_transition_table_+1093, 47, "rule 47: end_loop <- . START_CODE END_LOOP END_CODE" },
    { 3, ms_transition_table_+1096, 47, "rule 47: end_loop <- START_CODE . END_LOOP END_CODE" },
    { 3, ms_transition_table_+1099, 47, "rule 47: end_loop <- START_CODE END_LOOP . END_CODE" },
    { 1, ms_transition_table_+1102, 47, "rule 47: end_loop <- START_CODE END_LOOP END_CODE ." },
    { 3, ms_transition_table_+1103, 48, "rule 48: end_loop <- . CODE_LINE END_LOOP CODE_NEWLINE" },
    { 3, ms_transition_table_+1106, 48, "rule 48: end_loop <- CODE_LINE . END_LOOP CODE_NEWLINE" },
    { 3, ms_transition_table_+1109, 48, "rule 48: end_loop <- CODE_LINE END_LOOP . CODE_NEWLINE" },
    { 1, ms_transition_table_+1112, 48, "rule 48: end_loop <- CODE_LINE END_LOOP CODE_NEWLINE ." },
    { 4, ms_transition_table_+1113, 8, "rule 8: executable <- . for_each body end_for_each" },
    { 4, ms_transition_table_+1117, 8, "rule 8: executable <- for_each . body end_for_each" },
    { 2, ms_transition_table_+1121, 84, "START for_each" },
    { 1, ms_transition_table_+1123, 84, "RETURN for_each" },
    { 2, ms_transition_table_+1124, 84, "head of: for_each" },
    { 3, ms_transition_table_+1126, 49, "rule 49: for_each <- . START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE" },
    { 3, ms_transition_table_+1129, 49, "rule 49: for_each <- START_CODE . FOR_EACH '(' ID ',' ID ')' END_CODE" },
    { 3, ms_transition_table_+1132, 49, "rule 49: for_each <- START_CODE FOR_EACH . '(' ID ',' ID ')' END_CODE" },
    { 3, ms_transition_table_+1135, 49, "rule 49: for_each <- START_CODE FOR_EACH '(' . ID ',' ID ')' END_CODE" },
    { 3, ms_transition_table_+1138, 49, "rule 49: for_each <- START_CODE FOR_EACH '(' ID . ',' ID ')' END_CODE" },
    { 3, ms_transition_table_+1141, 49, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' . ID ')' END_CODE" },
    { 3, ms_transition_table_+1144, 49, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' ID . ')' END_CODE" },
    { 3, ms_transition_table_+1147, 49, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' ID ')' . END_CODE" },
    { 1, ms_transition_table_+1150, 49, "rule 49: for_each <- START_CODE FOR_EACH '(' ID ',' ID ')' END_CODE ." },
    { 3, ms_transition_table_+1151, 50, "rule 50: for_each <- . CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1154, 50, "rule 50: for_each <- CODE_LINE . FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1157, 50, "rule 50: for_each <- CODE_LINE FOR_EACH . '(' ID ',' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1160, 50, "rule 50: for_each <- CODE_LINE FOR_EACH '(' . ID ',' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1163, 50, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID . ',' ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1166, 50, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' . ID ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1169, 50, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' ID . ')' CODE_NEWLINE" },
    { 3, ms_transition_table_+1172, 50, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' ID ')' . CODE_NEWLINE" },
    { 1, ms_transition_table_+1175, 50, "rule 50: for_each <- CODE_LINE FOR_EACH '(' ID ',' ID ')' CODE_NEWLINE ." },
    { 4, ms_transition_table_+1176, 8, "rule 8: executable <- for_each body . end_for_each" },
    { 1, ms_transition_table_+1180, 8, "rule 8: executable <- for_each body end_for_each ." },
    { 2, ms_transition_table_+1181, 84, "START end_for_each" },
    { 1, ms_transition_table_+1183, 84, "RETURN end_for_each" },
    { 2, ms_transition_table_+1184, 84, "head of: end_for_each" },
    { 3, ms_transition_table_+1186, 51, "rule 51: end_for_each <- . START_CODE END_FOR_EACH END_CODE" },
    { 3, ms_transition_table_+1189, 51, "rule 51: end_for_each <- START_CODE . END_FOR_EACH END_CODE" },
    { 3, ms_transition_table_+1192, 51, "rule 51: end_for_each <- START_CODE END_FOR_EACH . END_CODE" },
    { 1, ms_transition_table_+1195, 51, "rule 51: end_for_each <- START_CODE END_FOR_EACH END_CODE ." },
    { 3, ms_transition_table_+1196, 52, "rule 52: end_for_each <- . CODE_LINE END_FOR_EACH CODE_NEWLINE" },
    { 3, ms_transition_table_+1199, 52, "rule 52: end_for_each <- CODE_LINE . END_FOR_EACH CODE_NEWLINE" },
    { 3, ms_transition_table_+1202, 52, "rule 52: end_for_each <- CODE_LINE END_FOR_EACH . CODE_NEWLINE" },
    { 1, ms_transition_table_+1205, 52, "rule 52: end_for_each <- CODE_LINE END_FOR_EACH CODE_NEWLINE ." },
    { 3, ms_transition_table_+1206, 3, "rule 3: body <- . body executable TEXT" },
    { 4, ms_transition_table_+1209, 3, "rule 3: body <- body . executable TEXT" },
    { 3, ms_transition_table_+1213, 3, "rule 3: body <- body executable . TEXT" },
    { 1, ms_transition_table_+1216, 3, "rule 3: body <- body executable TEXT ." }
};
std::size_t const Parser::Npda_::ms_state_count_ = sizeof(Parser::Npda_::ms_state_table_) / sizeof(*Parser::Npda_::ms_state_table_);

Parser::Npda_::Transition_ const Parser::Npda_::ms_transition_table_[] =
{
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(3) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(4) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(6) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(448) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(0) },
    { Parser::Npda_::Transition_::SHIFT, 258, std::uint32_t(5) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(7) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 294, std::uint32_t(8) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(11) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 294, std::uint32_t(10) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(11) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(12) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(213) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(291) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(376) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(412) },
    { Parser::Npda_::Transition_::SHIFT, 295, std::uint32_t(13) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(16) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(4) },
    { Parser::Npda_::Transition_::SHIFT, 295, std::uint32_t(15) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(16) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(17) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(209) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(18) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 296, std::uint32_t(19) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(22) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(208) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 296, std::uint32_t(21) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(22) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(23) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(24) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(164) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(168) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(173) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(178) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(183) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(188) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(193) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(198) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(203) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(11) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(25) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(12) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(27) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(29) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(31) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(33) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(38) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(43) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(48) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(53) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(58) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(63) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(68) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(76) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(78) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(83) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(86) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(92) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(96) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(101) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(106) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(111) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(116) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(120) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(125) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(129) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(134) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(138) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(142) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(146) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(150) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(154) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(157) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(160) },
    { Parser::Npda_::Transition_::SHIFT, 286, std::uint32_t(30) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(53) },
    { Parser::Npda_::Transition_::SHIFT, 285, std::uint32_t(32) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(54) },
    { Parser::Npda_::Transition_::SHIFT, 283, std::uint32_t(34) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(35) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(36) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(37) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(55) },
    { Parser::Npda_::Transition_::SHIFT, 287, std::uint32_t(39) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(40) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(41) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(42) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(56) },
    { Parser::Npda_::Transition_::SHIFT, 288, std::uint32_t(44) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(45) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(46) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(47) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(57) },
    { Parser::Npda_::Transition_::SHIFT, 289, std::uint32_t(49) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(50) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(51) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(52) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(58) },
    { Parser::Npda_::Transition_::SHIFT, 290, std::uint32_t(54) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(55) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(56) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(57) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(59) },
    { Parser::Npda_::Transition_::SHIFT, 291, std::uint32_t(59) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(60) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(61) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(62) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(60) },
    { Parser::Npda_::Transition_::SHIFT, 284, std::uint32_t(64) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(65) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(66) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(67) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(61) },
    { Parser::Npda_::Transition_::SHIFT, 284, std::uint32_t(69) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(70) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(71) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(72) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(73) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(74) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(75) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(62) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(77) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(63) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(79) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(80) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(81) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(82) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(64) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(84) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 63, std::uint32_t(85) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(65) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(87) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(88) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(89) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(90) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 63, std::uint32_t(91) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(66) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(93) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 46, std::uint32_t(94) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(95) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(67) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(97) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 124, std::uint32_t(98) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 124, std::uint32_t(99) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(100) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(68) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(102) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 38, std::uint32_t(103) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 38, std::uint32_t(104) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(105) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(69) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(107) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 61, std::uint32_t(108) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 61, std::uint32_t(109) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(110) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(70) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(112) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 33, std::uint32_t(113) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 61, std::uint32_t(114) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(115) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(71) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(117) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 60, std::uint32_t(118) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(119) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(72) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(121) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 60, std::uint32_t(122) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 61, std::uint32_t(123) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(124) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(73) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(126) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 62, std::uint32_t(127) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(128) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(74) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(130) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 62, std::uint32_t(131) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 61, std::uint32_t(132) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(133) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(75) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(135) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 43, std::uint32_t(136) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(137) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(76) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(139) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 45, std::uint32_t(140) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(141) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(77) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(143) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 42, std::uint32_t(144) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(145) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(78) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(147) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 47, std::uint32_t(148) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(149) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(79) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(151) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 37, std::uint32_t(152) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(153) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(80) },
    { Parser::Npda_::Transition_::SHIFT, 45, std::uint32_t(155) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(156) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(81) },
    { Parser::Npda_::Transition_::SHIFT, 33, std::uint32_t(158) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(159) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(82) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(161) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(162) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(163) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(83) },
    { Parser::Npda_::Transition_::SHIFT, 264, std::uint32_t(165) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(166) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(167) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 269, std::uint32_t(169) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(170) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(171) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(172) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(14) },
    { Parser::Npda_::Transition_::SHIFT, 270, std::uint32_t(174) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(175) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(176) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(177) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(15) },
    { Parser::Npda_::Transition_::SHIFT, 271, std::uint32_t(179) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(180) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(181) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(182) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(16) },
    { Parser::Npda_::Transition_::SHIFT, 278, std::uint32_t(184) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(185) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(186) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(187) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(17) },
    { Parser::Npda_::Transition_::SHIFT, 279, std::uint32_t(189) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(190) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(191) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(192) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(18) },
    { Parser::Npda_::Transition_::SHIFT, 280, std::uint32_t(194) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(195) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(196) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(197) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(19) },
    { Parser::Npda_::Transition_::SHIFT, 281, std::uint32_t(199) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(200) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(201) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(202) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(20) },
    { Parser::Npda_::Transition_::SHIFT, 282, std::uint32_t(204) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(205) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(206) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(207) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(21) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(9) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(210) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 296, std::uint32_t(211) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(22) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(212) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(10) },
    { Parser::Npda_::Transition_::SHIFT, 297, std::uint32_t(214) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(217) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(5) },
    { Parser::Npda_::Transition_::SHIFT, 297, std::uint32_t(216) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(217) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(218) },
    { Parser::Npda_::Transition_::SHIFT, 299, std::uint32_t(219) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(222) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(237) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 299, std::uint32_t(221) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(222) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(223) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(230) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(224) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 265, std::uint32_t(225) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(226) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(227) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(228) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(229) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(26) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(231) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 265, std::uint32_t(232) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(233) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(234) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(235) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(236) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(27) },
    { Parser::Npda_::Transition_::SHIFT, 298, std::uint32_t(238) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(241) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(22) },
    { Parser::Npda_::Transition_::SHIFT, 298, std::uint32_t(240) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(241) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(242) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(255) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(270) },
    { Parser::Npda_::Transition_::SHIFT, 302, std::uint32_t(243) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(246) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(23) },
    { Parser::Npda_::Transition_::SHIFT, 302, std::uint32_t(245) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(246) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(247) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(251) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(248) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 268, std::uint32_t(249) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(250) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(32) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(252) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 268, std::uint32_t(253) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(254) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(33) },
    { Parser::Npda_::Transition_::SHIFT, 300, std::uint32_t(256) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(259) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(268) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 300, std::uint32_t(258) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(259) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(260) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(264) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(261) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(262) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(263) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(265) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(266) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(267) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(29) },
    { Parser::Npda_::Transition_::SHIFT, 302, std::uint32_t(269) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(246) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(24) },
    { Parser::Npda_::Transition_::SHIFT, 301, std::uint32_t(271) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(274) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(289) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 301, std::uint32_t(273) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(274) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(275) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(282) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(276) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 267, std::uint32_t(277) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(278) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(279) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(280) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(281) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(30) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(283) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 267, std::uint32_t(284) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(285) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(286) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(287) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(288) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(31) },
    { Parser::Npda_::Transition_::SHIFT, 298, std::uint32_t(290) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(241) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(25) },
    { Parser::Npda_::Transition_::SHIFT, 303, std::uint32_t(292) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(295) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(363) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 303, std::uint32_t(294) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(295) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(296) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(315) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(338) },
    { Parser::Npda_::Transition_::SHIFT, 304, std::uint32_t(297) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(300) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(34) },
    { Parser::Npda_::Transition_::SHIFT, 304, std::uint32_t(299) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(300) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(301) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(308) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(302) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(303) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(304) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(305) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(306) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(307) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(37) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(309) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(310) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(311) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(312) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(313) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(314) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(38) },
    { Parser::Npda_::Transition_::SHIFT, 305, std::uint32_t(316) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(319) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(35) },
    { Parser::Npda_::Transition_::SHIFT, 305, std::uint32_t(318) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(319) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(320) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(329) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(321) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(322) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(323) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(324) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(325) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(326) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(327) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(328) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(39) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(330) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(331) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(332) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(333) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(334) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(335) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(336) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(337) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(40) },
    { Parser::Npda_::Transition_::SHIFT, 306, std::uint32_t(339) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(342) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(36) },
    { Parser::Npda_::Transition_::SHIFT, 306, std::uint32_t(341) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(342) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(343) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(353) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(344) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(345) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(346) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(347) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(348) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 286, std::uint32_t(349) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(350) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(351) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(352) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(41) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(354) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(355) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(356) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(357) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(358) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 286, std::uint32_t(359) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(360) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(361) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(362) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(42) },
    { Parser::Npda_::Transition_::SHIFT, 307, std::uint32_t(364) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(367) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(6) },
    { Parser::Npda_::Transition_::SHIFT, 307, std::uint32_t(366) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(367) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(368) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(372) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(369) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 273, std::uint32_t(370) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(371) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(43) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(373) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 273, std::uint32_t(374) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(375) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(44) },
    { Parser::Npda_::Transition_::SHIFT, 308, std::uint32_t(377) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(380) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(399) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 308, std::uint32_t(379) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(380) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(381) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(390) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(382) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 274, std::uint32_t(383) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(384) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(385) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(386) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(387) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(388) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(389) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(45) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(391) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 274, std::uint32_t(392) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(393) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(394) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(395) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 312, std::uint32_t(396) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(397) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(398) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(46) },
    { Parser::Npda_::Transition_::SHIFT, 309, std::uint32_t(400) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(403) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(7) },
    { Parser::Npda_::Transition_::SHIFT, 309, std::uint32_t(402) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(403) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(404) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(408) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(405) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 275, std::uint32_t(406) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(407) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(47) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(409) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 275, std::uint32_t(410) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(411) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(48) },
    { Parser::Npda_::Transition_::SHIFT, 310, std::uint32_t(413) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(416) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(435) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 310, std::uint32_t(415) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(416) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(417) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(426) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(418) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 276, std::uint32_t(419) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(420) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(421) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(422) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(423) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(424) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(425) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(49) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(427) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 276, std::uint32_t(428) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(429) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(430) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(431) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(432) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(433) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(434) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(50) },
    { Parser::Npda_::Transition_::SHIFT, 311, std::uint32_t(436) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(439) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(8) },
    { Parser::Npda_::Transition_::SHIFT, 311, std::uint32_t(438) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(439) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(440) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(444) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(441) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 277, std::uint32_t(442) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(443) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(51) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(445) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 277, std::uint32_t(446) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(447) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(52) },
    { Parser::Npda_::Transition_::SHIFT, 293, std::uint32_t(449) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 294, std::uint32_t(450) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(11) },
    { Parser::Npda_::Transition_::SHIFT, 258, std::uint32_t(451) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(3) }
};
std::size_t const Parser::Npda_::ms_transition_count_ = sizeof(Parser::Npda_::ms_transition_table_) / sizeof(*Parser::Npda_::ms_transition_table_);

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 82 "barf_preprocessor_parser.trison"

FiLoc const &Parser::GetFiLoc () const
{
    assert(m_scanner != NULL);
    return m_scanner->GetFiLoc();
}

bool Parser::ScannerDebugSpewIsEnabled () const
{
    return m_scanner->DebugSpewIsEnabled();
}

std::ostream *Parser::ScannerDebugSpewStream ()
{
    return m_scanner->DebugSpewStream();
}

void Parser::SetScannerDebugSpewStream (std::ostream *debug_spew_stream)
{
    m_scanner->SetDebugSpewStream(debug_spew_stream);
}

bool Parser::OpenFile (string const &input_filename)
{
    assert(m_scanner != NULL);
    ResetForNewInput();
    EmitExecutionMessage("opening file \"" + input_filename + "\" for input");
    bool scanner_open_file_succeeded = m_scanner->OpenFile(input_filename);
    if (scanner_open_file_succeeded)
        EmitExecutionMessage("opened file \"" + input_filename + "\" successfully");
    return scanner_open_file_succeeded;
}

void Parser::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    assert(m_scanner != NULL);
    ResetForNewInput();
    return m_scanner->OpenString(input_string, input_name, use_line_numbers);
}

void Parser::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    assert(m_scanner != NULL);
    ResetForNewInput();
    return m_scanner->OpenUsingStream(input_stream, input_name, use_line_numbers);
}

} // end of namespace Preprocessor
} // end of namespace Barf

#line 5449 "barf_preprocessor_parser.cpp"
