// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// barf_commonlang_scanner.cpp generated by reflex
// from barf_commonlang_scanner.reflex using reflex.cpp.targetspec and reflex.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "barf_commonlang_scanner.hpp"

#include <iostream>

#define REFLEX_CPP_DEBUG_SPEW_(spew_code) if (DebugSpew()) { spew_code; }


#line 117 "barf_commonlang_scanner.reflex"

#include <cstdlib>
#include <sstream>

#include "barf_ast.hpp"
#include "barf_util.hpp"

// #define SPEW(x) cerr << x << endl
#define SPEW(x)

namespace Barf {
namespace CommonLang {

ostream &operator << (ostream &stream, Scanner::Token::Type scanner_token_type)
{
    static string const s_scanner_token_type_string[Scanner::Token::COUNT_PLUS_0x100 - 0x100] =
    {
        "BAD_END_OF_FILE",
        "BAD_TOKEN",
        "CHAR_LITERAL",
        "DIRECTIVE_ADD_CODESPEC",
        "DIRECTIVE_ADD_OPTIONAL_DIRECTIVE",
        "DIRECTIVE_ADD_REQUIRED_DIRECTIVE",
        "DIRECTIVE_DEFAULT",
        "DIRECTIVE_DEFAULT_PARSE_NONTERMINAL",
        "DIRECTIVE_DUMB_CODE_BLOCK",
        "DIRECTIVE_ERROR",
        "DIRECTIVE_ID",
        "DIRECTIVE_LEFT",
        "DIRECTIVE_MACRO",
        "DIRECTIVE_NONASSOC",
        "DIRECTIVE_PREC",
        "DIRECTIVE_RIGHT",
        "DIRECTIVE_START_IN_SCANNER_MODE",
        "DIRECTIVE_STATE",
        "DIRECTIVE_STRICT_CODE_BLOCK",
        "DIRECTIVE_STRING",
        "DIRECTIVE_TARGET",
        "DIRECTIVE_TARGETS",
        "DIRECTIVE_TOKEN",
        "DIRECTIVE_TYPE",
        "DUMB_CODE_BLOCK",
        "END_OF_FILE",
        "END_PREAMBLE",
        "ID",
        "NEWLINE",
        "REGEX",
        "STRICT_CODE_BLOCK",
        "STRING_LITERAL"
    };
    if (scanner_token_type < 0x100)
    {
        assert(scanner_token_type >= 0);
        return stream << GetCharLiteral(Uint8(scanner_token_type));
    }
    else
    {
        assert(scanner_token_type < Scanner::Token::COUNT_PLUS_0x100);
        return stream << s_scanner_token_type_string[scanner_token_type - 0x100];
    }
}

bool Scanner::OpenFile (string const &input_filename)
{
    bool open_succeeded = InputBase::OpenFile(input_filename);
    if (open_succeeded)
        ResetForNewInput_();
    return open_succeeded;
}

void Scanner::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    InputBase::OpenString(input_string, input_name, use_line_numbers);
    ResetForNewInput_();
}

void Scanner::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    InputBase::OpenUsingStream(input_stream, input_name, use_line_numbers);
    ResetForNewInput_();
}

Scanner::Token::Type Scanner::ParseDirective (string const &accepted_string, Ast::Base **token)
{
    assert(token != NULL);
    assert(*token == NULL);

    if (accepted_string == "%add_codespec") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ADD_CODESPEC; }
    if (accepted_string == "%add_optional_directive") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE; }
    if (accepted_string == "%add_required_directive") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ADD_REQUIRED_DIRECTIVE; }
    if (accepted_string == "%default") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_DEFAULT; }
    if (accepted_string == "%dumb_code_block") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_DUMB_CODE_BLOCK; }
    if (accepted_string == "%error") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ERROR; }
    if (accepted_string == "%identifier") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ID; }
    if (accepted_string == "%left") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_LEFT; }
    if (accepted_string == "%macro") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_MACRO; }
    if (accepted_string == "%nonassoc") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_NONASSOC; }
    if (accepted_string == "%prec") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_PREC; }
    if (accepted_string == "%right") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_RIGHT; }
    if (accepted_string == "%default_parse_nonterminal") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_DEFAULT_PARSE_NONTERMINAL; }
    if (accepted_string == "%start_in_scanner_mode") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_START_IN_SCANNER_MODE; }
    if (accepted_string == "%scanner_mode") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_STATE; }
    if (accepted_string == "%strict_code_block") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_STRICT_CODE_BLOCK; }
    if (accepted_string == "%string") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_STRING; }
    if (accepted_string == "%target") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TARGET; }
    if (accepted_string == "%targets") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TARGETS; }
    if (accepted_string == "%token") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TOKEN; }
    if (accepted_string == "%type") { *token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TYPE; }

    EmitError(GetFiLoc(), "invalid directive \"" + accepted_string + "\"");
    return Token::BAD_TOKEN;
}

#line 128 "barf_commonlang_scanner.cpp"

Scanner::Scanner ()
    :
    ReflexCpp_::Scanner_(
        ms_state_table_,
        ms_state_count_,
        ms_transition_table_,
        ms_transition_count_,
        ms_accept_handler_count_,
        static_cast<ReflexCpp_::InputBuffer_::IsInputAtEndMethod_>(&Scanner::IsInputAtEnd_),
        static_cast<ReflexCpp_::InputBuffer_::ReadNextAtomMethod_>(&Scanner::ReadNextAtom_))
{
    // one-time initializations
    DebugSpew(false);
    // per-input initializations
    ResetForNewInput_();

}

Scanner::~Scanner ()
{
}

Scanner::Mode::Name Scanner::ScannerMode () const
{
    assert(InitialState_() != NULL);
    ReflexCpp_::Size_ initial_node_index = InitialState_() - ms_state_table_;
    assert(initial_node_index < ms_state_count_);
    switch (initial_node_index)
    {
        default: assert(false && "invalid initial node index -- this should never happen"); return Mode::START_;
        case 0: return Mode::BLOCK_COMMENT;
        case 6: return Mode::CHAR_LITERAL_END;
        case 13: return Mode::CHAR_LITERAL_GUTS;
        case 26: return Mode::CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK;
        case 33: return Mode::DUMB_CODE_BLOCK;
        case 39: return Mode::MAIN;
        case 61: return Mode::REGULAR_EXPRESSION;
        case 72: return Mode::REGULAR_EXPRESSION_BRACKET_EXPRESSION;
        case 82: return Mode::STRICT_CODE_BLOCK;
        case 93: return Mode::STRING_LITERAL_GUTS;
        case 108: return Mode::STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK;
    }
}

void Scanner::ScannerMode (Mode::Name mode)
{
    assert(
        mode == Mode::BLOCK_COMMENT ||
        mode == Mode::CHAR_LITERAL_END ||
        mode == Mode::CHAR_LITERAL_GUTS ||
        mode == Mode::CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK ||
        mode == Mode::DUMB_CODE_BLOCK ||
        mode == Mode::MAIN ||
        mode == Mode::REGULAR_EXPRESSION ||
        mode == Mode::REGULAR_EXPRESSION_BRACKET_EXPRESSION ||
        mode == Mode::STRICT_CODE_BLOCK ||
        mode == Mode::STRING_LITERAL_GUTS ||
        mode == Mode::STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK ||
        (false && "invalid Mode::Name"));
    InitialState_(ms_state_table_ + mode);
    REFLEX_CPP_DEBUG_SPEW_(std::cerr << "*** scanner: transitioning to mode ")
    if (false) { }
    else if (mode == Mode::BLOCK_COMMENT) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "BLOCK_COMMENT") }
    else if (mode == Mode::CHAR_LITERAL_END) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "CHAR_LITERAL_END") }
    else if (mode == Mode::CHAR_LITERAL_GUTS) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "CHAR_LITERAL_GUTS") }
    else if (mode == Mode::CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK") }
    else if (mode == Mode::DUMB_CODE_BLOCK) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "DUMB_CODE_BLOCK") }
    else if (mode == Mode::MAIN) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "MAIN") }
    else if (mode == Mode::REGULAR_EXPRESSION) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "REGULAR_EXPRESSION") }
    else if (mode == Mode::REGULAR_EXPRESSION_BRACKET_EXPRESSION) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "REGULAR_EXPRESSION_BRACKET_EXPRESSION") }
    else if (mode == Mode::STRICT_CODE_BLOCK) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "STRICT_CODE_BLOCK") }
    else if (mode == Mode::STRING_LITERAL_GUTS) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "STRING_LITERAL_GUTS") }
    else if (mode == Mode::STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK) { REFLEX_CPP_DEBUG_SPEW_(std::cerr << "STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK") }
    REFLEX_CPP_DEBUG_SPEW_(std::cerr << std::endl)
    assert(ScannerMode() == mode);
}

Scanner::Token::Type Scanner::Scan (
#line 82 "barf_commonlang_scanner.reflex"
 Ast::Base **token 
#line 210 "barf_commonlang_scanner.cpp"
)
{

#line 230 "barf_commonlang_scanner.reflex"

    assert(token != NULL);
    assert(*token == NULL);

#line 219 "barf_commonlang_scanner.cpp"

    std::string accepted_string;
    // this is the main scanner loop.  it only breaks when an accept handler
    // returns or after the unmatched character handler, if certain conditions
    // exist (see comments below).
    while (true)
    {
        bool was_at_end_of_input_ = IsAtEndOfInput();

        ReflexCpp_::Uint32_ accept_handler_index_ = RunDfa_(accepted_string);
        // if no valid accept_handler_index_ was returned, then accepted_string
        // was filled with the first unaccepted input atom (i.e. the rejected
        // atom).  we'll call the HandleUnmatchedCharacter_ method on it.
        if (accept_handler_index_ >= ms_accept_handler_count_)
        {
            // if we were already at the end of input and no
            // rule was matched, break out of the loop.
            if (was_at_end_of_input_)
                break;

            assert(accepted_string.length() == 1);
            ReflexCpp_::Uint8_ rejected_atom = accepted_string[0];
            REFLEX_CPP_DEBUG_SPEW_(
                std::cerr << "*** scanner: rejecting atom '";
                DebugPrintAtom_(rejected_atom);
                std::cerr << '\'' << std::endl)

            // execute the rejected-atom-handling actions.  the rejected atom
            // is in rejected_atom.  the loop is so a break statement inside
            // rejection_actions doesn't break out of the main scanner loop.
            do
            {

#line 254 "barf_commonlang_scanner.reflex"

    EmitError(GetFiLoc(), "unrecognized character " + GetCharLiteral(rejected_atom));

#line 257 "barf_commonlang_scanner.cpp"

            }
            while (false);
        }
        // otherwise, call the appropriate accept handler code.
        else
        {
            REFLEX_CPP_DEBUG_SPEW_(
                std::cerr << "*** scanner: accepting string ";
                DebugPrintString_(accepted_string);
                std::cerr << std::endl)
            // execute the appropriate accept handler.
            // the accepted string is in accepted_string.
            switch (accept_handler_index_)
            {
                case 0:
                {

#line 420 "barf_commonlang_scanner.reflex"

        SPEW("BLOCK_COMMENT - (\\*/) = " << GetStringLiteral(accepted_string));
        if (*token != NULL)
            Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
        ScannerMode(m_return_state);
    
#line 283 "barf_commonlang_scanner.cpp"

                }
                break;

                case 1:
                {

#line 428 "barf_commonlang_scanner.reflex"

        SPEW("BLOCK_COMMENT - ([^*]+|\\*) = " << GetStringLiteral(accepted_string));
        if (*token != NULL)
            Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
        IncrementLineNumber(GetNewlineCount(accepted_string));
    
#line 298 "barf_commonlang_scanner.cpp"

                }
                break;

                case 2:
                {

#line 436 "barf_commonlang_scanner.reflex"

        SPEW("BLOCK_COMMENT - (\\z) = " << GetStringLiteral(accepted_string));
        EmitWarning(GetFiLoc(), "unterminated block comment");
        return Token::END_OF_FILE;
    
#line 312 "barf_commonlang_scanner.cpp"

                }
                break;

                case 3:
                {

#line 511 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_END - (') - accepted_string = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        ScannerMode(Mode::MAIN);
        return Token::CHAR_LITERAL;
    
#line 327 "barf_commonlang_scanner.cpp"

                }
                break;

                case 4:
                {

#line 519 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_END - (\\\\?\\z) - accepted_string = " << GetStringLiteral(accepted_string));
        EmitError(GetFiLoc(), "unterminated character literal");
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        ScannerMode(Mode::MAIN);
        return Token::END_OF_FILE;
    
#line 345 "barf_commonlang_scanner.cpp"

                }
                break;

                case 5:
                {

#line 530 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_END - ({ANYTHING}) = " << GetStringLiteral(accepted_string));
        EmitError(GetFiLoc(), "malformed character literal");
        if (accepted_string[0] == '\n')
            IncrementLineNumber();
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        ScannerMode(Mode::MAIN);
        return Token::BAD_TOKEN;
    
#line 365 "barf_commonlang_scanner.cpp"

                }
                break;

                case 6:
                {

#line 446 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_GUTS - ({OCT_CHAR}) = " << GetStringLiteral(accepted_string));
        assert(accepted_string.length() >= 3);
        assert(accepted_string[0] == '\\');
        assert(accepted_string[1] == '0');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 8);
        if (value >= 0x100)
            EmitError(GetFiLoc(), "octal character literal value out of range (" + accepted_string + ")");
        *token = new Ast::Char(Uint8(value), GetFiLoc());
        ScannerMode(Mode::CHAR_LITERAL_END);
    
#line 385 "barf_commonlang_scanner.cpp"

                }
                break;

                case 7:
                {

#line 459 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_GUTS - ({HEX_CHAR}) = " << GetStringLiteral(accepted_string));
        assert(accepted_string.length() >= 3);
        assert(accepted_string[0] == '\\');
        assert(accepted_string[1] == 'x');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 16);
        if (value >= 0x100)
            EmitError(GetFiLoc(), "hexadecimal character literal value out of range (" + accepted_string + ")");
        *token = new Ast::Char(Uint8(value), GetFiLoc());
        ScannerMode(Mode::CHAR_LITERAL_END);
    
#line 405 "barf_commonlang_scanner.cpp"

                }
                break;

                case 8:
                {

#line 472 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_GUTS - ({CHAR_ESC_CHAR}) = " << GetStringLiteral(accepted_string));
        assert(accepted_string.length() == 2);
        assert(accepted_string[0] == '\\');
        Ast::Char *ch = new Ast::Char(Uint8(accepted_string[1]), GetFiLoc());
        ch->Escape();
        *token = ch;
        ScannerMode(Mode::CHAR_LITERAL_END);
    
#line 423 "barf_commonlang_scanner.cpp"

                }
                break;

                case 9:
                {

#line 483 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_GUTS - ({CHAR_NORMAL_CHAR}) = " << GetStringLiteral(accepted_string));
        assert(accepted_string.length() == 1);
        *token = new Ast::Char(Uint8(accepted_string[0]), GetFiLoc());
        ScannerMode(Mode::CHAR_LITERAL_END);
    
#line 438 "barf_commonlang_scanner.cpp"

                }
                break;

                case 10:
                {

#line 491 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_GUTS - (\\\\?\\z) = " << GetStringLiteral(accepted_string));
        EmitError(GetFiLoc(), "unterminated character literal");
        return Token::END_OF_FILE;
    
#line 452 "barf_commonlang_scanner.cpp"

                }
                break;

                case 11:
                {

#line 498 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_GUTS - ({ANYTHING}) = " << GetStringLiteral(accepted_string));
        EmitError(GetFiLoc(), "unexpected character " + GetCharLiteral(accepted_string[0]) + " in character literal");
        if (accepted_string[0] == '\n')
            IncrementLineNumber();
        *token = new Ast::Char(Uint8(accepted_string[0]), GetFiLoc());
        ScannerMode(Mode::CHAR_LITERAL_END);
    
#line 469 "barf_commonlang_scanner.cpp"

                }
                break;

                case 12:
                {

#line 811 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK - (([^'\\\\]|\\\\{ANYTHING})*') = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        Dsc<Ast::StrictCodeBlock *>(*token)->AppendText(accepted_string);
        ScannerMode(Mode::STRICT_CODE_BLOCK);
    
#line 485 "barf_commonlang_scanner.cpp"

                }
                break;

                case 13:
                {

#line 820 "barf_commonlang_scanner.reflex"

        SPEW("CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK - (([^'\\\\]|\\\\{ANYTHING})*\\\\?\\z) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        EmitError(GetFiLoc(), "unterminated character literal in { } style code block");
        IncrementLineNumber(GetNewlineCount(accepted_string));
        return Token::END_OF_FILE;
    
#line 503 "barf_commonlang_scanner.cpp"

                }
                break;

                case 14:
                {

#line 708 "barf_commonlang_scanner.reflex"

        SPEW("DUMB_CODE_BLOCK - (%\\}) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        ScannerMode(Mode::MAIN);
        return Token::DUMB_CODE_BLOCK;
    
#line 518 "barf_commonlang_scanner.cpp"

                }
                break;

                case 15:
                {

#line 716 "barf_commonlang_scanner.reflex"

        SPEW("DUMB_CODE_BLOCK - ([^%]+) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
    
#line 533 "barf_commonlang_scanner.cpp"

                }
                break;

                case 16:
                {

#line 724 "barf_commonlang_scanner.reflex"

        SPEW("DUMB_CODE_BLOCK - (\\z) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        EmitError(GetFiLoc(), "unterminated %{ %} style code block");
        return Token::END_OF_FILE;
    
#line 550 "barf_commonlang_scanner.cpp"

                }
                break;

                case 17:
                {

#line 317 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (/\\*) = " << GetStringLiteral(accepted_string));
        m_return_state = Mode::MAIN;
        ScannerMode(Mode::BLOCK_COMMENT);
    
#line 564 "barf_commonlang_scanner.cpp"

                }
                break;

                case 18:
                {

#line 324 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (//.*) = " << GetStringLiteral(accepted_string));
    
#line 576 "barf_commonlang_scanner.cpp"

                }
                break;

                case 19:
                {

#line 329 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (') = " << GetStringLiteral(accepted_string));
        ScannerMode(Mode::CHAR_LITERAL_GUTS);
    
#line 589 "barf_commonlang_scanner.cpp"

                }
                break;

                case 20:
                {

#line 335 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (\") = " << GetStringLiteral(accepted_string));
        *token = new Ast::String(GetFiLoc());
        ScannerMode(Mode::STRING_LITERAL_GUTS);
    
#line 603 "barf_commonlang_scanner.cpp"

                }
                break;

                case 21:
                {

#line 342 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (\\() = " << GetStringLiteral(accepted_string));
        *token = new Ast::String(GetFiLoc());
        ScannerMode(Mode::REGULAR_EXPRESSION);
    
#line 617 "barf_commonlang_scanner.cpp"

                }
                break;

                case 22:
                {

#line 349 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (%\\{) = " << GetStringLiteral(accepted_string));
        *token = new Ast::DumbCodeBlock(GetFiLoc());
        ScannerMode(Mode::DUMB_CODE_BLOCK);
    
#line 631 "barf_commonlang_scanner.cpp"

                }
                break;

                case 23:
                {

#line 356 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (\\{) = " << GetStringLiteral(accepted_string));
        *token = new Ast::StrictCodeBlock(GetFiLoc());
        ScannerMode(Mode::STRICT_CODE_BLOCK);
    
#line 645 "barf_commonlang_scanner.cpp"

                }
                break;

                case 24:
                {

#line 363 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (%{ID}) = " << GetStringLiteral(accepted_string));
        return Scanner::ParseDirective(accepted_string, token);
    
#line 658 "barf_commonlang_scanner.cpp"

                }
                break;

                case 25:
                {

#line 369 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (%%) = " << GetStringLiteral(accepted_string));
        *token = new Ast::ThrowAway(GetFiLoc());
        m_is_in_preamble = false;
        return Token::END_PREAMBLE;
    
#line 673 "barf_commonlang_scanner.cpp"

                }
                break;

                case 26:
                {

#line 377 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - ({ID}) = " << GetStringLiteral(accepted_string));
        *token = new Ast::Id(accepted_string, GetFiLoc());
        return Token::ID;
    
#line 687 "barf_commonlang_scanner.cpp"

                }
                break;

                case 27:
                {

#line 384 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - ({OPERATOR}) = " << GetStringLiteral(accepted_string));
        return Token::Type(accepted_string[0]);
    
#line 700 "barf_commonlang_scanner.cpp"

                }
                break;

                case 28:
                {

#line 390 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - ({WHITESPACE}) = " << GetStringLiteral(accepted_string));
        // ignore all whitespace
    
#line 713 "barf_commonlang_scanner.cpp"

                }
                break;

                case 29:
                {

#line 396 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - ({NEWLINE}) = " << GetStringLiteral(accepted_string));
        IncrementLineNumber();
        if (m_is_in_preamble)
            return Token::NEWLINE;
    
#line 728 "barf_commonlang_scanner.cpp"

                }
                break;

                case 30:
                {

#line 404 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (\\z) = " << GetStringLiteral(accepted_string));
        return Token::END_OF_FILE;
    
#line 741 "barf_commonlang_scanner.cpp"

                }
                break;

                case 31:
                {

#line 410 "barf_commonlang_scanner.reflex"

        SPEW("MAIN - (.) = " << GetStringLiteral(accepted_string));
        EmitError(GetFiLoc(), "unexpected character " + GetCharLiteral(accepted_string[0]));
        return Token::BAD_TOKEN;
    
#line 755 "barf_commonlang_scanner.cpp"

                }
                break;

                case 32:
                {

#line 617 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION - (\\)) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        if (m_regex_paren_level == 0)
        {
            ScannerMode(Mode::MAIN);
            return Token::REGEX;
        }
        --m_regex_paren_level;
        Dsc<Ast::String *>(*token)->AppendText(accepted_string);
    
#line 775 "barf_commonlang_scanner.cpp"

                }
                break;

                case 33:
                {

#line 630 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION - (\\() = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        ++m_regex_paren_level;
        Dsc<Ast::String *>(*token)->AppendText(accepted_string);
    
#line 790 "barf_commonlang_scanner.cpp"

                }
                break;

                case 34:
                {

#line 638 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION - (\\[) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::String *>(*token)->AppendText(accepted_string);
        m_regex_bracket_level = 0;
        ScannerMode(Mode::REGULAR_EXPRESSION_BRACKET_EXPRESSION);
    
#line 806 "barf_commonlang_scanner.cpp"

                }
                break;

                case 35:
                {

#line 647 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION - (([^()\\[\\]{}\\\\)|\\\\{ANYTHING})+) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        Dsc<Ast::String *>(*token)->AppendText(accepted_string);
    
#line 821 "barf_commonlang_scanner.cpp"

                }
                break;

                case 36:
                {

#line 655 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION - (\\\\?\\z) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        EmitError(GetFiLoc(), "unterminated regular expression");
        return Token::END_OF_FILE;
    
#line 838 "barf_commonlang_scanner.cpp"

                }
                break;

                case 37:
                {

#line 668 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION_BRACKET_EXPRESSION - (\\]) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::String *>(*token)->AppendText(accepted_string);
        if (m_regex_bracket_level == 0)
            ScannerMode(Mode::REGULAR_EXPRESSION);
        else
            --m_regex_bracket_level;
    
#line 856 "barf_commonlang_scanner.cpp"

                }
                break;

                case 38:
                {

#line 679 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION_BRACKET_EXPRESSION - (\\[) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::String *>(*token)->AppendText(accepted_string);
        ++m_regex_bracket_level;
    
#line 871 "barf_commonlang_scanner.cpp"

                }
                break;

                case 39:
                {

#line 687 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION_BRACKET_EXPRESSION - (([^\\[\\]\\\\]|\\\\{ANYTHING})+) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        Dsc<Ast::String *>(*token)->AppendText(accepted_string);
    
#line 886 "barf_commonlang_scanner.cpp"

                }
                break;

                case 40:
                {

#line 695 "barf_commonlang_scanner.reflex"

        SPEW("REGULAR_EXPRESSION_BRACKET_EXPRESSION - (\\\\?\\z) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        EmitError(GetFiLoc(), "unterminated bracket expression inside regular expression");
        return Token::END_OF_FILE;
    
#line 903 "barf_commonlang_scanner.cpp"

                }
                break;

                case 41:
                {

#line 737 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - (\\}) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        if (m_code_block_bracket_level == 0)
        {
            ScannerMode(Mode::MAIN);
            return Token::STRICT_CODE_BLOCK;
        }
        --m_code_block_bracket_level;
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
    
#line 923 "barf_commonlang_scanner.cpp"

                }
                break;

                case 42:
                {

#line 750 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - (\\{) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
        ++m_code_block_bracket_level;
    
#line 938 "barf_commonlang_scanner.cpp"

                }
                break;

                case 43:
                {

#line 758 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - (') = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
        ScannerMode(Mode::CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK);
    
#line 953 "barf_commonlang_scanner.cpp"

                }
                break;

                case 44:
                {

#line 766 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - (\") = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
        ScannerMode(Mode::STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK);
    
#line 968 "barf_commonlang_scanner.cpp"

                }
                break;

                case 45:
                {

#line 774 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - (/[*]) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
        m_return_state = Mode::STRICT_CODE_BLOCK;
        ScannerMode(Mode::BLOCK_COMMENT);
    
#line 984 "barf_commonlang_scanner.cpp"

                }
                break;

                case 46:
                {

#line 783 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - (//.*) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
    
#line 998 "barf_commonlang_scanner.cpp"

                }
                break;

                case 47:
                {

#line 790 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - ([^{}'\"/]+|.) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        Dsc<Ast::CodeBlock *>(*token)->AppendText(accepted_string);
    
#line 1013 "barf_commonlang_scanner.cpp"

                }
                break;

                case 48:
                {

#line 798 "barf_commonlang_scanner.reflex"

        SPEW("STRICT_CODE_BLOCK - (\\z) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        EmitError(GetFiLoc(), "unterminated { } style code block");
        return Token::END_OF_FILE;
    
#line 1030 "barf_commonlang_scanner.cpp"

                }
                break;

                case 49:
                {

#line 546 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_GUTS - ({OCT_CHAR}) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        assert(accepted_string.length() >= 3);
        assert(accepted_string[0] == '\\');
        assert(accepted_string[1] == '0');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 8);
        if (value >= 0x100)
            EmitError(GetFiLoc(), "octal character literal value out of range (" + accepted_string + ")");
        Dsc<Ast::String *>(*token)->AppendChar(Uint8(value));
    
#line 1050 "barf_commonlang_scanner.cpp"

                }
                break;

                case 50:
                {

#line 559 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_GUTS - ({HEX_CHAR}) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        assert(accepted_string.length() >= 3);
        assert(accepted_string[0] == '\\');
        assert(accepted_string[1] == 'x');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 16);
        if (value >= 0x100)
            EmitError(GetFiLoc(), "hexadecimal character literal value out of range (" + accepted_string + ")");
        Dsc<Ast::String *>(*token)->AppendChar(Uint8(value));
    
#line 1070 "barf_commonlang_scanner.cpp"

                }
                break;

                case 51:
                {

#line 572 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_GUTS - ({STRING_ESC_CHAR}) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        assert(accepted_string.length() == 2);
        assert(accepted_string[0] == '\\');
        Dsc<Ast::String *>(*token)->AppendChar(GetEscapedChar(Uint8(accepted_string[1])));
    
#line 1086 "barf_commonlang_scanner.cpp"

                }
                break;

                case 52:
                {

#line 581 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_GUTS - ({STRING_NORMAL_CHAR}+) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        Dsc<Ast::TextBase *>(*token)->AppendText(accepted_string);
    
#line 1101 "barf_commonlang_scanner.cpp"

                }
                break;

                case 53:
                {

#line 589 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_GUTS - (\") = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        ScannerMode(Mode::MAIN);
        return Token::STRING_LITERAL;
    
#line 1116 "barf_commonlang_scanner.cpp"

                }
                break;

                case 54:
                {

#line 597 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_GUTS - (\\\\?\\z) = " << GetStringLiteral(accepted_string));
        EmitError(GetFiLoc(), "unterminated string literal");
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        return Token::END_OF_FILE;
    
#line 1133 "barf_commonlang_scanner.cpp"

                }
                break;

                case 55:
                {

#line 607 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_GUTS - ({ANYTHING}) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        EmitError(GetFiLoc(), "ignoring unexpected character " + GetCharLiteral(accepted_string[0]) + " in string literal");
    
#line 1147 "barf_commonlang_scanner.cpp"

                }
                break;

                case 56:
                {

#line 834 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK - (([^\"\\\\]|\\\\{ANYTHING})*\") = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        Dsc<Ast::StrictCodeBlock *>(*token)->AppendText(accepted_string);
        IncrementLineNumber(GetNewlineCount(accepted_string));
        ScannerMode(Mode::STRICT_CODE_BLOCK);
    
#line 1163 "barf_commonlang_scanner.cpp"

                }
                break;

                case 57:
                {

#line 843 "barf_commonlang_scanner.reflex"

        SPEW("STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK - (([^\"\\\\]|\\\\{ANYTHING}))*\\\\?\\z) = " << GetStringLiteral(accepted_string));
        assert(*token != NULL);
        delete *token;
        *token = NULL;
        EmitError(GetFiLoc(), "unterminated string literal in { } style code block");
        IncrementLineNumber(GetNewlineCount(accepted_string));
        return Token::END_OF_FILE;
    
#line 1181 "barf_commonlang_scanner.cpp"

                }
                break;

                default: assert(false && "this should never happen"); break;
            }
        }
    }


#line 234 "barf_commonlang_scanner.reflex"

    assert(false && "you didn't handle EOF properly");
    return Token::BAD_END_OF_FILE;

#line 1197 "barf_commonlang_scanner.cpp"
}

bool Scanner::IsInputAtEnd_ ()
{

#line 248 "barf_commonlang_scanner.reflex"

    return In().peek() == char_traits<char>::eof();

#line 1207 "barf_commonlang_scanner.cpp"
}

ReflexCpp_::Uint8_ Scanner::ReadNextAtom_ ()
{

#line 251 "barf_commonlang_scanner.reflex"

    return In().get();

#line 1217 "barf_commonlang_scanner.cpp"
}

void Scanner::ResetForNewInput_ ()
{
    ReflexCpp_::Scanner_::ResetForNewInput_(ms_state_table_ + Mode::START_);


#line 257 "barf_commonlang_scanner.reflex"

    m_is_in_preamble = true;
    m_regex_paren_level = 0;
    m_code_block_bracket_level = 0;

#line 1231 "barf_commonlang_scanner.cpp"
}

void Scanner::DebugPrintAtom_ (ReflexCpp_::Uint8_ atom)
{
    if (atom == '\\')                    std::cerr << "\\\\";
    else if (atom == '"')                std::cerr << "\\\"";
    else if (atom >= ' ' && atom <= '~') std::cerr << atom;
    else if (atom == '\n')               std::cerr << "\\n";
    else if (atom == '\t')               std::cerr << "\\t";
    else if (atom == '\0')               std::cerr << "\\0";
    else
    {
        std::cerr.width(2);
        std::cerr << "\\x" << std::hex << std::uppercase << ReflexCpp_::Uint16_(atom);
        std::cerr.width(1);
    }
}

void Scanner::DebugPrintString_ (std::string const &s)
{
    // save the existing std::cerr properties for later restoration
    std::ios_base::fmtflags saved_stream_flags = std::cerr.flags();
    char saved_stream_fill = std::cerr.fill();
    std::streamsize saved_stream_width = std::cerr.width();
    std::streamsize saved_stream_precision = std::cerr.precision();

    // clear all format flags to a neutral state
    std::cerr.unsetf(
        std::ios_base::boolalpha|std::ios_base::dec|std::ios_base::fixed|
        std::ios_base::hex|std::ios_base::internal|std::ios_base::left|
        std::ios_base::oct|std::ios_base::right|std::ios_base::scientific|
        std::ios_base::showbase|std::ios_base::showpoint|std::ios_base::showpos|
        std::ios_base::skipws|std::ios_base::unitbuf|std::ios_base::uppercase|
        std::ios_base::adjustfield|std::ios_base::basefield|std::ios_base::floatfield);
    // the '0' char is used hex escape chars, which always have width 2
    std::cerr.fill('0');

    std::cerr << '"';
    for (std::string::size_type i = 0; i < s.size(); ++i)
        DebugPrintAtom_(s[i]);
    std::cerr << '"';

    // restore the saved std::cerr properties
    std::cerr.setf(saved_stream_flags);
    std::cerr.fill(saved_stream_fill);
    std::cerr.width(saved_stream_width);
    std::cerr.precision(saved_stream_precision);
}

// the order of the states indicates priority (only for accept states).
// the lower the state's index in this array, the higher its priority.
ReflexCpp_::Scanner_::DfaState_ const Scanner::ms_state_table_[] =
{
    { 58, 2, ms_transition_table_+0 },
    { 58, 3, ms_transition_table_+2 },
    { 1, 2, ms_transition_table_+5 },
    { 1, 1, ms_transition_table_+7 },
    { 0, 0, ms_transition_table_+8 },
    { 2, 3, ms_transition_table_+8 },
    { 58, 2, ms_transition_table_+11 },
    { 58, 5, ms_transition_table_+13 },
    { 5, 0, ms_transition_table_+18 },
    { 3, 0, ms_transition_table_+18 },
    { 5, 2, ms_transition_table_+18 },
    { 4, 0, ms_transition_table_+20 },
    { 4, 5, ms_transition_table_+20 },
    { 58, 2, ms_transition_table_+25 },
    { 58, 9, ms_transition_table_+27 },
    { 11, 0, ms_transition_table_+36 },
    { 9, 0, ms_transition_table_+36 },
    { 11, 2, ms_transition_table_+36 },
    { 11, 5, ms_transition_table_+38 },
    { 8, 0, ms_transition_table_+43 },
    { 8, 1, ms_transition_table_+43 },
    { 6, 1, ms_transition_table_+44 },
    { 8, 3, ms_transition_table_+45 },
    { 7, 3, ms_transition_table_+48 },
    { 10, 5, ms_transition_table_+51 },
    { 10, 9, ms_transition_table_+56 },
    { 58, 2, ms_transition_table_+65 },
    { 58, 5, ms_transition_table_+67 },
    { 12, 0, ms_transition_table_+72 },
    { 58, 2, ms_transition_table_+72 },
    { 58, 1, ms_transition_table_+74 },
    { 13, 1, ms_transition_table_+75 },
    { 13, 5, ms_transition_table_+76 },
    { 58, 2, ms_transition_table_+81 },
    { 58, 3, ms_transition_table_+83 },
    { 15, 2, ms_transition_table_+86 },
    { 15, 1, ms_transition_table_+88 },
    { 14, 0, ms_transition_table_+89 },
    { 16, 3, ms_transition_table_+89 },
    { 58, 2, ms_transition_table_+92 },
    { 58, 24, ms_transition_table_+94 },
    { 31, 0, ms_transition_table_+118 },
    { 28, 0, ms_transition_table_+118 },
    { 29, 0, ms_transition_table_+118 },
    { 20, 0, ms_transition_table_+118 },
    { 31, 4, ms_transition_table_+118 },
    { 25, 0, ms_transition_table_+122 },
    { 24, 4, ms_transition_table_+122 },
    { 58, 4, ms_transition_table_+126 },
    { 22, 0, ms_transition_table_+130 },
    { 19, 0, ms_transition_table_+130 },
    { 21, 0, ms_transition_table_+130 },
    { 27, 0, ms_transition_table_+130 },
    { 31, 2, ms_transition_table_+130 },
    { 17, 0, ms_transition_table_+132 },
    { 18, 2, ms_transition_table_+132 },
    { 26, 4, ms_transition_table_+134 },
    { 26, 4, ms_transition_table_+138 },
    { 58, 4, ms_transition_table_+142 },
    { 23, 0, ms_transition_table_+146 },
    { 30, 24, ms_transition_table_+146 },
    { 58, 2, ms_transition_table_+170 },
    { 58, 7, ms_transition_table_+172 },
    { 35, 4, ms_transition_table_+179 },
    { 58, 1, ms_transition_table_+183 },
    { 33, 0, ms_transition_table_+184 },
    { 32, 0, ms_transition_table_+184 },
    { 34, 0, ms_transition_table_+184 },
    { 58, 2, ms_transition_table_+184 },
    { 58, 1, ms_transition_table_+186 },
    { 36, 1, ms_transition_table_+187 },
    { 36, 7, ms_transition_table_+188 },
    { 58, 2, ms_transition_table_+195 },
    { 58, 5, ms_transition_table_+197 },
    { 39, 3, ms_transition_table_+202 },
    { 58, 1, ms_transition_table_+205 },
    { 38, 0, ms_transition_table_+206 },
    { 58, 2, ms_transition_table_+206 },
    { 58, 1, ms_transition_table_+208 },
    { 40, 1, ms_transition_table_+209 },
    { 37, 0, ms_transition_table_+210 },
    { 40, 5, ms_transition_table_+210 },
    { 58, 2, ms_transition_table_+215 },
    { 58, 13, ms_transition_table_+217 },
    { 47, 6, ms_transition_table_+230 },
    { 44, 0, ms_transition_table_+236 },
    { 43, 0, ms_transition_table_+236 },
    { 47, 2, ms_transition_table_+236 },
    { 45, 0, ms_transition_table_+238 },
    { 46, 2, ms_transition_table_+238 },
    { 42, 0, ms_transition_table_+240 },
    { 41, 0, ms_transition_table_+240 },
    { 48, 13, ms_transition_table_+240 },
    { 58, 2, ms_transition_table_+253 },
    { 58, 9, ms_transition_table_+255 },
    { 55, 0, ms_transition_table_+264 },
    { 52, 4, ms_transition_table_+264 },
    { 52, 4, ms_transition_table_+268 },
    { 53, 0, ms_transition_table_+272 },
    { 55, 2, ms_transition_table_+272 },
    { 55, 5, ms_transition_table_+274 },
    { 51, 0, ms_transition_table_+279 },
    { 51, 1, ms_transition_table_+279 },
    { 49, 1, ms_transition_table_+280 },
    { 51, 3, ms_transition_table_+281 },
    { 50, 3, ms_transition_table_+284 },
    { 54, 5, ms_transition_table_+287 },
    { 54, 9, ms_transition_table_+292 },
    { 58, 2, ms_transition_table_+301 },
    { 58, 5, ms_transition_table_+303 },
    { 56, 0, ms_transition_table_+308 },
    { 58, 2, ms_transition_table_+308 },
    { 58, 1, ms_transition_table_+310 },
    { 57, 1, ms_transition_table_+311 },
    { 57, 5, ms_transition_table_+312 }
};
ReflexCpp_::Size_ const Scanner::ms_state_count_ = sizeof(Scanner::ms_state_table_) / sizeof(ReflexCpp_::Scanner_::DfaState_);

ReflexCpp_::Scanner_::DfaTransition_ const Scanner::ms_transition_table_[] =
{
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+1 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+5 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 42, 42, ms_state_table_+3 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 41, ms_state_table_+2 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 43, 255, ms_state_table_+2 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 41, ms_state_table_+2 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 43, 255, ms_state_table_+2 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 47, 47, ms_state_table_+4 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 42, 42, ms_state_table_+3 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 41, ms_state_table_+2 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 43, 255, ms_state_table_+2 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+7 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+12 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+9 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+10 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 38, ms_state_table_+8 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 91, ms_state_table_+8 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 255, ms_state_table_+8 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+8 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+11 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+9 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+10 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 38, ms_state_table_+8 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 91, ms_state_table_+8 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 255, ms_state_table_+8 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+14 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+25 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+17 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 31, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 38, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 91, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+18 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+24 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+20 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 120, 120, ms_state_table_+22 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 47, ms_state_table_+19 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 119, ms_state_table_+19 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 121, 126, ms_state_table_+19 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 55, ms_state_table_+21 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 55, ms_state_table_+21 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+23 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 70, ms_state_table_+23 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 102, ms_state_table_+23 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+23 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 70, ms_state_table_+23 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 102, ms_state_table_+23 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+20 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 120, 120, ms_state_table_+22 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 47, ms_state_table_+19 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 119, ms_state_table_+19 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 121, 126, ms_state_table_+19 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+17 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 31, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 38, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 91, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+16 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+15 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+32 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+28 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+29 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 38, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 91, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 255, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+30 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+31 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+28 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+29 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 38, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 91, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 255, ms_state_table_+27 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+34 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+38 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 37, 37, ms_state_table_+36 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 36, ms_state_table_+35 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 38, 255, ms_state_table_+35 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 36, ms_state_table_+35 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 38, 255, ms_state_table_+35 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 125, 125, ms_state_table_+37 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 37, 37, ms_state_table_+36 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 36, ms_state_table_+35 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 38, 255, ms_state_table_+35 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+40 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+60 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 9, 9, ms_state_table_+42 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 10, 10, ms_state_table_+43 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 32, 32, ms_state_table_+42 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 33, 33, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+44 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 37, 37, ms_state_table_+45 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 38, 38, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+50 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 40, 40, ms_state_table_+51 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 46, 46, ms_state_table_+52 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 47, 47, ms_state_table_+53 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+59 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+52 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 36, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 41, 45, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 58, 59, ms_state_table_+52 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 60, 64, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+56 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 91, 96, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+56 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 125, 255, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 37, 37, ms_state_table_+46 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+49 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+48 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+48 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+47 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 42, 42, ms_state_table_+54 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 47, 47, ms_state_table_+55 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 9, ms_state_table_+55 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 255, ms_state_table_+55 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+58 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+58 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 95, 95, ms_state_table_+58 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+57 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 9, 9, ms_state_table_+42 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 10, 10, ms_state_table_+43 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 32, 32, ms_state_table_+42 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 33, 33, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+44 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 37, 37, ms_state_table_+45 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 38, 38, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+50 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 40, 40, ms_state_table_+51 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 46, 46, ms_state_table_+52 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 47, 47, ms_state_table_+53 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+59 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+52 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 36, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 41, 45, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 58, 59, ms_state_table_+52 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 60, 64, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 90, ms_state_table_+56 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 91, 96, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 122, ms_state_table_+56 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 125, 255, ms_state_table_+41 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+62 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+71 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 40, 40, ms_state_table_+65 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 41, 41, ms_state_table_+66 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 91, 91, ms_state_table_+67 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+68 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 39, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 42, 90, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 94, 255, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+64 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 39, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 42, 90, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 94, 255, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+69 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+70 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 40, 40, ms_state_table_+65 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 41, 41, ms_state_table_+66 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 91, 91, ms_state_table_+67 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+68 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 39, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 42, 90, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 94, 255, ms_state_table_+63 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+73 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+81 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 91, 91, ms_state_table_+76 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+77 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 93, 93, ms_state_table_+80 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 90, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 94, 255, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+75 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 90, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 94, 255, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+78 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+79 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 91, 91, ms_state_table_+76 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+77 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 93, 93, ms_state_table_+80 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 90, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 94, 255, ms_state_table_+74 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+83 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+92 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 10, 10, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+85 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+86 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 47, 47, ms_state_table_+87 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+90 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 125, 125, ms_state_table_+91 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 9, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 33, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 38, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 46, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 122, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 126, 255, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 33, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 38, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 46, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 122, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 126, 255, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 42, 42, ms_state_table_+88 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 47, 47, ms_state_table_+89 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 9, ms_state_table_+89 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 255, ms_state_table_+89 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 10, 10, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+85 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 39, 39, ms_state_table_+86 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 47, 47, ms_state_table_+87 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 123, 123, ms_state_table_+90 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 124, 124, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 125, 125, ms_state_table_+91 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 9, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 33, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 38, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 40, 46, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 122, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 126, 255, ms_state_table_+84 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+94 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+107 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+98 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+99 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+95 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+95 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+95 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+97 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+100 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+106 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+102 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 120, 120, ms_state_table_+104 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 47, ms_state_table_+101 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 119, ms_state_table_+101 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 121, 126, ms_state_table_+101 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 55, ms_state_table_+103 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 55, ms_state_table_+103 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+105 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 70, ms_state_table_+105 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 102, ms_state_table_+105 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 48, 57, ms_state_table_+105 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 65, 70, ms_state_table_+105 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 97, 102, ms_state_table_+105 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 48, 48, ms_state_table_+102 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 120, 120, ms_state_table_+104 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 47, ms_state_table_+101 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 49, 119, ms_state_table_+101 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 121, 126, ms_state_table_+101 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+98 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+99 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 8, ms_state_table_+95 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 9, 10, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 11, 31, ms_state_table_+95 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 32, 33, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 126, ms_state_table_+96 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 127, 255, ms_state_table_+95 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+114 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+110 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+111 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 33, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 255, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 0, ms_state_table_+112 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_CONDITIONAL_, 2, 2, ms_state_table_+113 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 255, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 34, 34, ms_state_table_+110 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_, 92, 92, ms_state_table_+111 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 1, 33, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 35, 91, ms_state_table_+109 },
    { ReflexCpp_::Scanner_::DfaTransition_::TT_INPUT_ATOM_RANGE_, 93, 255, ms_state_table_+109 }
};
ReflexCpp_::Size_ const Scanner::ms_transition_count_ = sizeof(Scanner::ms_transition_table_) / sizeof(ReflexCpp_::Scanner_::DfaTransition_);

ReflexCpp_::Uint32_ const Scanner::ms_accept_handler_count_ = 58;


#line 238 "barf_commonlang_scanner.reflex"

} // end of namespace CommonLang
} // end of namespace Barf

#line 1733 "barf_commonlang_scanner.cpp"
