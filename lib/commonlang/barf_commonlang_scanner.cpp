// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// barf_commonlang_scanner.cpp generated by reflex
// from barf_commonlang_scanner.reflex using reflex.cpp.targetspec and reflex.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "barf_commonlang_scanner.hpp"

#include <iostream>

#define REFLEX_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 118 "barf_commonlang_scanner.reflex"

#include <cstdlib>
#include <sstream>

#include "barf_ast.hpp"
#include "barf_util.hpp"

namespace Barf {
namespace CommonLang {

ostream &operator << (ostream &stream, Scanner::Token::Type scanner_token_type)
{
    static string const s_scanner_token_type_string[Scanner::Token::COUNT_PLUS_0x100 - 0x100] =
    {
        "BAD_END_OF_FILE",
        "BAD_TOKEN",
        "CHAR_LITERAL",
        "DIRECTIVE_ADD_CODESPEC",
        "DIRECTIVE_ADD_OPTIONAL_DIRECTIVE",
        "DIRECTIVE_ADD_REQUIRED_DIRECTIVE",
        "DIRECTIVE_CASE_INSENSITIVE",
        "DIRECTIVE_DEFAULT",
        "DIRECTIVE_DEFAULT_PARSE_NONTERMINAL",
        "DIRECTIVE_DUMB_CODE_BLOCK",
        "DIRECTIVE_END",
        "DIRECTIVE_ERROR",
        "DIRECTIVE_ID",
        "DIRECTIVE_MACRO",
        "DIRECTIVE_NONTERMINAL",
        "DIRECTIVE_PREC",
        "DIRECTIVE_START_IN_STATE_MACHINE",
        "DIRECTIVE_STATE_MACHINE",
        "DIRECTIVE_STRICT_CODE_BLOCK",
        "DIRECTIVE_STRING",
        "DIRECTIVE_TARGET",
        "DIRECTIVE_TARGETS",
        "DIRECTIVE_TERMINAL",
        "DIRECTIVE_TYPE",
        "DIRECTIVE_UNGREEDY",
        "DUMB_CODE_BLOCK",
        "END_OF_FILE",
        "END_PREAMBLE",
        "ID",
        "NEWLINE",
        "REGEX",
        "STRICT_CODE_BLOCK",
        "STRING_LITERAL"
    };
    if (scanner_token_type < 0x100)
    {
        assert(scanner_token_type >= 0);
        return stream << CharLiteral(Uint8(scanner_token_type));
    }
    else
    {
        assert(scanner_token_type < Scanner::Token::COUNT_PLUS_0x100);
        return stream << s_scanner_token_type_string[scanner_token_type - 0x100];
    }
}

bool Scanner::OpenFile (string const &input_filename)
{
    bool open_success = InputBase::OpenFile(input_filename);
    if (open_success)
    {
        ResetForNewInput();
        IstreamIterator(istream_iterator<char>(In()));
        // unlimited readahead (read the whole file immediately)
        InputReadahead(0);
    }
    return open_success;
}

void Scanner::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    InputBase::OpenString(input_string, input_name, use_line_numbers);
    ResetForNewInput();
    IstreamIterator(istream_iterator<char>(In()));
    // unlimited readahead (read the whole file immediately)
    InputReadahead(0);
}

void Scanner::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    InputBase::OpenUsingStream(input_stream, input_name, use_line_numbers);
    ResetForNewInput();
    IstreamIterator(istream_iterator<char>(In()));
    // unlimited readahead (read the whole file immediately)
    InputReadahead(0);
}

Scanner::Token::Type Scanner::ParseDirective (string const &accepted_string, Ast::Base *&token)
{
    assert(token == NULL);

    if (accepted_string == "%add_codespec") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ADD_CODESPEC; }
    if (accepted_string == "%add_optional_directive") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE; }
    if (accepted_string == "%add_required_directive") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ADD_REQUIRED_DIRECTIVE; }
    if (accepted_string == "%case_insensitive") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_CASE_INSENSITIVE; }
    if (accepted_string == "%default") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_DEFAULT; }
    if (accepted_string == "%default_parse_nonterminal") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_DEFAULT_PARSE_NONTERMINAL; }
    if (accepted_string == "%dumb_code_block") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_DUMB_CODE_BLOCK; }
    if (accepted_string == "%end") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_END; }
    if (accepted_string == "%error") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ERROR; }
    if (accepted_string == "%identifier") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_ID; }
    if (accepted_string == "%macro") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_MACRO; }
    if (accepted_string == "%nonterminal") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_NONTERMINAL; }
    if (accepted_string == "%prec") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_PREC; }
    if (accepted_string == "%start_with_state_machine") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_START_IN_STATE_MACHINE; }
    if (accepted_string == "%state_machine") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_STATE_MACHINE; }
    if (accepted_string == "%strict_code_block") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_STRICT_CODE_BLOCK; }
    if (accepted_string == "%string") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_STRING; }
    if (accepted_string == "%target") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TARGET; }
    if (accepted_string == "%targets") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TARGETS; }
    if (accepted_string == "%terminal") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TERMINAL; }
    if (accepted_string == "%type") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_TYPE; }
    if (accepted_string == "%ungreedy") { token = new Ast::ThrowAway(GetFiLoc()); return Token::DIRECTIVE_UNGREEDY; }

    EmitError("invalid directive \"" + accepted_string + "\"", GetFiLoc());
    return Token::BAD_TOKEN;
}

#line 137 "barf_commonlang_scanner.cpp"

Scanner::Scanner ()
    :
    ReflexCpp_::AutomatonApparatus_Noninteractive_(
        ms_state_table_,
        ms_state_count_,
        ms_transition_table_,
        ms_transition_count_,
        ms_accept_handler_count_)
{
    DebugSpew(false);


    ResetForNewInput();
}

Scanner::~Scanner ()
{
}

Scanner::StateMachine::Name Scanner::CurrentStateMachine () const
{
    assert(InitialState_() != NULL);
    BarfCpp_::Size initial_node_index = InitialState_() - ms_state_table_;
    assert(initial_node_index < ms_state_count_);
    switch (initial_node_index)
    {
        default: assert(false && "invalid initial node index -- this should never happen"); return StateMachine::START_;
        case 0: return StateMachine::BLOCK_COMMENT;
        case 10: return StateMachine::CHAR_LITERAL_END;
        case 17: return StateMachine::CHAR_LITERAL_GUTS;
        case 30: return StateMachine::CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK;
        case 40: return StateMachine::DUMB_CODE_BLOCK;
        case 50: return StateMachine::MAIN;
        case 72: return StateMachine::REGULAR_EXPRESSION;
        case 83: return StateMachine::REGULAR_EXPRESSION_BRACKET_EXPRESSION;
        case 93: return StateMachine::STRICT_CODE_BLOCK;
        case 104: return StateMachine::STRING_LITERAL_GUTS;
        case 114: return StateMachine::STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK;
    }
}

void Scanner::SwitchToStateMachine (StateMachine::Name state_machine)
{
    assert(
        state_machine == StateMachine::BLOCK_COMMENT ||
        state_machine == StateMachine::CHAR_LITERAL_END ||
        state_machine == StateMachine::CHAR_LITERAL_GUTS ||
        state_machine == StateMachine::CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK ||
        state_machine == StateMachine::DUMB_CODE_BLOCK ||
        state_machine == StateMachine::MAIN ||
        state_machine == StateMachine::REGULAR_EXPRESSION ||
        state_machine == StateMachine::REGULAR_EXPRESSION_BRACKET_EXPRESSION ||
        state_machine == StateMachine::STRICT_CODE_BLOCK ||
        state_machine == StateMachine::STRING_LITERAL_GUTS ||
        state_machine == StateMachine::STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK ||
        (false && "invalid StateMachine::Name"));
    REFLEX_CPP_DEBUG_CODE_(
        std::cerr << 
#line 271 "barf_commonlang_scanner.reflex"
"CommonLang::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 199 "barf_commonlang_scanner.cpp"
 << " switching to state machine "
                  << ms_state_machine_name_[state_machine];
        if (ms_state_machine_mode_flags_[state_machine] != 0)
        {
            if ((ms_state_machine_mode_flags_[state_machine] & AutomatonApparatus_Noninteractive_::MF_CASE_INSENSITIVE_) != 0)
                std::cerr << " %case_insensitive";
            if ((ms_state_machine_mode_flags_[state_machine] & AutomatonApparatus_Noninteractive_::MF_UNGREEDY_) != 0)
                std::cerr << " %ungreedy";
        }
        std::cerr << std::endl)
    InitialState_(ms_state_table_ + ms_state_machine_start_state_index_[state_machine]);
    ModeFlags_(ms_state_machine_mode_flags_[state_machine]);
    assert(CurrentStateMachine() == state_machine);
}

void Scanner::ResetForNewInput ()
{
    REFLEX_CPP_DEBUG_CODE_(
        std::cerr << 
#line 271 "barf_commonlang_scanner.reflex"
"CommonLang::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 221 "barf_commonlang_scanner.cpp"
 << " executing reset-for-new-input actions and switching to state machine "
                  << ms_state_machine_name_[StateMachine::START_];
        if (ms_state_machine_mode_flags_[StateMachine::START_] != 0)
        {
            if ((ms_state_machine_mode_flags_[StateMachine::START_] & AutomatonApparatus_Noninteractive_::MF_CASE_INSENSITIVE_) != 0)
                std::cerr << " %case_insensitive";
            if ((ms_state_machine_mode_flags_[StateMachine::START_] & AutomatonApparatus_Noninteractive_::MF_UNGREEDY_) != 0)
                std::cerr << " %ungreedy";
        }
        std::cerr << std::endl)
    ReflexCpp_::AutomatonApparatus_Noninteractive_::ResetForNewInput_(ms_state_table_ + ms_state_machine_start_state_index_[StateMachine::START_], ms_state_machine_mode_flags_[StateMachine::START_]);
    assert(CurrentStateMachine() == StateMachine::START_);


#line 260 "barf_commonlang_scanner.reflex"

    m_is_in_preamble = true;
    m_regex_paren_level = 0;
    m_code_block_bracket_level = 0;

#line 242 "barf_commonlang_scanner.cpp"
}

Scanner::Token::Type Scanner::Scan (
#line 83 "barf_commonlang_scanner.reflex"
 Ast::Base *&token 
#line 248 "barf_commonlang_scanner.cpp"
) throw()
{

#line 240 "barf_commonlang_scanner.reflex"

    assert(token == NULL);

#line 256 "barf_commonlang_scanner.cpp"

    std::string work_string;
    // this is the main scanner loop.  it only breaks when an accept handler
    // returns or after the unmatched character handler, if certain conditions
    // exist (see comments below).
    while (true)
    {
        // clear the previous accepted/rejected string.
        work_string.clear();
        // reset the char buffer and other stuff
        PrepareToScan_();

        bool was_at_end_of_input_ = IsAtEndOfInput();

        BarfCpp_::Uint32 accept_handler_index_ = RunDfa_(work_string);
        // if no valid accept_handler_index_ was returned, then work_string
        // was filled with everything up to the char after the keep_string
        // cursor (i.e. the rejected atom).
        if (accept_handler_index_ >= ms_accept_handler_count_)
        {
            // if we were already at the end of input and no
            // rule was matched, break out of the loop.
            if (was_at_end_of_input_)
                break;

            std::string &rejected_string = work_string;
            BarfCpp_::Uint8 rejected_atom = rejected_string.empty() ? '\0' : *rejected_string.rbegin();

            REFLEX_CPP_DEBUG_CODE_(
                std::cerr << 
#line 271 "barf_commonlang_scanner.reflex"
"CommonLang::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 289 "barf_commonlang_scanner.cpp"
 << " rejecting string ";
                PrintString_(rejected_string);
                std::cerr << " (rejected_atom is \'";
                PrintAtom_(rejected_atom);
                std::cerr << "\')" << std::endl)

            // execute the rejection actions.  the do/while loop is so that a
            // break statement inside the rejection actions doesn't break out
            // of the main scanner loop.
            do
            {

#line 257 "barf_commonlang_scanner.reflex"

    EmitError("unrecognized character " + CharLiteral(rejected_atom), GetFiLoc());

#line 306 "barf_commonlang_scanner.cpp"

            }
            while (false);
        }
        // otherwise, call the appropriate accept handler code.
        else
        {
            std::string &accepted_string = work_string;

            REFLEX_CPP_DEBUG_CODE_(
                std::cerr << 
#line 271 "barf_commonlang_scanner.reflex"
"CommonLang::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 320 "barf_commonlang_scanner.cpp"
 << " accepting string ";
                PrintString_(accepted_string);
                std::cerr << " in state machine " << ms_state_machine_name_[CurrentStateMachine()]
                          << " using regex (" << ms_accept_handler_regex_[accept_handler_index_] << ")" << std::endl)

            // execute the appropriate accept handler.
            // the accepted string is in accepted_string.
            switch (accept_handler_index_)
            {
                case 0:
                {

#line 409 "barf_commonlang_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
        if (token != NULL)
            Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
        SwitchToStateMachine(m_return_state);
    
#line 340 "barf_commonlang_scanner.cpp"

                }
                break;

                case 1:
                {

#line 417 "barf_commonlang_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
        EmitWarning("unterminated block comment", GetFiLoc());
        delete token;
        token = NULL;
        return Token::END_OF_FILE;
    
#line 356 "barf_commonlang_scanner.cpp"

                }
                break;

                case 2:
                {

#line 487 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        SwitchToStateMachine(StateMachine::MAIN);
        return Token::CHAR_LITERAL;
    
#line 370 "barf_commonlang_scanner.cpp"

                }
                break;

                case 3:
                {

#line 494 "barf_commonlang_scanner.reflex"

        EmitError("unterminated character literal", GetFiLoc());
        assert(token != NULL);
        delete token;
        token = NULL;
        SwitchToStateMachine(StateMachine::MAIN);
        return Token::END_OF_FILE;
    
#line 387 "barf_commonlang_scanner.cpp"

                }
                break;

                case 4:
                {

#line 504 "barf_commonlang_scanner.reflex"

        EmitError("malformed character literal", GetFiLoc());
        if (accepted_string[0] == '\n')
            IncrementLineNumber();
        assert(token != NULL);
        delete token;
        token = NULL;
        SwitchToStateMachine(StateMachine::MAIN);
        return Token::BAD_TOKEN;
    
#line 406 "barf_commonlang_scanner.cpp"

                }
                break;

                case 5:
                {

#line 429 "barf_commonlang_scanner.reflex"

        assert(accepted_string.length() >= 2);
        assert(accepted_string[0] == '\\');
        Uint32 value = strtol(accepted_string.c_str()+1, NULL, 8);
        if (value >= 0x100)
            EmitError("octal character literal value out of range (" + accepted_string + ")", GetFiLoc());
        token = new Ast::Char(Uint8(value), GetFiLoc());
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 424 "barf_commonlang_scanner.cpp"

                }
                break;

                case 6:
                {

#line 440 "barf_commonlang_scanner.reflex"

        assert(accepted_string.length() >= 3);
        assert(accepted_string[0] == '\\');
        assert(accepted_string[1] == 'x');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 16);
        if (value >= 0x100)
            EmitError("hexadecimal character literal value out of range (" + accepted_string + ")", GetFiLoc());
        token = new Ast::Char(Uint8(value), GetFiLoc());
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 443 "barf_commonlang_scanner.cpp"

                }
                break;

                case 7:
                {

#line 452 "barf_commonlang_scanner.reflex"

        assert(accepted_string.length() == 2);
        assert(accepted_string[0] == '\\');
        Ast::Char *ch = new Ast::Char(Uint8(accepted_string[1]), GetFiLoc());
        ch->Escape();
        token = ch;
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 460 "barf_commonlang_scanner.cpp"

                }
                break;

                case 8:
                {

#line 462 "barf_commonlang_scanner.reflex"

        assert(accepted_string.length() == 1);
        token = new Ast::Char(Uint8(accepted_string[0]), GetFiLoc());
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 474 "barf_commonlang_scanner.cpp"

                }
                break;

                case 9:
                {

#line 469 "barf_commonlang_scanner.reflex"

        EmitError("unterminated character literal", GetFiLoc());
        return Token::END_OF_FILE;
    
#line 487 "barf_commonlang_scanner.cpp"

                }
                break;

                case 10:
                {

#line 475 "barf_commonlang_scanner.reflex"

        EmitError("unexpected character " + CharLiteral(accepted_string[0]) + " in character literal", GetFiLoc());
        if (accepted_string[0] == '\n')
            IncrementLineNumber();
        token = new Ast::Char(Uint8(accepted_string[0]), GetFiLoc());
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 503 "barf_commonlang_scanner.cpp"

                }
                break;

                case 11:
                {

#line 744 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        IncrementLineNumber(NewlineCount(accepted_string));
        Dsc<Ast::StrictCodeBlock *>(token)->AppendText(accepted_string);
        SwitchToStateMachine(StateMachine::STRICT_CODE_BLOCK);
    
#line 518 "barf_commonlang_scanner.cpp"

                }
                break;

                case 12:
                {

#line 752 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        delete token;
        token = NULL;
        EmitError("unterminated character literal in strict code block", GetFiLoc());
        IncrementLineNumber(NewlineCount(accepted_string));
        return Token::END_OF_FILE;
    
#line 535 "barf_commonlang_scanner.cpp"

                }
                break;

                case 13:
                {

#line 653 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        assert(accepted_string.length() >= 2);
        // take off the %} at the end
        accepted_string.resize(accepted_string.length()-2);
        IncrementLineNumber(NewlineCount(accepted_string));
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
        SwitchToStateMachine(StateMachine::MAIN);
        return Token::DUMB_CODE_BLOCK;
    
#line 554 "barf_commonlang_scanner.cpp"

                }
                break;

                case 14:
                {

#line 665 "barf_commonlang_scanner.reflex"

        EmitError("unterminated dumb code block (looking for %} delimiter)", GetFiLoc());
        IncrementLineNumber(NewlineCount(accepted_string));
        assert(token != NULL);
        delete token;
        token = NULL;
        return Token::END_OF_FILE;
    
#line 571 "barf_commonlang_scanner.cpp"

                }
                break;

                case 15:
                {

#line 325 "barf_commonlang_scanner.reflex"

        m_return_state = StateMachine::MAIN;
        SwitchToStateMachine(StateMachine::BLOCK_COMMENT);
    
#line 584 "barf_commonlang_scanner.cpp"

                }
                break;

                case 16:
                {

#line 331 "barf_commonlang_scanner.reflex"
 
#line 594 "barf_commonlang_scanner.cpp"

                }
                break;

                case 17:
                {

#line 334 "barf_commonlang_scanner.reflex"

        SwitchToStateMachine(StateMachine::CHAR_LITERAL_GUTS);
    
#line 606 "barf_commonlang_scanner.cpp"

                }
                break;

                case 18:
                {

#line 339 "barf_commonlang_scanner.reflex"

        token = new Ast::String(GetFiLoc());
        SwitchToStateMachine(StateMachine::STRING_LITERAL_GUTS);
    
#line 619 "barf_commonlang_scanner.cpp"

                }
                break;

                case 19:
                {

#line 345 "barf_commonlang_scanner.reflex"

        token = new Ast::String(GetFiLoc());
        SwitchToStateMachine(StateMachine::REGULAR_EXPRESSION);
    
#line 632 "barf_commonlang_scanner.cpp"

                }
                break;

                case 20:
                {

#line 351 "barf_commonlang_scanner.reflex"

        token = new Ast::DumbCodeBlock(GetFiLoc());
        SwitchToStateMachine(StateMachine::DUMB_CODE_BLOCK);
    
#line 645 "barf_commonlang_scanner.cpp"

                }
                break;

                case 21:
                {

#line 357 "barf_commonlang_scanner.reflex"

        token = new Ast::StrictCodeBlock(GetFiLoc());
        SwitchToStateMachine(StateMachine::STRICT_CODE_BLOCK);
    
#line 658 "barf_commonlang_scanner.cpp"

                }
                break;

                case 22:
                {

#line 363 "barf_commonlang_scanner.reflex"

        return Scanner::ParseDirective(accepted_string, token);
    
#line 670 "barf_commonlang_scanner.cpp"

                }
                break;

                case 23:
                {

#line 368 "barf_commonlang_scanner.reflex"

        token = new Ast::ThrowAway(GetFiLoc());
        m_is_in_preamble = false;
        return Token::END_PREAMBLE;
    
#line 684 "barf_commonlang_scanner.cpp"

                }
                break;

                case 24:
                {

#line 375 "barf_commonlang_scanner.reflex"

        token = new Ast::Id(accepted_string, GetFiLoc());
        return Token::ID;
    
#line 697 "barf_commonlang_scanner.cpp"

                }
                break;

                case 25:
                {

#line 381 "barf_commonlang_scanner.reflex"

        return Token::Type(accepted_string[0]);
    
#line 709 "barf_commonlang_scanner.cpp"

                }
                break;

                case 26:
                {

#line 385 "barf_commonlang_scanner.reflex"
 /* ignore all whitespace */ 
#line 719 "barf_commonlang_scanner.cpp"

                }
                break;

                case 27:
                {

#line 388 "barf_commonlang_scanner.reflex"

        IncrementLineNumber();
        if (m_is_in_preamble)
            return Token::NEWLINE;
    
#line 733 "barf_commonlang_scanner.cpp"

                }
                break;

                case 28:
                {

#line 395 "barf_commonlang_scanner.reflex"

        return Token::END_OF_FILE;
    
#line 745 "barf_commonlang_scanner.cpp"

                }
                break;

                case 29:
                {

#line 400 "barf_commonlang_scanner.reflex"

        EmitError("unexpected character " + CharLiteral(accepted_string[0]), GetFiLoc());
        return Token::BAD_TOKEN;
    
#line 758 "barf_commonlang_scanner.cpp"

                }
                break;

                case 30:
                {

#line 571 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        if (m_regex_paren_level == 0)
        {
            SwitchToStateMachine(StateMachine::MAIN);
            return Token::REGEX;
        }
        --m_regex_paren_level;
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
    
#line 777 "barf_commonlang_scanner.cpp"

                }
                break;

                case 31:
                {

#line 583 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        ++m_regex_paren_level;
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
    
#line 791 "barf_commonlang_scanner.cpp"

                }
                break;

                case 32:
                {

#line 590 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
        m_regex_bracket_level = 0;
        SwitchToStateMachine(StateMachine::REGULAR_EXPRESSION_BRACKET_EXPRESSION);
    
#line 806 "barf_commonlang_scanner.cpp"

                }
                break;

                case 33:
                {

#line 598 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        IncrementLineNumber(NewlineCount(accepted_string));
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
    
#line 820 "barf_commonlang_scanner.cpp"

                }
                break;

                case 34:
                {

#line 605 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        delete token;
        token = NULL;
        EmitError("unterminated regular expression", GetFiLoc());
        return Token::END_OF_FILE;
    
#line 836 "barf_commonlang_scanner.cpp"

                }
                break;

                case 35:
                {

#line 617 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
        if (m_regex_bracket_level == 0)
            SwitchToStateMachine(StateMachine::REGULAR_EXPRESSION);
        else
            --m_regex_bracket_level;
    
#line 853 "barf_commonlang_scanner.cpp"

                }
                break;

                case 36:
                {

#line 627 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
        ++m_regex_bracket_level;
    
#line 867 "barf_commonlang_scanner.cpp"

                }
                break;

                case 37:
                {

#line 634 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        IncrementLineNumber(NewlineCount(accepted_string));
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
    
#line 881 "barf_commonlang_scanner.cpp"

                }
                break;

                case 38:
                {

#line 641 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        delete token;
        token = NULL;
        EmitError("unterminated bracket expression inside regular expression", GetFiLoc());
        return Token::END_OF_FILE;
    
#line 897 "barf_commonlang_scanner.cpp"

                }
                break;

                case 39:
                {

#line 678 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        if (m_code_block_bracket_level == 0)
        {
            SwitchToStateMachine(StateMachine::MAIN);
            return Token::STRICT_CODE_BLOCK;
        }
        --m_code_block_bracket_level;
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
    
#line 916 "barf_commonlang_scanner.cpp"

                }
                break;

                case 40:
                {

#line 690 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
        ++m_code_block_bracket_level;
    
#line 930 "barf_commonlang_scanner.cpp"

                }
                break;

                case 41:
                {

#line 697 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK);
    
#line 944 "barf_commonlang_scanner.cpp"

                }
                break;

                case 42:
                {

#line 704 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
        SwitchToStateMachine(StateMachine::STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK);
    
#line 958 "barf_commonlang_scanner.cpp"

                }
                break;

                case 43:
                {

#line 711 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
        m_return_state = StateMachine::STRICT_CODE_BLOCK;
        SwitchToStateMachine(StateMachine::BLOCK_COMMENT);
    
#line 973 "barf_commonlang_scanner.cpp"

                }
                break;

                case 44:
                {

#line 719 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
    
#line 986 "barf_commonlang_scanner.cpp"

                }
                break;

                case 45:
                {

#line 725 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        IncrementLineNumber(NewlineCount(accepted_string));
        Dsc<Ast::CodeBlock *>(token)->AppendText(accepted_string);
    
#line 1000 "barf_commonlang_scanner.cpp"

                }
                break;

                case 46:
                {

#line 732 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        delete token;
        token = NULL;
        EmitError("unterminated strict code block", GetFiLoc());
        return Token::END_OF_FILE;
    
#line 1016 "barf_commonlang_scanner.cpp"

                }
                break;

                case 47:
                {

#line 519 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        IncrementLineNumber(NewlineCount(accepted_string));
        // get rid of the trailing endquote
        assert(accepted_string.length() >= 1);
        accepted_string.resize(accepted_string.length()-1);
        // escape the string in-place and handle the return code
        EscapeStringStatus status = EscapeString(accepted_string);
        switch (status.m_return_code)
        {
            case ESRC_SUCCESS:
                // awesome
                break;

            case ESRC_UNEXPECTED_EOI:
                assert(false && "the formulation of the regex should prevent this");
                break;

            case ESRC_MALFORMED_HEX_CHAR:
                EmitError(
                    "\\x with no trailing hex digits",
                    FiLoc(token->GetFiLoc().Filename(),
                          token->GetFiLoc().LineNumber() + status.m_line_number_offset));
                break;

            case ESRC_HEX_ESCAPE_SEQUENCE_OUT_OF_RANGE:
            case ESRC_OCTAL_ESCAPE_SEQUENCE_OUT_OF_RANGE:
                EmitError(
                    "hex/octal escape sequence out of range",
                    FiLoc(token->GetFiLoc().Filename(),
                          token->GetFiLoc().LineNumber() + status.m_line_number_offset));
                break;
        }
        Dsc<Ast::String *>(token)->AppendText(accepted_string);
        SwitchToStateMachine(StateMachine::MAIN);
        return Token::STRING_LITERAL;
    
#line 1062 "barf_commonlang_scanner.cpp"

                }
                break;

                case 48:
                {

#line 558 "barf_commonlang_scanner.reflex"

        EmitError("unterminated string literal", GetFiLoc());
        IncrementLineNumber(NewlineCount(accepted_string));
        assert(token != NULL);
        delete token;
        token = NULL;
        return Token::END_OF_FILE;
    
#line 1079 "barf_commonlang_scanner.cpp"

                }
                break;

                case 49:
                {

#line 765 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        Dsc<Ast::StrictCodeBlock *>(token)->AppendText(accepted_string);
        IncrementLineNumber(NewlineCount(accepted_string));
        SwitchToStateMachine(StateMachine::STRICT_CODE_BLOCK);
    
#line 1094 "barf_commonlang_scanner.cpp"

                }
                break;

                case 50:
                {

#line 773 "barf_commonlang_scanner.reflex"

        assert(token != NULL);
        delete token;
        token = NULL;
        EmitError("unterminated string literal in strict code block", GetFiLoc());
        IncrementLineNumber(NewlineCount(accepted_string));
        return Token::END_OF_FILE;
    
#line 1111 "barf_commonlang_scanner.cpp"

                }
                break;

                default: assert(false && "this should never happen"); break;
            }
        }
    }


#line 243 "barf_commonlang_scanner.reflex"

    assert(false && "you didn't handle EOF properly");
    return Token::BAD_END_OF_FILE;

#line 1127 "barf_commonlang_scanner.cpp"
}

void Scanner::KeepString ()
{
    REFLEX_CPP_DEBUG_CODE_(std::cerr << 
#line 271 "barf_commonlang_scanner.reflex"
"CommonLang::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1135 "barf_commonlang_scanner.cpp"
 << " keeping string" << std::endl)
    AutomatonApparatus_Noninteractive_::KeepString();
}

void Scanner::Unaccept (BarfCpp_::Uint32 unaccept_char_count)
{
    REFLEX_CPP_DEBUG_CODE_(std::cerr << 
#line 271 "barf_commonlang_scanner.reflex"
"CommonLang::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1145 "barf_commonlang_scanner.cpp"
 << " unaccepting " << unaccept_char_count << " char" << (unaccept_char_count == 1 ? '\0' : 's') << std::endl)
    AutomatonApparatus_Noninteractive_::Unaccept(unaccept_char_count);
}

void Scanner::Unreject (BarfCpp_::Uint32 unreject_char_count)
{
    REFLEX_CPP_DEBUG_CODE_(std::cerr << 
#line 271 "barf_commonlang_scanner.reflex"
"CommonLang::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1155 "barf_commonlang_scanner.cpp"
 << " unrejecting " << unreject_char_count << " char" << (unreject_char_count == 1 ? '\0' : 's') << std::endl)
    AutomatonApparatus_Noninteractive_::Unreject(unreject_char_count);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal reflex-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

void Scanner::PrintAtom_ (BarfCpp_::Uint8 atom)
{
    if (atom == '\\')                    std::cerr << "\\\\";
    else if (atom == '"')                std::cerr << "\\\"";
    else if (atom >= ' ' && atom <= '~') std::cerr << atom;
    else if (atom == '\n')               std::cerr << "\\n";
    else if (atom == '\t')               std::cerr << "\\t";
    else if (atom == '\0')               std::cerr << "\\0";
    else
    {
        std::cerr.width(2);
        std::cerr << "\\x" << std::hex << std::uppercase << BarfCpp_::Uint16(atom);
        std::cerr.width(1);
    }
}

void Scanner::PrintString_ (std::string const &s)
{
    // save the existing std::cerr properties for later restoration
    std::ios_base::fmtflags saved_stream_flags = std::cerr.flags();
    char saved_stream_fill = std::cerr.fill();
    std::streamsize saved_stream_width = std::cerr.width();
    std::streamsize saved_stream_precision = std::cerr.precision();

    // clear all format flags to a neutral state
    std::cerr.unsetf(
        std::ios_base::boolalpha|std::ios_base::dec|std::ios_base::fixed|
        std::ios_base::hex|std::ios_base::internal|std::ios_base::left|
        std::ios_base::oct|std::ios_base::right|std::ios_base::scientific|
        std::ios_base::showbase|std::ios_base::showpoint|std::ios_base::showpos|
        std::ios_base::skipws|std::ios_base::unitbuf|std::ios_base::uppercase|
        std::ios_base::adjustfield|std::ios_base::basefield|std::ios_base::floatfield);
    // the '0' char is used hex escape chars, which always have width 2
    std::cerr.fill('0');

    std::cerr << '"';
    for (std::string::size_type i = 0; i < s.size(); ++i)
        PrintAtom_(s[i]);
    std::cerr << '"';

    // restore the saved std::cerr properties
    std::cerr.setf(saved_stream_flags);
    std::cerr.fill(saved_stream_fill);
    std::cerr.width(saved_stream_width);
    std::cerr.precision(saved_stream_precision);
}

BarfCpp_::Uint32 const Scanner::ms_state_machine_start_state_index_[] =
{
    0,
    10,
    17,
    30,
    40,
    50,
    72,
    83,
    93,
    104,
    114,
};
BarfCpp_::Uint8 const Scanner::ms_state_machine_mode_flags_[] =
{
    2,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    2,
    2,
};
char const *const Scanner::ms_state_machine_name_[] =
{
    "BLOCK_COMMENT",
    "CHAR_LITERAL_END",
    "CHAR_LITERAL_GUTS",
    "CHAR_LITERAL_INSIDE_STRICT_CODE_BLOCK",
    "DUMB_CODE_BLOCK",
    "MAIN",
    "REGULAR_EXPRESSION",
    "REGULAR_EXPRESSION_BRACKET_EXPRESSION",
    "STRICT_CODE_BLOCK",
    "STRING_LITERAL_GUTS",
    "STRING_LITERAL_INSIDE_STRICT_CODE_BLOCK",
};
BarfCpp_::Uint32 const Scanner::ms_state_machine_count_ = sizeof(Scanner::ms_state_machine_name_) / sizeof(*Scanner::ms_state_machine_name_);

// the order of the states indicates priority (only for accept states).
// the lower the state's index in this array, the higher its priority.
ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaState_ const Scanner::ms_state_table_[] =
{
    { 51, 2, 0 },
    { 51, 3, 2 },
    { 51, 2, 5 },
    { 1, 3, 7 },
    { 51, 2, 10 },
    { 51, 5, 12 },
    { 0, 2, 17 },
    { 0, 3, 19 },
    { 0, 3, 22 },
    { 1, 5, 25 },
    { 51, 2, 30 },
    { 51, 5, 32 },
    { 4, 0, 37 },
    { 2, 0, 37 },
    { 4, 2, 37 },
    { 3, 0, 39 },
    { 3, 5, 39 },
    { 51, 2, 44 },
    { 51, 9, 46 },
    { 10, 0, 55 },
    { 8, 0, 55 },
    { 10, 2, 55 },
    { 10, 5, 57 },
    { 7, 0, 62 },
    { 5, 1, 62 },
    { 5, 1, 63 },
    { 7, 3, 64 },
    { 6, 3, 67 },
    { 9, 5, 70 },
    { 9, 9, 75 },
    { 51, 2, 84 },
    { 51, 5, 86 },
    { 51, 2, 91 },
    { 12, 5, 93 },
    { 11, 2, 98 },
    { 11, 5, 100 },
    { 51, 2, 105 },
    { 51, 1, 107 },
    { 12, 1, 108 },
    { 11, 5, 109 },
    { 51, 2, 114 },
    { 51, 3, 116 },
    { 51, 2, 119 },
    { 14, 3, 121 },
    { 51, 2, 124 },
    { 51, 5, 126 },
    { 13, 2, 131 },
    { 13, 3, 133 },
    { 13, 3, 136 },
    { 14, 5, 139 },
    { 51, 2, 144 },
    { 51, 24, 146 },
    { 29, 0, 170 },
    { 26, 0, 170 },
    { 27, 0, 170 },
    { 18, 0, 170 },
    { 29, 4, 170 },
    { 23, 0, 174 },
    { 22, 4, 174 },
    { 51, 4, 178 },
    { 20, 0, 182 },
    { 17, 0, 182 },
    { 19, 0, 182 },
    { 25, 0, 182 },
    { 29, 2, 182 },
    { 15, 0, 184 },
    { 16, 2, 184 },
    { 24, 4, 186 },
    { 24, 4, 190 },
    { 51, 4, 194 },
    { 21, 0, 198 },
    { 28, 24, 198 },
    { 51, 2, 222 },
    { 51, 7, 224 },
    { 33, 4, 231 },
    { 51, 1, 235 },
    { 31, 0, 236 },
    { 30, 0, 236 },
    { 32, 0, 236 },
    { 51, 2, 236 },
    { 51, 1, 238 },
    { 34, 1, 239 },
    { 34, 7, 240 },
    { 51, 2, 247 },
    { 51, 5, 249 },
    { 37, 3, 254 },
    { 51, 1, 257 },
    { 36, 0, 258 },
    { 51, 2, 258 },
    { 51, 1, 260 },
    { 38, 1, 261 },
    { 35, 0, 262 },
    { 38, 5, 262 },
    { 51, 2, 267 },
    { 51, 13, 269 },
    { 45, 6, 282 },
    { 42, 0, 288 },
    { 41, 0, 288 },
    { 45, 2, 288 },
    { 43, 0, 290 },
    { 44, 2, 290 },
    { 40, 0, 292 },
    { 39, 0, 292 },
    { 46, 13, 292 },
    { 51, 2, 305 },
    { 51, 5, 307 },
    { 51, 2, 312 },
    { 48, 5, 314 },
    { 47, 2, 319 },
    { 47, 5, 321 },
    { 51, 2, 326 },
    { 51, 1, 328 },
    { 48, 1, 329 },
    { 47, 5, 330 },
    { 51, 2, 335 },
    { 51, 5, 337 },
    { 51, 2, 342 },
    { 50, 5, 344 },
    { 49, 2, 349 },
    { 49, 5, 351 },
    { 51, 2, 356 },
    { 51, 1, 358 },
    { 50, 1, 359 },
    { 49, 5, 360 }
};
BarfCpp_::Size const Scanner::ms_state_count_ = sizeof(Scanner::ms_state_table_) / sizeof(*Scanner::ms_state_table_);

ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_ const Scanner::ms_transition_table_[] =
{
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 1 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 3 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 4 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 41, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 43, 255, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 1 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 3 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 4 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 41, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 43, 255, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 5 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 9 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 4 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 6 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 41, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 43, 46, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 255, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 7 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 8 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 4 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 41, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 43, 255, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 4 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 41, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 43, 255, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 4 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 6 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 41, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 43, 46, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 255, 2 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 11 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 16 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 13 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 14 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 38, 12 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 12 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 12 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 12 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 15 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 13 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 14 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 38, 12 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 12 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 12 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 18 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 29 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 21 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 31, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 32, 33, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 38, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 126, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 127, 255, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 22 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 28 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 120, 0, 26 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 32, 47, 23 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 55, 24 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 56, 119, 23 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 121, 126, 23 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 55, 25 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 55, 25 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 27 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 70, 27 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 102, 27 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 27 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 70, 27 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 102, 27 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 120, 0, 26 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 32, 47, 23 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 55, 24 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 56, 119, 23 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 121, 126, 23 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 21 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 31, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 32, 33, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 38, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 126, 20 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 127, 255, 19 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 31 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 33 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 34 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 36 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 38, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 31 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 33 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 34 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 36 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 38, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 35 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 39 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 34 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 36 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 38, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 37 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 38 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 34 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 36 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 38, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 91, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 32 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 41 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 43 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 44 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 36, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 38, 255, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 41 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 43 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 44 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 36, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 38, 255, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 45 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 49 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 44 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 125, 0, 46 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 36, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 38, 124, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 126, 255, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 47 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 48 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 44 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 36, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 38, 255, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 44 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 36, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 38, 255, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 44 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 125, 0, 46 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 36, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 38, 124, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 126, 255, 42 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 51 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 71 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 9, 0, 53 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 10, 0, 54 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 32, 0, 53 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 33, 0, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 55 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 56 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 38, 0, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 61 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 40, 0, 62 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 46, 0, 63 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 64 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 123, 0, 70 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 124, 0, 63 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 8, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 11, 31, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 36, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 41, 45, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 58, 59, 63 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 60, 64, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 67 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 91, 96, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 67 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 125, 255, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 57 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 123, 0, 60 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 95, 0, 59 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 95, 0, 59 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 58 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 65 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 66 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 9, 66 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 11, 255, 66 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 95, 0, 69 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 95, 0, 69 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 95, 0, 69 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 68 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 9, 0, 53 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 10, 0, 54 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 32, 0, 53 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 33, 0, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 55 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 37, 0, 56 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 38, 0, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 61 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 40, 0, 62 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 46, 0, 63 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 64 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 123, 0, 70 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 124, 0, 63 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 8, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 11, 31, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 36, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 41, 45, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 58, 59, 63 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 60, 64, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, 67 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 91, 96, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, 67 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 125, 255, 52 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 73 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 82 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 40, 0, 76 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 41, 0, 77 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 91, 0, 78 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 79 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 39, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 42, 90, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 75 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 39, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 42, 90, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 80 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 81 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 40, 0, 76 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 41, 0, 77 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 91, 0, 78 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 79 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 39, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 42, 90, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, 74 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 84 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 92 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 91, 0, 87 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 88 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 93, 0, 91 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 90, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 86 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 90, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 89 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 90 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 91, 0, 87 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 88 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 93, 0, 91 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 90, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, 85 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 94 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 103 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 10, 0, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 96 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 97 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 98 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 123, 0, 101 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 124, 0, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 125, 0, 102 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 9, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 11, 33, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 38, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 46, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 122, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 126, 255, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 124, 0, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 38, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 46, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 122, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 126, 255, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 42, 0, 99 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 100 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 9, 100 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 11, 255, 100 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 10, 0, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 96 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 39, 0, 97 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 47, 0, 98 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 123, 0, 101 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 124, 0, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 125, 0, 102 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 9, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 11, 33, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 38, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 40, 46, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 48, 122, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 126, 255, 95 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 105 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 107 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 108 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 110 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 105 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 107 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 108 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 110 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 109 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 113 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 108 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 110 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 111 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 112 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 108 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 110 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 106 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 115 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 117 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 118 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 120 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 115 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 117 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 118 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 120 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 119 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 123 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 118 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 120 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 0, 121 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::CONDITIONAL, 2, 2, 122 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 255, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 34, 0, 118 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM, 92, 0, 120 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 35, 91, 116 },
    { ReflexCpp_::AutomatonApparatus_Noninteractive_::DfaTransition_::INPUT_ATOM_RANGE, 93, 255, 116 }
};
BarfCpp_::Size const Scanner::ms_transition_count_ = sizeof(Scanner::ms_transition_table_) / sizeof(*Scanner::ms_transition_table_);

char const *const Scanner::ms_accept_handler_regex_[] =
{
    "{ANY}*[*]/",
    "{ANY}*{END_OF_FILE}",
    "'",
    "\\\\?{END_OF_FILE}",
    "{ANY}",
    "{OCT_CHAR}",
    "{HEX_CHAR}",
    "{CHAR_ESC_CHAR}",
    "{CHAR_NORMAL_CHAR}",
    "\\\\?{END_OF_FILE}",
    "{ANY}",
    "([^\\\\]|\\\\{ANY})*'",
    "([^\\\\]|\\\\{ANY})*\\\\?{END_OF_FILE}",
    "{ANY}*%\\}",
    "{ANY}*{END_OF_FILE}",
    "/[*]",
    "//.*",
    "'",
    "\"",
    "\\(",
    "%\\{",
    "\\{",
    "%{ID}",
    "%%",
    "{ID}",
    "{OPERATOR}",
    "{WHITESPACE}",
    "{NEWLINE}",
    "{END_OF_FILE}",
    ".",
    "\\)",
    "\\(",
    "\\[",
    "([^()\\[\\]\\\\]|\\\\{ANY})+",
    "\\\\?{END_OF_FILE}",
    "\\]",
    "\\[",
    "([^\\[\\]\\\\]|\\\\{ANY})+",
    "\\\\?{END_OF_FILE}",
    "\\}",
    "\\{",
    "'",
    "\"",
    "/[*]",
    "//.*",
    "[^{}'\"/]+|.",
    "{END_OF_FILE}",
    "([^\\\\]|\\\\{ANY})*\"",
    "([^\\\\]|\\\\{ANY})*\\\\?{END_OF_FILE}",
    "([^\\\\]|\\\\{ANY})*\"",
    "([^\\\\]|\\\\{ANY})*\\\\?{END_OF_FILE}"
};
BarfCpp_::Uint32 const Scanner::ms_accept_handler_count_ = sizeof(Scanner::ms_accept_handler_regex_) / sizeof(*Scanner::ms_accept_handler_regex_);

// ///////////////////////////////////////////////////////////////////////
// end of internal reflex-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 247 "barf_commonlang_scanner.reflex"

} // end of namespace CommonLang
} // end of namespace Barf

#line 1822 "barf_commonlang_scanner.cpp"
