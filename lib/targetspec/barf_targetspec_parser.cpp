// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// barf_targetspec_parser.cpp generated by trison
// from barf_targetspec_parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "barf_targetspec_parser.hpp"


#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 61 "barf_targetspec_parser.trison"

#include "barf_ast.hpp"
#include "barf_targetspec_ast.hpp"

namespace Barf {
namespace Targetspec {

#line 21 "barf_targetspec_parser.cpp"

Parser::Parser ()
{
    DebugSpew(false);


#line 68 "barf_targetspec_parser.trison"


#line 31 "barf_targetspec_parser.cpp"
}

Parser::~Parser ()
{
    // clean up dynamically allocated memory.
    ClearStack_();
    ClearLookaheadQueue_();



#line 70 "barf_targetspec_parser.trison"


#line 45 "barf_targetspec_parser.cpp"
}

void Parser::ResetForNewInput ()
{
    // clean up stuff that might be hanging around from the last parse's input.
    ClearStack_();
    ClearLookaheadQueue_();
}

Parser::ParserReturnCode Parser::Parse (Ast::Base * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{

#line 72 "barf_targetspec_parser.trison"

    m_add_codespec_list = new AddCodespecList();
    m_add_directive_map = new AddDirectiveMap();

#line 63 "barf_targetspec_parser.cpp"

    return Parse_(return_token, nonterminal_to_parse);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

Parser::ParserReturnCode Parser::Parse_ (Ast::Base * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 79 "barf_targetspec_parser.cpp"
 << " starting parse" << std::endl;)

    ParserReturnCode parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
    *return_token = NULL;

    // make sure all our structures are empty and variables initialized.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();
    m_is_in_error_panic_ = false;

    // push the initial state of the DPDA.
    assert((false
           || nonterminal_to_parse == ParseNonterminal::add_codespec
           || nonterminal_to_parse == ParseNonterminal::add_directive
           || nonterminal_to_parse == ParseNonterminal::at_least_one_newline
           || nonterminal_to_parse == ParseNonterminal::at_least_zero_newlines
           || nonterminal_to_parse == ParseNonterminal::default_value
           || nonterminal_to_parse == ParseNonterminal::directives
           || nonterminal_to_parse == ParseNonterminal::param_spec
           || nonterminal_to_parse == ParseNonterminal::root
           || nonterminal_to_parse == ParseNonterminal::target
           ) && "invalid nonterminal_to_parse");
    m_stack_.push_back(StackElement_(nonterminal_to_parse, NULL));
    // main parser loop
    while (true)
    {
        if (m_is_in_error_panic_)
        {
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 113 "barf_targetspec_parser.cpp"
 << " begin error panic" << std::endl;)

            // the special Terminal::END_ can not be eaten by error panic.
            if (Lookahead_(0).m_id == Terminal::END_)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 122 "barf_targetspec_parser.cpp"
 << " end error panic; abort (error panic can't eat Terminal::END_)" << std::endl;)
                // parser_return_code_ and return_token are already appropriately
                // set, so just break out of the main loop.
                break;
            }

            while (true)
            {
                // get the current state (top of the stack)
                assert(!m_stack_.empty());
                BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
                assert(current_state_index < ms_state_count_);
                State_ const &current_state = ms_state_table_[current_state_index];
                TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr);)

                // check if the current state accepts ERROR_ (only need to check the
                // non-default transitions, since the default transition can't be a shift).
                bool accepts_error = false;
                for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                       *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                     transition != transition_end;
                     ++transition)
                {
                    if (transition->m_type == Transition_::SHIFT && transition->m_lookahead_count == 1 && *transition->m_lookahead_sequence == Terminal::ERROR_)
                    {
                        accepts_error = true;
                        break;
                    }
                }

                if (accepts_error)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 158 "barf_targetspec_parser.cpp"
 << " end error panic; success (current state accepts ERROR_ token)" << std::endl;)
                    // if the current state accepts error, throw away the first lookahead data
                    // (but don't pop the front of the lookahead queue).  then clear the thrown-
                    // away token data, and set the token id to ERROR_.
                    assert(!m_lookahead_queue_.empty());
                    ThrowAwayToken_(m_lookahead_queue_[0].m_data);
                    m_lookahead_queue_[0].m_id = Terminal::ERROR_;
                    m_lookahead_queue_[0].m_data = NULL;
                    m_is_in_error_panic_ = false;
                    break;
                }
                else
                {
                    if (m_stack_.size() > 1)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 177 "barf_targetspec_parser.cpp"
 << " continue error panic; pop stack (current state doesn't accept ERROR_ token)" << std::endl;)
                    }
                    else
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 185 "barf_targetspec_parser.cpp"
 << " end error panic; abort (stack is empty)" << std::endl;)
                    }
                    // otherwise throw away the data at the top of the stack, and pop the stack.
                    // then if the stack is empty, an unhandled parse error occurred.
                    ThrowAwayToken_(m_stack_.rbegin()->m_token_data);
                    m_stack_.resize(m_stack_.size()-1);
                    if (m_stack_.empty())
                    {
                        // parser_return_code_ and return_token are already appropriately
                        // set, so just break out of the inner loop.
                        break;
                    }
                }
            }

            // if we're still in error panic, then this indicates that we bottomed-
            // out the stack and it's an unhandled parse error, so break from the
            // main loop.
            if (m_is_in_error_panic_)
                break;
        }
        else // !m_is_in_error_panic_
        {
            // get the current state (top of the stack)
            assert(!m_stack_.empty());
            BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
            assert(current_state_index < ms_state_count_);
            State_ const &current_state = ms_state_table_[current_state_index];
            TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr);)

            // TODO -- binary search for faster transition matching?

            // loop through the current state's transitions and see if any match
            bool transition_exercised = false;
            BarfCpp_::Uint32 tested_lookahead_count = 0;
            for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                   *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                transition != transition_end;
                ++transition)
            {
                // the non-default transitions can only be REDUCE or SHIFT
                assert(transition->m_type == Transition_::REDUCE || transition->m_type == Transition_::SHIFT);

                // check if the lookaheads match those of this transition.
                bool lookahead_sequence_matched = true;
                for (BarfCpp_::Uint32 i = 0; i < transition->m_lookahead_count; ++i)
                {
                    if (Lookahead_(i).m_id != transition->m_lookahead_sequence[i])
                    {
                        lookahead_sequence_matched = false;
                        break;
                    }
                    else
                    {
                        if (i+1 > tested_lookahead_count)
                            tested_lookahead_count = i+1;
                    }
                }

                // if all the lookaheads matched, then exercise this transition,
                // and break out of this inner (transition) loop.
                if (lookahead_sequence_matched)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 252 "barf_targetspec_parser.cpp"
 << " current (relevant) lookahead(s):";)
                    for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i);)
                    }
                    TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl;)

                    ExerciseTransition_(*transition);
                    transition_exercised = true;
                    break;
                }
            }

            // if no transition was exercised, then exercise the default transition
            if (!transition_exercised)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 272 "barf_targetspec_parser.cpp"
 << " current (relevant) lookahead(s):";)
                for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i);)
                }
                TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl;)

                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 283 "barf_targetspec_parser.cpp"
 << " exercising default transition" << std::endl;)
                // exercise the default transition.  a return value of true indicates
                // that the parser should return.
                if (ExerciseTransition_(*current_state.m_transition_table))
                {
                    // the token (data) on the top of the stack is the return token.
                    // set parser_return_code_ and assign the top stack token data to
                    // *return_token and then break out of the main parser loop.
                    assert(m_stack_[0].m_state_index == BarfCpp_::Uint32(nonterminal_to_parse));
                    assert(m_stack_.size() == 2);
                    parser_return_code_ = PRC_SUCCESS;
                    *return_token = m_stack_.rbegin()->m_token_data;
                    // take the return token out of the stack, so it's not thrown away
                    // when we clear the stack later.
                    m_stack_.rbegin()->m_token_data = NULL;
                    break;
                }
            }
        }
    }

    // clear the stack, because we won't need it for the next parse.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();

    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_SUCCESS) std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 314 "barf_targetspec_parser.cpp"
 << " Parse() is returning PRC_SUCCESS" << std::endl;)
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_UNHANDLED_PARSE_ERROR) std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 319 "barf_targetspec_parser.cpp"
 << " Parse() is returning PRC_UNHANDLED_PARSE_ERROR" << std::endl;)

    return parser_return_code_;
}

void Parser::ThrowAwayToken_ (Token::Data &token_data) throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 330 "barf_targetspec_parser.cpp"
 << " executing throw-away-token actions" << std::endl;)


#line 91 "barf_targetspec_parser.trison"

    delete token_data;

#line 338 "barf_targetspec_parser.cpp"
}

Parser::Token Parser::Scan_ () throw()
{

#line 94 "barf_targetspec_parser.trison"

    Ast::Base *lookahead_token_data = NULL;
    CommonLang::Scanner::Token::Type scanner_token_type = m_scanner.Scan(&lookahead_token_data);
    assert(scanner_token_type >= 0);
    if (scanner_token_type < 0x100)
        return Token(scanner_token_type);
    switch (scanner_token_type)
    {
        case CommonLang::Scanner::Token::BAD_END_OF_FILE:                  return Token(Terminal::END_, lookahead_token_data);
        case CommonLang::Scanner::Token::BAD_TOKEN:                        return Token(Terminal::BAD_TOKEN, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_CODESPEC:           return Token(Terminal::DIRECTIVE_ADD_CODESPEC, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE: return Token(Terminal::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_ADD_REQUIRED_DIRECTIVE: return Token(Terminal::DIRECTIVE_ADD_REQUIRED_DIRECTIVE, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_DEFAULT:                return Token(Terminal::DIRECTIVE_DEFAULT, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_DUMB_CODE_BLOCK:        return Token(Terminal::DIRECTIVE_DUMB_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_ID:                     return Token(Terminal::DIRECTIVE_ID, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_STRICT_CODE_BLOCK:      return Token(Terminal::DIRECTIVE_STRICT_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_STRING:                 return Token(Terminal::DIRECTIVE_STRING, lookahead_token_data);
        case CommonLang::Scanner::Token::DIRECTIVE_TARGET:                 return Token(Terminal::DIRECTIVE_TARGET, lookahead_token_data);
        case CommonLang::Scanner::Token::DUMB_CODE_BLOCK:                  return Token(Terminal::DUMB_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::END_OF_FILE:                      return Token(Terminal::END_, lookahead_token_data);
        case CommonLang::Scanner::Token::ID:                               return Token(Terminal::ID, lookahead_token_data);
        case CommonLang::Scanner::Token::NEWLINE:                          return Token(Terminal::NEWLINE, lookahead_token_data);
        case CommonLang::Scanner::Token::STRICT_CODE_BLOCK:                return Token(Terminal::STRICT_CODE_BLOCK, lookahead_token_data);
        case CommonLang::Scanner::Token::STRING_LITERAL:                   return Token(Terminal::STRING_LITERAL, lookahead_token_data);

        case CommonLang::Scanner::Token::CHAR_LITERAL:
        case CommonLang::Scanner::Token::DIRECTIVE_DEFAULT_PARSE_NONTERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_ERROR:
        case CommonLang::Scanner::Token::DIRECTIVE_MACRO:
        case CommonLang::Scanner::Token::DIRECTIVE_NONTERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_PREC:
        case CommonLang::Scanner::Token::DIRECTIVE_START_IN_SCANNER_MODE:
        case CommonLang::Scanner::Token::DIRECTIVE_STATE:
        case CommonLang::Scanner::Token::DIRECTIVE_TARGETS:
        case CommonLang::Scanner::Token::DIRECTIVE_TERMINAL:
        case CommonLang::Scanner::Token::DIRECTIVE_TYPE:
        case CommonLang::Scanner::Token::END_PREAMBLE:
        case CommonLang::Scanner::Token::REGEX:
            assert(lookahead_token_data != NULL);
            EmitError("unrecognized token encountered in targetspec", lookahead_token_data->GetFiLoc());
            delete lookahead_token_data;
            lookahead_token_data = NULL;
            return Token(Terminal::BAD_TOKEN);

        default:
            assert(false && "this should never happen");
            return Token(Terminal::BAD_TOKEN);
    }

#line 395 "barf_targetspec_parser.cpp"
}

void Parser::ClearStack_ () throw()
{
    if (m_stack_.empty())
        return; // nothing to do

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 406 "barf_targetspec_parser.cpp"
 << " clearing the stack" << std::endl;)

    Stack_::iterator it = m_stack_.begin();
    Stack_::iterator it_end = m_stack_.end();
    // skip the bottom of the stack, since it
    // contains the start state and no token data.
    ++it;
    for ( ; it != it_end; ++it)
        ThrowAwayToken_(it->m_token_data);
    m_stack_.clear();
}

void Parser::ClearLookaheadQueue_ () throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 424 "barf_targetspec_parser.cpp"
 << " clearing the lookahead queue" << std::endl;)

    for (LookaheadQueue_::iterator it = m_lookahead_queue_.begin(), it_end = m_lookahead_queue_.end(); it != it_end; ++it)
        ThrowAwayToken_(it->m_data);
    m_lookahead_queue_.clear();
}

Parser::Token const &Parser::Lookahead_ (LookaheadQueue_::size_type index) throw()
{
    while (index >= m_lookahead_queue_.size())
    {
        m_lookahead_queue_.push_back(Scan_());

        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 441 "barf_targetspec_parser.cpp"
 << " pushed " << *m_lookahead_queue_.rbegin() << " onto back of lookahead queue" << std::endl;)
    }
    return m_lookahead_queue_[index];
}

bool Parser::ExerciseTransition_ (Transition_ const &transition)
{
    switch (transition.m_type)
    {
        case Transition_::REDUCE:
        {
            // execute the indicated reduction rule, push the returned Token
            // onto the front of the lookahead queue, then pop the corresponding
            // number of stack elements.
            assert(transition.m_data < ms_rule_count_);
            Rule_ const &rule = ms_rule_table_[transition.m_data];
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 461 "barf_targetspec_parser.cpp"
 << " REDUCE " << rule.m_description << std::endl;)
            assert(m_stack_.size() > rule.m_token_count);
            m_lookahead_queue_.push_front(
                Token(
                    rule.m_reduction_nonterminal_token_id,
                    ExecuteReductionRule_(transition.m_data)));
            m_stack_.resize(m_stack_.size() - rule.m_token_count);
            assert(rule.m_reduction_nonterminal_token_id < ms_token_name_count_);
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 473 "barf_targetspec_parser.cpp"
 << " pushed " << Token(rule.m_reduction_nonterminal_token_id) << " onto front of lookahead queue" << std::endl;)
            return false; // indicating the parser isn't returning
        }

        case Transition_::RETURN:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 482 "barf_targetspec_parser.cpp"
 << " RETURN" << std::endl;)
            return true; // indicating the parser is returning

        case Transition_::SHIFT:
            // push the state (indicated by the shift transition) and token data
            // onto the stack, then pop the corresponding lookahead.
            assert(transition.m_data < ms_state_count_);
            assert(Lookahead_(0).m_id < ms_token_name_count_); // at this point, we're past a possible
                                                               // client error, so asserting here is ok.
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 495 "barf_targetspec_parser.cpp"
 << " SHIFT " << Lookahead_(0) << std::endl;)
            m_stack_.push_back(StackElement_(transition.m_data, Lookahead_(0).m_data));
            m_lookahead_queue_.pop_front();
            return false; // indicating the parser isn't returning

        case Transition_::ERROR_PANIC:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 505 "barf_targetspec_parser.cpp"
 << " ERROR_PANIC" << std::endl;)
            m_is_in_error_panic_ = true;
            return false; // indicating the parser isn't returning

        default:
            assert(false && "invalid transition type (bad state machine, or memory corruption)");
            return false; // indicating the parser isn't returning
    }
}

Parser::Token::Data Parser::ExecuteReductionRule_ (BarfCpp_::Uint32 const rule_index_)
{
    assert(rule_index_ < ms_rule_count_);
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 522 "barf_targetspec_parser.cpp"
 << " executing reduction rule " << rule_index_ << std::endl;)
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return NULL;

        case 0:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * target(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 180 "barf_targetspec_parser.trison"

        assert(m_add_codespec_list != NULL);
        assert(m_add_directive_map != NULL);
        return new Specification(
            target,
            m_add_codespec_list,
            m_add_directive_map);
    
#line 544 "barf_targetspec_parser.cpp"
            break;
        }

        case 1:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::Id * target_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 197 "barf_targetspec_parser.trison"

        delete throwaway;
        return target_id;
    
#line 559 "barf_targetspec_parser.cpp"
            break;
        }

        case 2:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 209 "barf_targetspec_parser.trison"
 return NULL; 
#line 569 "barf_targetspec_parser.cpp"
            break;
        }

        case 3:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 211 "barf_targetspec_parser.trison"
 return NULL; 
#line 579 "barf_targetspec_parser.cpp"
            break;
        }

        case 4:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 213 "barf_targetspec_parser.trison"
 return NULL; 
#line 589 "barf_targetspec_parser.cpp"
            break;
        }

        case 5:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::String * filename(Dsc<Ast::String *>(m_stack_[m_stack_.size()-2].m_token_data));
            Ast::Id * filename_directive_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 219 "barf_targetspec_parser.trison"

        assert(m_add_codespec_list != NULL);
        assert(m_add_directive_map != NULL);
        AddDirective *add_directive = m_add_directive_map->GetElement(filename_directive_id->GetText());
        if (add_directive == NULL)
            EmitError("undeclared directive id \"" + filename_directive_id->GetText() + "\" in add_codespec directive", throwaway->GetFiLoc());
        if (add_directive == NULL || !add_directive->GetIsRequired() || add_directive->m_param_type != Ast::AST_STRING)
            EmitError("directive id \"" + filename_directive_id->GetText() + "\" in add_codespec directive must refer to a required directive accepting param type %string", throwaway->GetFiLoc());
        if (filename->GetText().find_first_of(DIRECTORY_SLASH_STRING) != string::npos)
            EmitError("filename portion \"" + filename->GetText() + "\" of %add_codespec directive may not contain slash (directory-delimiting) characters", throwaway->GetFiLoc());
        m_add_codespec_list->Append(new AddCodespec(filename, filename_directive_id));
        delete throwaway;
        return NULL;
    
#line 615 "barf_targetspec_parser.cpp"
            break;
        }

        case 6:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::Id * directive_to_add_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));
            ParamType * param_type(Dsc<ParamType *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 238 "barf_targetspec_parser.trison"

        assert(m_add_directive_map != NULL);
        m_add_directive_map->Add(
            directive_to_add_id->GetText(),
            new AddOptionalDirective(directive_to_add_id, param_type->m_param_type, NULL));
        delete throwaway;
        delete param_type;
        return NULL;
    
#line 636 "barf_targetspec_parser.cpp"
            break;
        }

        case 7:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway1(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-5].m_token_data));
            Ast::Id * directive_to_add_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-4].m_token_data));
            ParamType * param_type(Dsc<ParamType *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::ThrowAway * throwaway2(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-2].m_token_data));
            Ast::TextBase * default_value(Dsc<Ast::TextBase *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 249 "barf_targetspec_parser.trison"

        assert(m_add_directive_map != NULL);
        AddDirective *directive =
            new AddOptionalDirective(
                directive_to_add_id,
                param_type->m_param_type, default_value);
        m_add_directive_map->Add(
            directive_to_add_id->GetText(),
            directive);
        if (param_type->m_param_type != default_value->GetAstType())
            EmitError(
                "type mismatch for default value for directive " + directive->GetDirectiveString() +
                "; was expecting type " + Ast::TextBase::GetDirectiveTypeString(param_type->m_param_type) +
                " but got type " + Ast::TextBase::GetDirectiveTypeString(default_value->GetAstType()),
                throwaway1->GetFiLoc());
        delete throwaway1;
        delete param_type;
        delete throwaway2;
        return NULL;
    
#line 670 "barf_targetspec_parser.cpp"
            break;
        }

        case 8:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::ThrowAway * throwaway(Dsc<Ast::ThrowAway *>(m_stack_[m_stack_.size()-3].m_token_data));
            Ast::Id * directive_to_add_id(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-2].m_token_data));
            ParamType * param_type(Dsc<ParamType *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 271 "barf_targetspec_parser.trison"

        assert(m_add_directive_map != NULL);
        m_add_directive_map->Add(
            directive_to_add_id->GetText(),
            new AddRequiredDirective(directive_to_add_id, param_type->m_param_type));
        delete throwaway;
        delete param_type;
        return NULL;
    
#line 691 "barf_targetspec_parser.cpp"
            break;
        }

        case 9:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 285 "barf_targetspec_parser.trison"

        return new ParamType(Ast::AST_NONE);
    
#line 703 "barf_targetspec_parser.cpp"
            break;
        }

        case 10:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Base * throwaway(m_stack_[m_stack_.size()-1].m_token_data);

#line 290 "barf_targetspec_parser.trison"

        delete throwaway;
        return new ParamType(Ast::AST_ID);
    
#line 717 "barf_targetspec_parser.cpp"
            break;
        }

        case 11:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Base * throwaway(m_stack_[m_stack_.size()-1].m_token_data);

#line 296 "barf_targetspec_parser.trison"

        delete throwaway;
        return new ParamType(Ast::AST_STRING);
    
#line 731 "barf_targetspec_parser.cpp"
            break;
        }

        case 12:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Base * throwaway(m_stack_[m_stack_.size()-1].m_token_data);

#line 302 "barf_targetspec_parser.trison"

        delete throwaway;
        return new ParamType(Ast::AST_DUMB_CODE_BLOCK);
    
#line 745 "barf_targetspec_parser.cpp"
            break;
        }

        case 13:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Base * throwaway(m_stack_[m_stack_.size()-1].m_token_data);

#line 308 "barf_targetspec_parser.trison"

        delete throwaway;
        return new ParamType(Ast::AST_STRICT_CODE_BLOCK);
    
#line 759 "barf_targetspec_parser.cpp"
            break;
        }

        case 14:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::Id * value(Dsc<Ast::Id *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 316 "barf_targetspec_parser.trison"
 return value; 
#line 770 "barf_targetspec_parser.cpp"
            break;
        }

        case 15:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::String * value(Dsc<Ast::String *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 317 "barf_targetspec_parser.trison"
 return value; 
#line 781 "barf_targetspec_parser.cpp"
            break;
        }

        case 16:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::DumbCodeBlock * value(Dsc<Ast::DumbCodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 318 "barf_targetspec_parser.trison"
 return value; 
#line 792 "barf_targetspec_parser.cpp"
            break;
        }

        case 17:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            Ast::StrictCodeBlock * value(Dsc<Ast::StrictCodeBlock *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 319 "barf_targetspec_parser.trison"
 return value; 
#line 803 "barf_targetspec_parser.cpp"
            break;
        }

        case 18:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 328 "barf_targetspec_parser.trison"
 return NULL; 
#line 813 "barf_targetspec_parser.cpp"
            break;
        }

        case 19:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 330 "barf_targetspec_parser.trison"
 return NULL; 
#line 823 "barf_targetspec_parser.cpp"
            break;
        }

        case 20:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 335 "barf_targetspec_parser.trison"
 return NULL; 
#line 833 "barf_targetspec_parser.cpp"
            break;
        }

        case 21:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 337 "barf_targetspec_parser.trison"
 return NULL; 
#line 843 "barf_targetspec_parser.cpp"
            break;
        }

    }

    assert(false && "no value returned from reduction rule code block");
    return NULL;
}

void Parser::PrintParserStatus_ (std::ostream &stream) const
{
    assert(!m_stack_.empty());

    stream << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 860 "barf_targetspec_parser.cpp"
 << " parser stack: ";
    for (Stack_::const_iterator it = m_stack_.begin(), it_end = m_stack_.end(); it != it_end; ++it)
    {
        stream << it->m_state_index;
        Stack_::const_iterator next_it = it;
        if (++next_it != it_end)
            stream << ' ';
    }
    stream << std::endl;

    PrintIndented_(stream, ms_state_table_[m_stack_.rbegin()->m_state_index].m_description);
    stream << std::endl;
}

void Parser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 881 "barf_targetspec_parser.cpp"
 << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << 
#line 147 "barf_targetspec_parser.trison"
"TargetSpec::Parser (at " << GetFiLoc() << "):"
#line 889 "barf_targetspec_parser.cpp"
 << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, Parser::Token const &token)
{
    if (token.m_id < Parser::ms_token_name_count_)
        stream << '(' << Parser::ms_token_name_table_[token.m_id] << ')';
    else
        stream << "!INVALID TOKEN!";
    return stream;
}

Parser::Rule_ const Parser::ms_rule_table_[] =
{
    { Parser::Nonterminal_::root, 3, "root <- at_least_zero_newlines target directives" },
    { Parser::Nonterminal_::target, 3, "target <- DIRECTIVE_TARGET ID at_least_one_newline" },
    { Parser::Nonterminal_::directives, 3, "directives <- directives add_codespec at_least_one_newline" },
    { Parser::Nonterminal_::directives, 3, "directives <- directives add_directive at_least_one_newline" },
    { Parser::Nonterminal_::directives, 0, "directives <-" },
    { Parser::Nonterminal_::add_codespec, 3, "add_codespec <- DIRECTIVE_ADD_CODESPEC STRING_LITERAL ID" },
    { Parser::Nonterminal_::add_directive, 3, "add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec" },
    { Parser::Nonterminal_::add_directive, 5, "add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec DIRECTIVE_DEFAULT default_value" },
    { Parser::Nonterminal_::add_directive, 3, "add_directive <- DIRECTIVE_ADD_REQUIRED_DIRECTIVE ID param_spec" },
    { Parser::Nonterminal_::param_spec, 0, "param_spec <-" },
    { Parser::Nonterminal_::param_spec, 1, "param_spec <- DIRECTIVE_ID" },
    { Parser::Nonterminal_::param_spec, 1, "param_spec <- DIRECTIVE_STRING" },
    { Parser::Nonterminal_::param_spec, 1, "param_spec <- DIRECTIVE_DUMB_CODE_BLOCK" },
    { Parser::Nonterminal_::param_spec, 1, "param_spec <- DIRECTIVE_STRICT_CODE_BLOCK" },
    { Parser::Nonterminal_::default_value, 1, "default_value <- ID" },
    { Parser::Nonterminal_::default_value, 1, "default_value <- STRING_LITERAL" },
    { Parser::Nonterminal_::default_value, 1, "default_value <- DUMB_CODE_BLOCK" },
    { Parser::Nonterminal_::default_value, 1, "default_value <- STRICT_CODE_BLOCK" },
    { Parser::Nonterminal_::at_least_zero_newlines, 2, "at_least_zero_newlines <- at_least_zero_newlines NEWLINE" },
    { Parser::Nonterminal_::at_least_zero_newlines, 0, "at_least_zero_newlines <-" },
    { Parser::Nonterminal_::at_least_one_newline, 2, "at_least_one_newline <- at_least_one_newline NEWLINE" },
    { Parser::Nonterminal_::at_least_one_newline, 1, "at_least_one_newline <- NEWLINE" }
};
BarfCpp_::Size const Parser::ms_rule_count_ = sizeof(Parser::ms_rule_table_) / sizeof(*Parser::ms_rule_table_);

Parser::State_ const Parser::ms_state_table_[] =
{
    { 3, ms_transition_table_+0, "START root                                                         \nrule 0: root <- . at_least_zero_newlines target directives         \nrule 18: at_least_zero_newlines <- . at_least_zero_newlines NEWLINE\nrule 19: at_least_zero_newlines <- .                               " },
    { 1, ms_transition_table_+3, "RETURN root" },
    { 4, ms_transition_table_+4, "rule 0: root <- at_least_zero_newlines . target directives         \nrule 18: at_least_zero_newlines <- at_least_zero_newlines . NEWLINE\nrule 1: target <- . DIRECTIVE_TARGET ID at_least_one_newline       " },
    { 2, ms_transition_table_+8, "rule 1: target <- DIRECTIVE_TARGET . ID at_least_one_newline" },
    { 3, ms_transition_table_+10, "rule 1: target <- DIRECTIVE_TARGET ID . at_least_one_newline   \nrule 20: at_least_one_newline <- . at_least_one_newline NEWLINE\nrule 21: at_least_one_newline <- . NEWLINE                     " },
    { 1, ms_transition_table_+13, "rule 21: at_least_one_newline <- NEWLINE ." },
    { 2, ms_transition_table_+14, "rule 1: target <- DIRECTIVE_TARGET ID at_least_one_newline .   \nrule 20: at_least_one_newline <- at_least_one_newline . NEWLINE" },
    { 1, ms_transition_table_+16, "rule 20: at_least_one_newline <- at_least_one_newline NEWLINE ." },
    { 1, ms_transition_table_+17, "rule 18: at_least_zero_newlines <- at_least_zero_newlines NEWLINE ." },
    { 2, ms_transition_table_+18, "rule 0: root <- at_least_zero_newlines target . directives           \nrule 2: directives <- . directives add_codespec at_least_one_newline \nrule 3: directives <- . directives add_directive at_least_one_newline\nrule 4: directives <- .                                              " },
    { 6, ms_transition_table_+20, "rule 0: root <- at_least_zero_newlines target directives .                                               \nrule 2: directives <- directives . add_codespec at_least_one_newline                                     \nrule 5: add_codespec <- . DIRECTIVE_ADD_CODESPEC STRING_LITERAL ID                                       \nrule 3: directives <- directives . add_directive at_least_one_newline                                    \nrule 6: add_directive <- . DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec                                \nrule 7: add_directive <- . DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec DIRECTIVE_DEFAULT default_value\nrule 8: add_directive <- . DIRECTIVE_ADD_REQUIRED_DIRECTIVE ID param_spec                                " },
    { 2, ms_transition_table_+26, "rule 5: add_codespec <- DIRECTIVE_ADD_CODESPEC . STRING_LITERAL ID" },
    { 2, ms_transition_table_+28, "rule 5: add_codespec <- DIRECTIVE_ADD_CODESPEC STRING_LITERAL . ID" },
    { 1, ms_transition_table_+30, "rule 5: add_codespec <- DIRECTIVE_ADD_CODESPEC STRING_LITERAL ID ." },
    { 2, ms_transition_table_+31, "rule 6: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE . ID param_spec                                \nrule 7: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE . ID param_spec DIRECTIVE_DEFAULT default_value" },
    { 6, ms_transition_table_+33, "rule 6: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID . param_spec                                \nrule 9: param_spec <- .                                                                                  \nrule 10: param_spec <- . DIRECTIVE_ID                                                                    \nrule 11: param_spec <- . DIRECTIVE_STRING                                                                \nrule 12: param_spec <- . DIRECTIVE_DUMB_CODE_BLOCK                                                       \nrule 13: param_spec <- . DIRECTIVE_STRICT_CODE_BLOCK                                                     \nrule 7: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID . param_spec DIRECTIVE_DEFAULT default_value" },
    { 1, ms_transition_table_+39, "rule 12: param_spec <- DIRECTIVE_DUMB_CODE_BLOCK ." },
    { 1, ms_transition_table_+40, "rule 10: param_spec <- DIRECTIVE_ID ." },
    { 1, ms_transition_table_+41, "rule 13: param_spec <- DIRECTIVE_STRICT_CODE_BLOCK ." },
    { 1, ms_transition_table_+42, "rule 11: param_spec <- DIRECTIVE_STRING ." },
    { 2, ms_transition_table_+43, "rule 6: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec .                                \nrule 7: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec . DIRECTIVE_DEFAULT default_value" },
    { 6, ms_transition_table_+45, "rule 7: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec DIRECTIVE_DEFAULT . default_value\nrule 14: default_value <- . ID                                                                           \nrule 15: default_value <- . STRING_LITERAL                                                               \nrule 16: default_value <- . DUMB_CODE_BLOCK                                                              \nrule 17: default_value <- . STRICT_CODE_BLOCK                                                            " },
    { 1, ms_transition_table_+51, "rule 16: default_value <- DUMB_CODE_BLOCK ." },
    { 1, ms_transition_table_+52, "rule 14: default_value <- ID ." },
    { 1, ms_transition_table_+53, "rule 17: default_value <- STRICT_CODE_BLOCK ." },
    { 1, ms_transition_table_+54, "rule 15: default_value <- STRING_LITERAL ." },
    { 1, ms_transition_table_+55, "rule 7: add_directive <- DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec DIRECTIVE_DEFAULT default_value ." },
    { 2, ms_transition_table_+56, "rule 8: add_directive <- DIRECTIVE_ADD_REQUIRED_DIRECTIVE . ID param_spec" },
    { 6, ms_transition_table_+58, "rule 9: param_spec <- .                                                  \nrule 10: param_spec <- . DIRECTIVE_ID                                    \nrule 11: param_spec <- . DIRECTIVE_STRING                                \nrule 12: param_spec <- . DIRECTIVE_DUMB_CODE_BLOCK                       \nrule 13: param_spec <- . DIRECTIVE_STRICT_CODE_BLOCK                     \nrule 8: add_directive <- DIRECTIVE_ADD_REQUIRED_DIRECTIVE ID . param_spec" },
    { 1, ms_transition_table_+64, "rule 8: add_directive <- DIRECTIVE_ADD_REQUIRED_DIRECTIVE ID param_spec ." },
    { 3, ms_transition_table_+65, "rule 20: at_least_one_newline <- . at_least_one_newline NEWLINE     \nrule 21: at_least_one_newline <- . NEWLINE                          \nrule 2: directives <- directives add_codespec . at_least_one_newline" },
    { 2, ms_transition_table_+68, "rule 20: at_least_one_newline <- at_least_one_newline . NEWLINE     \nrule 2: directives <- directives add_codespec at_least_one_newline ." },
    { 3, ms_transition_table_+70, "rule 20: at_least_one_newline <- . at_least_one_newline NEWLINE      \nrule 21: at_least_one_newline <- . NEWLINE                           \nrule 3: directives <- directives add_directive . at_least_one_newline" },
    { 2, ms_transition_table_+73, "rule 20: at_least_one_newline <- at_least_one_newline . NEWLINE      \nrule 3: directives <- directives add_directive at_least_one_newline ." },
    { 3, ms_transition_table_+75, "START target                                                \nrule 1: target <- . DIRECTIVE_TARGET ID at_least_one_newline" },
    { 1, ms_transition_table_+78, "RETURN target" },
    { 2, ms_transition_table_+79, "START directives                                                     \nrule 2: directives <- . directives add_codespec at_least_one_newline \nrule 3: directives <- . directives add_directive at_least_one_newline\nrule 4: directives <- .                                              " },
    { 6, ms_transition_table_+81, "RETURN directives                                                                                        \nrule 2: directives <- directives . add_codespec at_least_one_newline                                     \nrule 5: add_codespec <- . DIRECTIVE_ADD_CODESPEC STRING_LITERAL ID                                       \nrule 3: directives <- directives . add_directive at_least_one_newline                                    \nrule 6: add_directive <- . DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec                                \nrule 7: add_directive <- . DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec DIRECTIVE_DEFAULT default_value\nrule 8: add_directive <- . DIRECTIVE_ADD_REQUIRED_DIRECTIVE ID param_spec                                " },
    { 3, ms_transition_table_+87, "START add_codespec                                                \nrule 5: add_codespec <- . DIRECTIVE_ADD_CODESPEC STRING_LITERAL ID" },
    { 1, ms_transition_table_+90, "RETURN add_codespec" },
    { 4, ms_transition_table_+91, "START add_directive                                                                                      \nrule 6: add_directive <- . DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec                                \nrule 7: add_directive <- . DIRECTIVE_ADD_OPTIONAL_DIRECTIVE ID param_spec DIRECTIVE_DEFAULT default_value\nrule 8: add_directive <- . DIRECTIVE_ADD_REQUIRED_DIRECTIVE ID param_spec                                " },
    { 1, ms_transition_table_+95, "RETURN add_directive" },
    { 6, ms_transition_table_+96, "START param_spec                                    \nrule 9: param_spec <- .                             \nrule 10: param_spec <- . DIRECTIVE_ID               \nrule 11: param_spec <- . DIRECTIVE_STRING           \nrule 12: param_spec <- . DIRECTIVE_DUMB_CODE_BLOCK  \nrule 13: param_spec <- . DIRECTIVE_STRICT_CODE_BLOCK" },
    { 1, ms_transition_table_+102, "RETURN param_spec" },
    { 6, ms_transition_table_+103, "START default_value                          \nrule 14: default_value <- . ID               \nrule 15: default_value <- . STRING_LITERAL   \nrule 16: default_value <- . DUMB_CODE_BLOCK  \nrule 17: default_value <- . STRICT_CODE_BLOCK" },
    { 1, ms_transition_table_+109, "RETURN default_value" },
    { 2, ms_transition_table_+110, "START at_least_zero_newlines                                       \nrule 18: at_least_zero_newlines <- . at_least_zero_newlines NEWLINE\nrule 19: at_least_zero_newlines <- .                               " },
    { 2, ms_transition_table_+112, "RETURN at_least_zero_newlines                                      \nrule 18: at_least_zero_newlines <- at_least_zero_newlines . NEWLINE" },
    { 3, ms_transition_table_+114, "START at_least_one_newline                                     \nrule 20: at_least_one_newline <- . at_least_one_newline NEWLINE\nrule 21: at_least_one_newline <- . NEWLINE                     " },
    { 2, ms_transition_table_+117, "RETURN at_least_one_newline                                    \nrule 20: at_least_one_newline <- at_least_one_newline . NEWLINE" }
};
BarfCpp_::Size const Parser::ms_state_count_ = sizeof(Parser::ms_state_table_) / sizeof(*Parser::ms_state_table_);

Parser::Transition_ const Parser::ms_transition_table_[] =
{
    { Parser::Transition_::REDUCE, 19, 0, ms_lookahead_table_+0 },
    { Parser::Transition_::SHIFT, 1, 1, ms_lookahead_table_+0 },
    { Parser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+1 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+2 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+2 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+2 },
    { Parser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+3 },
    { Parser::Transition_::SHIFT, 9, 1, ms_lookahead_table_+4 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+5 },
    { Parser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+5 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+6 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+6 },
    { Parser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+7 },
    { Parser::Transition_::REDUCE, 21, 0, ms_lookahead_table_+8 },
    { Parser::Transition_::REDUCE, 1, 0, ms_lookahead_table_+8 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+8 },
    { Parser::Transition_::REDUCE, 20, 0, ms_lookahead_table_+9 },
    { Parser::Transition_::REDUCE, 18, 0, ms_lookahead_table_+9 },
    { Parser::Transition_::REDUCE, 4, 0, ms_lookahead_table_+9 },
    { Parser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+9 },
    { Parser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+10 },
    { Parser::Transition_::SHIFT, 11, 1, ms_lookahead_table_+10 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+11 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+12 },
    { Parser::Transition_::SHIFT, 30, 1, ms_lookahead_table_+13 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+14 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+15 },
    { Parser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+15 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+16 },
    { Parser::Transition_::SHIFT, 13, 1, ms_lookahead_table_+16 },
    { Parser::Transition_::REDUCE, 5, 0, ms_lookahead_table_+17 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+17 },
    { Parser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+17 },
    { Parser::Transition_::REDUCE, 9, 0, ms_lookahead_table_+18 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+18 },
    { Parser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+19 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+20 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+21 },
    { Parser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+22 },
    { Parser::Transition_::REDUCE, 12, 0, ms_lookahead_table_+23 },
    { Parser::Transition_::REDUCE, 10, 0, ms_lookahead_table_+23 },
    { Parser::Transition_::REDUCE, 13, 0, ms_lookahead_table_+23 },
    { Parser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+23 },
    { Parser::Transition_::REDUCE, 6, 0, ms_lookahead_table_+23 },
    { Parser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+23 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+24 },
    { Parser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+24 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+25 },
    { Parser::Transition_::SHIFT, 24, 1, ms_lookahead_table_+26 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+27 },
    { Parser::Transition_::SHIFT, 26, 1, ms_lookahead_table_+28 },
    { Parser::Transition_::REDUCE, 16, 0, ms_lookahead_table_+29 },
    { Parser::Transition_::REDUCE, 14, 0, ms_lookahead_table_+29 },
    { Parser::Transition_::REDUCE, 17, 0, ms_lookahead_table_+29 },
    { Parser::Transition_::REDUCE, 15, 0, ms_lookahead_table_+29 },
    { Parser::Transition_::REDUCE, 7, 0, ms_lookahead_table_+29 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+29 },
    { Parser::Transition_::SHIFT, 28, 1, ms_lookahead_table_+29 },
    { Parser::Transition_::REDUCE, 9, 0, ms_lookahead_table_+30 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+30 },
    { Parser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+31 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+32 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+33 },
    { Parser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+34 },
    { Parser::Transition_::REDUCE, 8, 0, ms_lookahead_table_+35 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+35 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+35 },
    { Parser::Transition_::SHIFT, 31, 1, ms_lookahead_table_+36 },
    { Parser::Transition_::REDUCE, 2, 0, ms_lookahead_table_+37 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+37 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+38 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+38 },
    { Parser::Transition_::SHIFT, 33, 1, ms_lookahead_table_+39 },
    { Parser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+40 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+40 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+41 },
    { Parser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+41 },
    { Parser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+42 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+43 },
    { Parser::Transition_::REDUCE, 4, 0, ms_lookahead_table_+43 },
    { Parser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+43 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+44 },
    { Parser::Transition_::SHIFT, 11, 1, ms_lookahead_table_+44 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+45 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+46 },
    { Parser::Transition_::SHIFT, 30, 1, ms_lookahead_table_+47 },
    { Parser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+48 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+49 },
    { Parser::Transition_::SHIFT, 11, 1, ms_lookahead_table_+49 },
    { Parser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+50 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+51 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+51 },
    { Parser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+51 },
    { Parser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+52 },
    { Parser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+53 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+54 },
    { Parser::Transition_::REDUCE, 9, 0, ms_lookahead_table_+54 },
    { Parser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+54 },
    { Parser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+55 },
    { Parser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+56 },
    { Parser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+57 },
    { Parser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+58 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+59 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+59 },
    { Parser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+59 },
    { Parser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+60 },
    { Parser::Transition_::SHIFT, 24, 1, ms_lookahead_table_+61 },
    { Parser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+62 },
    { Parser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+63 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+64 },
    { Parser::Transition_::REDUCE, 19, 0, ms_lookahead_table_+64 },
    { Parser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+64 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+65 },
    { Parser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+65 },
    { Parser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+66 },
    { Parser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+66 },
    { Parser::Transition_::SHIFT, 49, 1, ms_lookahead_table_+67 },
    { Parser::Transition_::RETURN, 0, 0, ms_lookahead_table_+68 },
    { Parser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+68 }
};
BarfCpp_::Size const Parser::ms_transition_count_ = sizeof(Parser::ms_transition_table_) / sizeof(*Parser::ms_transition_table_);

Parser::Token::Id const Parser::ms_lookahead_table_[] =
{
    Parser::Nonterminal_::root,
    Parser::Nonterminal_::at_least_zero_newlines,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::target,
    Parser::Terminal::ID,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::directives,
    Parser::Terminal::DIRECTIVE_ADD_CODESPEC,
    Parser::Terminal::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE,
    Parser::Terminal::DIRECTIVE_ADD_REQUIRED_DIRECTIVE,
    Parser::Nonterminal_::add_codespec,
    Parser::Nonterminal_::add_directive,
    Parser::Terminal::STRING_LITERAL,
    Parser::Terminal::ID,
    Parser::Terminal::ID,
    Parser::Terminal::DIRECTIVE_DUMB_CODE_BLOCK,
    Parser::Terminal::DIRECTIVE_ID,
    Parser::Terminal::DIRECTIVE_STRICT_CODE_BLOCK,
    Parser::Terminal::DIRECTIVE_STRING,
    Parser::Nonterminal_::param_spec,
    Parser::Terminal::DIRECTIVE_DEFAULT,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::ID,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Terminal::STRING_LITERAL,
    Parser::Nonterminal_::default_value,
    Parser::Terminal::ID,
    Parser::Terminal::DIRECTIVE_DUMB_CODE_BLOCK,
    Parser::Terminal::DIRECTIVE_ID,
    Parser::Terminal::DIRECTIVE_STRICT_CODE_BLOCK,
    Parser::Terminal::DIRECTIVE_STRING,
    Parser::Nonterminal_::param_spec,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::DIRECTIVE_TARGET,
    Parser::Nonterminal_::target,
    Parser::Nonterminal_::directives,
    Parser::Terminal::DIRECTIVE_ADD_CODESPEC,
    Parser::Terminal::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE,
    Parser::Terminal::DIRECTIVE_ADD_REQUIRED_DIRECTIVE,
    Parser::Nonterminal_::add_codespec,
    Parser::Nonterminal_::add_directive,
    Parser::Terminal::DIRECTIVE_ADD_CODESPEC,
    Parser::Nonterminal_::add_codespec,
    Parser::Terminal::DIRECTIVE_ADD_OPTIONAL_DIRECTIVE,
    Parser::Terminal::DIRECTIVE_ADD_REQUIRED_DIRECTIVE,
    Parser::Nonterminal_::add_directive,
    Parser::Terminal::DIRECTIVE_DUMB_CODE_BLOCK,
    Parser::Terminal::DIRECTIVE_ID,
    Parser::Terminal::DIRECTIVE_STRICT_CODE_BLOCK,
    Parser::Terminal::DIRECTIVE_STRING,
    Parser::Nonterminal_::param_spec,
    Parser::Terminal::DUMB_CODE_BLOCK,
    Parser::Terminal::ID,
    Parser::Terminal::STRICT_CODE_BLOCK,
    Parser::Terminal::STRING_LITERAL,
    Parser::Nonterminal_::default_value,
    Parser::Nonterminal_::at_least_zero_newlines,
    Parser::Terminal::NEWLINE,
    Parser::Terminal::NEWLINE,
    Parser::Nonterminal_::at_least_one_newline,
    Parser::Terminal::NEWLINE
};
BarfCpp_::Size const Parser::ms_lookahead_count_ = sizeof(Parser::ms_lookahead_table_) / sizeof(*Parser::ms_lookahead_table_);

char const *const Parser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "BAD_TOKEN",
    "DIRECTIVE_ADD_CODESPEC",
    "DIRECTIVE_ADD_OPTIONAL_DIRECTIVE",
    "DIRECTIVE_ADD_REQUIRED_DIRECTIVE",
    "DIRECTIVE_DEFAULT",
    "DIRECTIVE_DUMB_CODE_BLOCK",
    "DIRECTIVE_ID",
    "DIRECTIVE_STRICT_CODE_BLOCK",
    "DIRECTIVE_STRING",
    "DIRECTIVE_TARGET",
    "DUMB_CODE_BLOCK",
    "ID",
    "NEWLINE",
    "STRICT_CODE_BLOCK",
    "STRING_LITERAL",
    "root",
    "target",
    "directives",
    "add_codespec",
    "add_directive",
    "param_spec",
    "default_value",
    "at_least_zero_newlines",
    "at_least_one_newline"
};
BarfCpp_::Size const Parser::ms_token_name_count_ = sizeof(Parser::ms_token_name_table_) / sizeof(*Parser::ms_token_name_table_);

enum
{
    TABLE_SIZE_ASSERTIONS_ =
        BarfCpp_::Assert<Parser::ms_rule_count_ == 22>::v &&
        BarfCpp_::Assert<Parser::ms_state_count_ == 50>::v &&
        BarfCpp_::Assert<Parser::ms_transition_count_ == 119>::v &&
        BarfCpp_::Assert<Parser::ms_lookahead_count_ == 69>::v &&
        BarfCpp_::Assert<Parser::ms_token_name_count_ == 282>::v
};

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 76 "barf_targetspec_parser.trison"

bool Parser::OpenFile (string const &input_filename)
{
    ResetForNewInput();
    return m_scanner.OpenFile(input_filename);
}

} // end of namespace Targetspec
} // end of namespace Barf

#line 1499 "barf_targetspec_parser.cpp"
