// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// barf_regex_parser.cpp generated by trison
// from barf_regex_parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "barf_regex_parser.hpp"



#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpewIsEnabled()) { spew_code; }

#include <algorithm>
#include <limits>
#include <sstream>
#include <utility>


#line 74 "barf_regex_parser.trison"

#include <sstream>

namespace Barf {
namespace Regex {

bool IsHexDigit (Uint8 const c)
{
    return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');
}

Uint8 HexDigitValue (Uint8 c)
{
    assert(IsHexDigit(c));
    if (c >= '0' && c <= '9')
        c -= '0';
    else if (c >= 'A' && c <= 'F')
        c += 0xA - 'A';
    else if (c >= 'a' && c <= 'f')
        c += 0xA - 'a';
    return c;
}

#line 43 "barf_regex_parser.cpp"

Parser::Parser ()
    :

#line 97 "barf_regex_parser.trison"
 InputBase() 
#line 50 "barf_regex_parser.cpp"
{
    m_max_allowable_lookahead_count = 1;
    m_realized_state_ = NULL;
    m_hypothetical_state_ = NULL;
    SetDebugSpewStream(NULL);


#line 98 "barf_regex_parser.trison"

    m_macro_map = NULL;
    m_active_backslash = false;

#line 63 "barf_regex_parser.cpp"
}

Parser::~Parser ()
{
    // Perform all the internal cleanup needed.
    CleanUpAllInternals_();


#line 102 "barf_regex_parser.trison"

    assert(m_macro_map == NULL);

#line 76 "barf_regex_parser.cpp"
}

bool Parser::IsAtEndOfInput ()
{
    return true; // TEMP
}

std::string Parser::DebugSpewPrefix () const
{
    std::ostringstream out;
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 90 "barf_regex_parser.cpp"
;
    return out.str();
}

void Parser::ResetForNewInput ()
{
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 100 "barf_regex_parser.cpp"
 << "Executing reset-for-new-input actions\n")

    // Perform all the internal cleanup needed.
    CleanUpAllInternals_();


#line 283 "barf_regex_parser.trison"

    m_macro_map = NULL;
    m_active_backslash = false;

#line 112 "barf_regex_parser.cpp"
}

Parser::ParserReturnCode Parser::Parse (Ast::Base * *return_token, Nonterminal::Name nonterminal_to_parse)
{
    return Parse_(return_token, nonterminal_to_parse);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

void Parser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 130 "barf_regex_parser.cpp"
 << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 138 "barf_regex_parser.cpp"
 << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, Parser::ParserReturnCode parser_return_code)
{
    if (std::size_t(parser_return_code) < Parser::ms_parser_return_code_string_count_)
        stream << Parser::ms_parser_return_code_string_table_[std::size_t(parser_return_code)];
    else
        stream << "!INVALID!ParserReturnCode!";
    return stream;
}

std::ostream &operator << (std::ostream &stream, Parser::Token const &token)
{
    if (token.m_id < Parser::ms_token_name_count_)
        stream << Parser::ms_token_name_table_[token.m_id];
    else
        stream << "!INVALID!TOKEN!";
    return stream;
}

char const *const Parser::ms_parser_return_code_string_table_[] =
{
    "PRC_SUCCESS",
    "PRC_UNHANDLED_PARSE_ERROR",
    "PRC_EXCEEDED_MAX_ALLOWABLE_LOOKAHEAD_COUNT",
    "PRC_INTERNAL_ERROR",
};
std::size_t const Parser::ms_parser_return_code_string_count_ = sizeof(Parser::ms_parser_return_code_string_table_) / sizeof(*Parser::ms_parser_return_code_string_table_);

char const *const Parser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "BAD_TOKEN",
    "ALPHA",
    "CHAR",
    "DIGIT",
    "HEX_CHAR",
    "regex_then_end",
    "regex_parenthesized",
    "regex_unterminated",
    "branch",
    "branch_which_didnt_just_accept_an_atom",
    "branch_which_just_accepted_an_atom",
    "atom",
    "bound",
    "bracket_expression",
    "bracket_char_set",
    "bracket_expression_char",
    "atom_control_char",
    "atom_normal_char",
    "bracket_expression_control_char",
    "bracket_expression_normal_char",
    "id",
    "integer"
};
std::size_t const Parser::ms_token_name_count_ = sizeof(Parser::ms_token_name_table_) / sizeof(*Parser::ms_token_name_table_);


void Parser::ThrowAwayToken_ (Token const &token_) throw()
{
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 464 "barf_regex_parser.cpp"
 << "Executing throw-away-token actions on token " << token_ << '\n')

    ThrowAwayTokenData_(token_.m_data);
}

void Parser::ThrowAwayTokenData_ (Ast::Base * const &token_data) throw()
{

#line 152 "barf_regex_parser.trison"

    delete token_data;

#line 477 "barf_regex_parser.cpp"
}

Parser::Token Parser::Scan_ ()
{
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 485 "barf_regex_parser.cpp"
 << "Executing scan actions\n")


#line 155 "barf_regex_parser.trison"

    while (true)
    {
        int c;

        c = In().get();
        if (c == EOF)
        {
            m_active_backslash = false;
            return Token(Terminal::END_);
        }

        if (c >= '0' && c <= '9')
        {
            m_active_backslash = false;
            return Token(Terminal::DIGIT, new Char(c));
        }
        else if ((c >= 'A' && c <= 'Z')
                 ||
                 (c >= 'a' && c <= 'z'))
        {
            m_active_backslash = false;
            return Token(Terminal::ALPHA, new Char(c));
        }

        assert(c >= 0 && c < 256);

        switch (c)
        {
            // backslash needs to be handled in a special way, since
            // it can delimit a hex char (e.g. \xA7).
            //
            // the desired behavior is that in the string "\\xA7" the
            // sequence of returned chars is '\' '\' 'x' 'A' '7' (i.e.
            // "\\" takes precedence over "\xA7") whereas in the string
            // "\xA7" the sequence a single character having hex value A7.
            case '\\':
            {
                // if there's an active backslash, we'll want to just
                // return the backslash, because the active backslash
                // (the previous character) will escape it.
                if (m_active_backslash)
                {
                    m_active_backslash = false;
                    return Token::Id('\\');
                }
                // if the next char isn't 'x' (i.e. we will not be
                // parsing a hex char), then this backslash is active.
                if (In().peek() != 'x')
                {
                    m_active_backslash = true;
                    return Token::Id('\\');
                }
                assert(!m_active_backslash);

                // eat the 'x'
                c = In().get();
                assert(c == 'x');

                // we're expecting exactly two hex digits after the \x
                Uint8 hex_value = 0;
                for (Uint8 i = 0; i < 2; ++i)
                {
                    c = In().get();
                    if (c == EOF)
                        THROW_STRING("encountered end of input while trying to scan hex char");
                    if (!IsHexDigit(c))
                        THROW_STRING("expected exactly two hex digits after \"\\x\"");
                    hex_value <<= 4;
                    hex_value |= HexDigitValue(c);
                }

                // (for now) prevent usage of the null char \x00, since
                // the scanner implementation uses '\0' as a sentinel value.
                if (hex_value == 0)
                    THROW_STRING("can't use hex char \\x00");

                return Token(Terminal::HEX_CHAR, new Char(hex_value));
            }

            // other control chars
            case '^':
            case '$':
            case '*':
            case '+':
            case '?':
            case '{':
            case '}':
            case '[':
            case ']':
            case '(':
            case ')':
            case '.':
            case ',':
            case '|':
            case '-':
            case ':':
                m_active_backslash = false;
                return Token::Id(c);

            // non-alphanumeric normal chars
            case ' ':
            case '!':
            case '"':
            case '#':
            case '%':
            case '&':
            case '\'':
            case '/':
            case ';':
            case '<':
            case '=':
            case '>':
            case '@':
            case '_':
            case '`':
            case '~':
                m_active_backslash = false;
                return Token(Terminal::CHAR, new Char(c));

            // anything else is an invalid char
            default:
                m_active_backslash = false;
                THROW_STRING("invalid char (use hex char " << CharLiteral(c, false) << " instead)");
                break;
        }
    }

#line 618 "barf_regex_parser.cpp"
}

void Parser::RunNonassocErrorActions_ (Token const &lookahead)
{
}

template <typename T>
std::ostream &operator << (std::ostream &out, std::set<T> const &s)
{
    out << "{ ";
    for (typename std::set<T>::const_iterator it = s.begin(), it_end = s.end(); it != it_end; ++it)
        out << *it << ", ";
    out << '}';
    return out;
}

template <typename T>
std::ostream &operator << (std::ostream &out, std::vector<T> const &s)
{
    out << "[ ";
    for (typename std::vector<T>::const_iterator it = s.begin(), it_end = s.end(); it != it_end; ++it)
        out << *it << ", ";
    out << ']';
    return out;
}

template <typename LessThan, typename T>
typename std::vector<T>::const_iterator TEMP_vector_find_ (typename std::vector<T> const &vec, T const &val)
{
    LessThan less_than;
    for (typename std::vector<T>::const_iterator it = vec.begin(), it_end = vec.end(); it != it_end; ++it)
        if (!less_than(*it, val) && !less_than(val, *it))
            return it;
    return vec.end();
}

std::uint32_t Parser::NonterminalStartStateIndex_ (Parser::Nonterminal::Name nonterminal)
{
    switch (nonterminal)
    {
        case Nonterminal::atom: return 27;
        case Nonterminal::atom_control_char: return 93;
        case Nonterminal::atom_normal_char: return 72;
        case Nonterminal::bound: return 224;
        case Nonterminal::bracket_char_set: return 134;
        case Nonterminal::bracket_expression: return 128;
        case Nonterminal::bracket_expression_char: return 140;
        case Nonterminal::bracket_expression_control_char: return 184;
        case Nonterminal::bracket_expression_normal_char: return 145;
        case Nonterminal::branch: return 11;
        case Nonterminal::branch_which_didnt_just_accept_an_atom: return 16;
        case Nonterminal::branch_which_just_accepted_an_atom: return 21;
        case Nonterminal::id: return 33;
        case Nonterminal::integer: return 236;
        case Nonterminal::regex_parenthesized: return 52;
        case Nonterminal::regex_then_end: return 0;
        case Nonterminal::regex_unterminated: return 5;
        default: assert(false && "invalid nonterminal"); return 0;
    }
}

bool Parser::HasEncounteredErrorState () const
{
    return (m_realized_state_ == NULL) ? false : m_realized_state_->HasEncounteredErrorState();
}

std::int64_t Parser::MaxAllowableLookaheadCount () const
{
    return m_max_allowable_lookahead_count;
}

std::size_t Parser::MaxRealizedLookaheadCount () const
{
    return (m_realized_state_ == NULL) ? 0 : m_realized_state_->MaxRealizedLookaheadCount();
}

void Parser::SetMaxAllowableLookaheadCount (std::int64_t max_allowable_lookahead_count)
{
    m_max_allowable_lookahead_count = max_allowable_lookahead_count;
}

Parser::ParserReturnCode Parser::Parse_ (Ast::Base * *return_token, Nonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 707 "barf_regex_parser.cpp"
 << "Starting parse\n")

    ParserReturnCode parser_return_code_ = PRC_INTERNAL_ERROR;
    *return_token = NULL;

    // this is the try {} block generated by specifying the
    // %target.cpp.enable_scan_actions_exceptions or
    // %target.cpp.enable_reduction_rule_exceptions directives in the
    // primary source, to allow necessary cleanup if the scan actions
    // or a reduction rule code block throws an exception.
    try {


    std::uint32_t start_state_index = NonterminalStartStateIndex_(nonterminal_to_parse);

    if (m_realized_state_ != NULL) // This happens when parsing again, not from scratch.
    {
        assert(m_hypothetical_state_ == NULL);
        // Note that this resets the error state.
        m_realized_state_->Reinitialize(start_state_index);
        // Delete this entirely to be initialized anew, since it has no state that
        // carries over between parses.
        delete m_hypothetical_state_;
        m_hypothetical_state_ = NULL;
    }
    else // This happens when parsing for the first time.
        m_realized_state_ = new RealizedState_(start_state_index);

    m_hypothetical_state_ = new HypotheticalState_(start_state_index);

    bool should_return = false;
    std::size_t iteration_index = 0;
    while (!should_return)
    {
        TRISON_CPP_DEBUG_CODE_(
            *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 746 "barf_regex_parser.cpp"
 << "\n";
            *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 751 "barf_regex_parser.cpp"
 << "---------- ITERATION " << iteration_index << " --------------\n";
            PrintParserStatus_(*DebugSpewStream());
            *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 757 "barf_regex_parser.cpp"
 << '\n';
        )

        if (m_realized_state_->HasExceededMaxAllowableLookaheadCount(m_max_allowable_lookahead_count))
        {
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 766 "barf_regex_parser.cpp"
 << "Max realized lookahead count (" << m_realized_state_->MaxRealizedLookaheadCount() << ") has exceeded max allowable lookahead token count (" << m_max_allowable_lookahead_count << "); modify this limit using the default_max_allowable_lookahead_count directive (see trison.cpp.targetspec), or using the SetMaxAllowableLookaheadCount method. returning with error.\n")
            parser_return_code_ = PRC_EXCEEDED_MAX_ALLOWABLE_LOOKAHEAD_COUNT;
            break;
        }

        if (m_hypothetical_state_->m_root->HasTrunkChild())
            ExecuteAndRemoveTrunkActions_(should_return, parser_return_code_, return_token);
        else
            ContinueNPDAParse_(should_return);

        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 780 "barf_regex_parser.cpp"
 << '\n')
        ++iteration_index;
    }

    TRISON_CPP_DEBUG_CODE_(
        *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 789 "barf_regex_parser.cpp"
 << "\n";
        *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 794 "barf_regex_parser.cpp"
 << "---------- RETURNING --------------\n";
        PrintParserStatus_(*DebugSpewStream());
        *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 800 "barf_regex_parser.cpp"
 << '\n';
    )

    // this is the catch {} block generated by specifying the
    // %target.cpp.enable_scan_actions_exceptions or
    // %target.cpp.enable_reduction_rule_exceptions directives in the
    // primary source, to allow necessary cleanup if the scan actions
    // or a reduction rule code block throws an exception.
    } catch (...) {
        // Clear the stack, because we won't need it for the next parse.  We don't clear the
        // lookahead queue here because we might want to parse multiple times from the same
        // input, and the lookahead queue could have the next few tokens in it.
        ClearStack_();
        assert(m_realized_state_ != NULL);
        assert(m_hypothetical_state_ == NULL);
        // Rethrow the (unknown) exception.
        throw;
    }

    assert(std::size_t(parser_return_code_) < ms_parser_return_code_string_count_ && "this should never happen");
    TRISON_CPP_DEBUG_CODE_(
        *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 825 "barf_regex_parser.cpp"
 << "Parse() is returning " << ms_parser_return_code_string_table_[parser_return_code_] << '\n';
    )

    return parser_return_code_;
}

void Parser::ExecuteAndRemoveTrunkActions_ (bool &should_return, ParserReturnCode &parser_return_code_, Ast::Base * *&return_token)
{
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 837 "barf_regex_parser.cpp"
 << "Parse stack tree has trunk; executing trunk actions.\n")
    //while (m_hypothetical_state_->m_root->HasTrunkChild())
    // HIPPO TEMP -- just do one at a time so that the parser state has a chance to be printed after each.
    if (m_hypothetical_state_->m_root->HasTrunkChild())
    {
        // The trunk_child is popped and then will die by the end of this function.
        // Using std::unique_ptr for exception safety -- if an exception is thrown within
        // this function, then trunk_child still needs to be deleted.
        std::unique_ptr<ParseStackTreeNode_> trunk_child(m_hypothetical_state_->m_root->PopTrunkChild());
        assert(trunk_child->m_parent_node == NULL);
        assert(trunk_child->m_child_nodes.empty());

        bool destroy_and_recreate_parse_tree = false;

        switch (trunk_child->m_spec.m_type)
        {
            case ParseStackTreeNode_::RETURN: {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 858 "barf_regex_parser.cpp"
 << "    Executing trunk action RETURN.\n")
                assert(m_realized_state_->TokenStack().size() == 2);
                parser_return_code_ = PRC_SUCCESS;
                // This doesn't change the structure of the stack but does take ownership of the top stack token.
                // This must be done so that the return token isn't destroyed with the parser.
                m_realized_state_->StealTokenStackTop(return_token);
                should_return = true;
                break;
            }
            case ParseStackTreeNode_::REDUCE: {
                // Execute the appropriate rule on the top tokens in the stack
                std::uint32_t const &rule_index = trunk_child->m_spec.m_single_data;
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 874 "barf_regex_parser.cpp"
 << "    Executing trunk action REDUCE rule " << rule_index << "; " << Grammar_::ms_rule_table_[rule_index].m_description << '\n')
                Grammar_::Rule_ const &rule = Grammar_::ms_rule_table_[rule_index];
                Token::Data reduced_nonterminal_token_data = ExecuteReductionRule_(rule_index, m_realized_state_->TokenStack());
                m_realized_state_->ExecuteActionReduce(rule, reduced_nonterminal_token_data, m_hypothetical_state_->m_hps_queue);
                // This is done essentially so that m_realized_lookahead_cursor can be reset.
                destroy_and_recreate_parse_tree = true;
                break;
            }
            case ParseStackTreeNode_::SHIFT: {
                std::uint32_t const &shifted_token_id = trunk_child->m_spec.m_single_data;
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 888 "barf_regex_parser.cpp"
 << "    Executing trunk action SHIFT " << Token(shifted_token_id) << '\n')
                m_realized_state_->ExecuteActionShift(trunk_child->m_child_branch_node_ptr_vector, trunk_child->m_child_branch_node_token_id_ptr_vector, m_hypothetical_state_->m_hps_queue);
                break;
            }
            case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 897 "barf_regex_parser.cpp"
 << "    Executing trunk action INSERT_LOOKAHEAD_ERROR, and setting has-encountered-error-state flag.\n")
                m_realized_state_->ExecuteActionInsertLookaheadError(m_hypothetical_state_->m_hps_queue);
                break;
            }
            case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 906 "barf_regex_parser.cpp"
 << "    Executing trunk action DISCARD_LOOKAHEAD.\n")
                m_realized_state_->ExecuteActionDiscardLookahead(m_hypothetical_state_->m_hps_queue);
                break;
            }
            case ParseStackTreeNode_::POP_STACK: {
                std::uint32_t const &pop_count = trunk_child->m_spec.m_single_data;
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 916 "barf_regex_parser.cpp"
 << "    Executing trunk action POP_STACK " << pop_count << ".\n")

                // This one is tricky to implement within RealizedState_ alone, mainly because
                // of the ThrowAwayToken_ call.
                if (m_realized_state_->TokenStack().size() > pop_count)
                {
                    for (std::uint32_t i = 0; i < pop_count; ++i)
                    {
                        // TODO: Could print the m_realized_state_ m_branch_node_ptr_vector_stack element being popped.
                        ThrowAwayToken_(m_realized_state_->PopStack());
                    }
                }
                else
                {
                    // We're popping more than the whole stack, which is an error
                    parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
                    should_return = true;
                }

                // Because POP_STACK involves popping the stack, the parse tree should be destroyed and
                // recreated (from the branches in the top of the realized state stack).  This is somewhat
                // draconian and non-optimal, but simple and effective.
                destroy_and_recreate_parse_tree = true;
                // TODO: Because HPS branches are blocked right after POP_STACK, maybe don't bother adding any
                // additional children below POP_STACK nodes (i.e. one HPS child of POP_STACK is sufficient to
                // keep it alive probably).  This would reduce the number of memory operations.
                break;
            }

            default:
                assert(false && "this should not happen");
                break;
        }

        if (destroy_and_recreate_parse_tree)
        {
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 956 "barf_regex_parser.cpp"
 << "    Destroying and recreating parse tree based on top of branch stack of of realized state.\n")
            m_hypothetical_state_->DestroyParseTree();
            CreateParseTreeFromRealizedState_();
        }
    }
}

void Parser::ContinueNPDAParse_ (bool &should_return)
{
    // If there are no non-blocked hps-es, then the parse should stop.  If any non-blocked hps-es
    // are processed, then this flag will be set to false.
    should_return = true;

    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 973 "barf_regex_parser.cpp"
 << "Parse stack tree does not have trunk; continuing parse.\n")

    // If there's a SHIFT/REDUCE conflict, then see if it can be resolved first.
    {
        ParseStackTreeNode_ *shift  = NULL;
        ParseStackTreeNode_ *reduce = NULL;
        // TODO: Move this handling into its own function
        // NOTE: This only works at the root.  If that were to change, then various things
        // would need to scan over only the HPSes that are contained within the relevant subtree.
        bool has_shift_reduce_conflict = m_hypothetical_state_->m_root->HasShiftReduceConflict(shift, reduce);
        bool has_shift_reduce_conflict_and_should_resolve = false;
        if (has_shift_reduce_conflict)
        {
            // Should not do anything unless the shift and reduce branches have the same
            // m_realized_lookahead_cursor (e.g. a REDUCE action will start out with
            // m_realized_lookahead_cursor == 0, while a SHIFT action will start out with
            // m_realized_lookahead_cursor == 1, but the REDUCE action branch needs to be
            // allowed to catch up before having any chance at the SHIFT/REDUCE conflict
            // being resolvable).
            if (m_hypothetical_state_->MinAndMaxRealizedLookaheadCursorsAreEqual())
                has_shift_reduce_conflict_and_should_resolve = true;
            else
            {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1000 "barf_regex_parser.cpp"
 << "    SHIFT/REDUCE conflict encountered, but the min and max realized lookahead cursors for all HPSes are not equal, so it's not ready for the conflict to be resolved.\n")
            }
        }

        if (has_shift_reduce_conflict_and_should_resolve)
        {
            assert(shift != NULL);
            assert(reduce != NULL);
            ParseStackTreeNode_::PrecedenceLevelRange shift_precedence_level_range = shift->ComputePrecedenceLevelRange(1);
            ParseStackTreeNode_::PrecedenceLevelRange reduce_precedence_level_range = reduce->ComputePrecedenceLevelRange(1);
            assert(reduce_precedence_level_range.first == reduce_precedence_level_range.second);

            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1016 "barf_regex_parser.cpp"
 << "    SHIFT/REDUCE conflict encountered. REDUCE precedence level range: [" << Grammar_::ms_precedence_table_[reduce_precedence_level_range.first].m_name << ", " << Grammar_::ms_precedence_table_[reduce_precedence_level_range.second].m_name << "], SHIFT precedence level range: [" << Grammar_::ms_precedence_table_[shift_precedence_level_range.first].m_name << ", " << Grammar_::ms_precedence_table_[shift_precedence_level_range.second].m_name << "]\n")

            // 6 possibilities (the higher lines indicate higher precedence level.  same line
            // indicates equality).  there is always exactly one reduce hps, and at least
            // one shift hps.
            //
            // note that if a shift and a reduce have the same precedence level, then they also
            // have the same associativity.
            //
            // 1.     shift        2.     shift        3.
            //        shift               shift
            // reduce              reduce shift        reduce shift
            //
            // 4.                  5.                  6.
            //                                                shift
            // reduce shift        reduce              reduce shift
            //        shift               shift               shift
            //        shift               shift
            //
            // cases 1 and 5 can be trivially resolved -- by pruning the reduce
            // and by pruning the shift respectively.
            //
            // case 2 can only be resolved if the associativity of the reduction rule
            // is RIGHT, in which case the reduce is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 3 may be trivially resolved via rule associativity (LEFT causes the
            // shift to be pruned, RIGHT causes the reduce to be pruned, and NONASSOC
            // should cause an error).
            //
            // case 4 can only be resolved if the associativity of the reduction rule
            // is LEFT, in which case the shift is pruned.  otherwise no resolution
            // can be reached at this point.
            //
            // case 6 can not be resolved at this point.

            bool conflict_resolved = false;

            // Case 1
            if (reduce_precedence_level_range.second < shift_precedence_level_range.first)
            {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1061 "barf_regex_parser.cpp"
 << "        Case 1; REDUCE < SHIFT; pruning REDUCE and continuing.\n")
                // TODO: Use std::unique_ptr and pass in via move so that the `reduce = NULL` is unnecessary.
                m_hypothetical_state_->DeleteBranch(reduce);
                reduce = NULL;
                conflict_resolved = true;
            }
            // Case 2
            else if (reduce_precedence_level_range.first == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1075 "barf_regex_parser.cpp"
 << "        Case 2; REDUCE <= SHIFT; ")
                Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduce->m_spec.m_single_data];
                Grammar_::Precedence_ const &reduction_rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity_index == 2) // 2 is right-associative
                {
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1084 "barf_regex_parser.cpp"
 << "        Pruning right-associative REDUCE and continuing.\n")
                    m_hypothetical_state_->DeleteBranch(reduce);
                    reduce = NULL;
                    conflict_resolved = true;
                }
                else
                {
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1095 "barf_regex_parser.cpp"
 << "        Can't resolve conflict at this time.\n")
                }
            }
            // Case 3
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.first &&
                     shift_precedence_level_range.first == shift_precedence_level_range.second)
            {
                Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduce->m_spec.m_single_data];
                Grammar_::Precedence_ const &reduction_rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1108 "barf_regex_parser.cpp"
 << "        Case 3; REDUCE == SHIFT; rule " << reduce->m_spec.m_single_data << " associativity index: " <<
 reduction_rule_precedence.m_associativity_index << '\n')
                switch (reduction_rule_precedence.m_associativity_index)
                {
                    case 0: // 0 is left-associative
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1117 "barf_regex_parser.cpp"
 << "        Pruning left-associative SHIFT and continuing.\n")
                        m_hypothetical_state_->DeleteBranch(shift);
                        shift = NULL;
                        conflict_resolved = true;
                        break;

                    case 1: // 1 is non-associative
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1128 "barf_regex_parser.cpp"
 << "        Composition of nonassoc rules with the same precedence is an error.  Pruning both SHIFT and REDUCE.  Recreating parse tree under INSERT_LOOKAHEAD_ERROR action.\n")
                        // Neither SHIFT nor REDUCE should survive.  Instead, create an INSERT_LOOKAHEAD_ERROR
                        // action to initiate error panic.  This works only because the shift and reduce nodes
                        // are children of the parse tree root.
                        assert(shift->m_parent_node == m_hypothetical_state_->m_root);
                        assert(reduce->m_parent_node == m_hypothetical_state_->m_root);

                        // Lookahead_(0) is the token that would be SHIFT'ed.
                        RunNonassocErrorActions_(Lookahead_(0));

                        m_hypothetical_state_->DeleteBranch(shift);
                        m_hypothetical_state_->DeleteBranch(reduce);
                        // Just verify that the HPS queue has been totally nullified by the above actions.
                        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                        {
                            assert(*hps_it == NULL);
                        }
                        m_hypothetical_state_->m_hps_queue.clear();
                        assert(m_hypothetical_state_->m_new_hps_queue.empty());
                        assert(m_hypothetical_state_->m_root->m_child_nodes.empty());

                        // Create fresh HPSes at the root from the realized state.
                        CreateParseTreeFromRealizedState_();
                        // TODO: This operation could be optimized due to the fact that each HPS will
                        // take exactly one action; INSERT_LOOKAHEAD_ERROR.  But for now, just do the
                        // easy thing.
                        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                        {
                            ParseStackTreeNode_ *hps = *hps_it;
                            assert(hps != NULL);
                            ParseStackTreeNode_ *new_hps = TakeHypotheticalActionOnHPS_(*hps, ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR, ParseStackTreeNode_::UNUSED_DATA);
                            m_hypothetical_state_->m_new_hps_queue.push_back(new_hps);
                            // Note that DeleteBranch only nullifies elements in m_hps_queue, it doesn't
                            // alter the container itself.
                            m_hypothetical_state_->DeleteBranch(hps);
                        }
                        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                        {
                            assert(*hps_it == NULL);
                        }
                        m_hypothetical_state_->m_hps_queue.clear();

                        // Now that all the INSERT_LOOKAHEAD_ERROR HPSes have been created and put into
                        // m_new_hps_queue, the existing HPSes have been deleted, and the processing later
                        // in this function (see `if (conflict_resolved)` block) is expecting the HPSes to
                        // be in m_hps_queue, swap the queues.
                        assert(m_hypothetical_state_->m_hps_queue.empty());
                        assert(!m_hypothetical_state_->m_new_hps_queue.empty());
                        std::swap(m_hypothetical_state_->m_hps_queue, m_hypothetical_state_->m_new_hps_queue);

                        // Mark the conflict as resolved.
                        conflict_resolved = true;
                        break;

                    case 2: // 2 is right-associative
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1187 "barf_regex_parser.cpp"
 << "        Pruning right-associative REDUCE and continuing.\n")
                        m_hypothetical_state_->DeleteBranch(reduce);
                        reduce = NULL;
                        conflict_resolved = true;
                        break;

                    default:
                        assert(false && "this should never happen");
                        break;
                }
            }
            // Case 4
            else if (reduce_precedence_level_range.second == shift_precedence_level_range.second &&
                     shift_precedence_level_range.first < shift_precedence_level_range.second)
            {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1206 "barf_regex_parser.cpp"
 << "        Case 4; REDUCE >= SHIFT; ")
                Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduce->m_spec.m_single_data];
                Grammar_::Precedence_ const &reduction_rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
                if (reduction_rule_precedence.m_associativity_index == 0) // 0 is left-associative
                {
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1215 "barf_regex_parser.cpp"
 << "        Pruning left-associative SHIFT and continuing.\n")
                    m_hypothetical_state_->DeleteBranch(shift);
                    shift = NULL;
                    conflict_resolved = true;
                }
                else
                {
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1226 "barf_regex_parser.cpp"
 << "        Can't resolve conflict at this time.\n")
                }
            }
            // Case 5
            else if (reduce_precedence_level_range.first > shift_precedence_level_range.second)
            {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1236 "barf_regex_parser.cpp"
 << "        Case 5; REDUCE > SHIFT; pruning SHIFT and continuing.\n")
                m_hypothetical_state_->DeleteBranch(shift);
                shift = NULL;
                conflict_resolved = true;
            }
            // Case 6
            else {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1247 "barf_regex_parser.cpp"
 << "        Case 6; ambiguous SHIFT/REDUCE precedence comparison; can't resolve conflict at this time.\n")
                assert(reduce_precedence_level_range.first > shift_precedence_level_range.first);
                assert(reduce_precedence_level_range.second < shift_precedence_level_range.second);
            }

            if (conflict_resolved)
            {
                should_return = false;

                assert(m_hypothetical_state_->m_new_hps_queue.empty());
                // Take new hps-es and clear old ones.
                for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
                {
                    ParseStackTreeNode_ *hps = *hps_it;
                    if (hps != NULL)
                        m_hypothetical_state_->m_new_hps_queue.push_back(hps);
                }
                m_hypothetical_state_->m_hps_queue.clear();
                std::swap(m_hypothetical_state_->m_hps_queue, m_hypothetical_state_->m_new_hps_queue);
                assert(m_hypothetical_state_->m_new_hps_queue.empty());
                // TODO: Break this large function up into smaller logical units
                return;
            }
        }
    }

    // Compute the minimum of all hps-es' m_realized_lookahead_cursor values, in order
    // to determine which ones have processed the lowest number of lookaheads.  This is
    // done so that one hps doesn't get way ahead of the others.
    std::uint32_t min_realized_lookahead_cursor;
    m_hypothetical_state_->ComputeMinAndMaxRealizedLookaheadCursors(&min_realized_lookahead_cursor, NULL);

    // Process transitions in order of their SortedTypeIndex.  Only process HPSes that are at min_realized_lookahead_cursor.
    assert(m_hypothetical_state_->m_new_hps_queue.empty()); // This is the starting condition
    for (std::uint32_t current_sorted_type_index = 0; current_sorted_type_index <= 3; ++current_sorted_type_index)
    {
        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1287 "barf_regex_parser.cpp"
 << "    Processing transitions having SortedTypeIndex equal to " << current_sorted_type_index << " and m_realized_lookahead_cursor equal to " << min_realized_lookahead_cursor << ".\n")

        if (!m_hypothetical_state_->m_new_hps_queue.empty())
        {
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1295 "barf_regex_parser.cpp"
 << "        Early-out based on sorted type index.\n")
            break;
        }

        // Process non-blocked hps-es.
        for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
        {
            // Skip nullified HPS nodes.
            if (*hps_it == NULL)
                continue;

            ParseStackTreeNode_ &hps = **hps_it;

            assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS);
            TRISON_CPP_DEBUG_CODE_(
                *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1314 "barf_regex_parser.cpp"
 << "        Processing ";
                hps.Print(*DebugSpewStream(), this, DebugSpewPrefix(), 0, true);
            )

            // If a hps is blocked, then save it for the next parse iteration but don't do anything with it.
            if (hps.IsBlockedHPS())
            {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1325 "barf_regex_parser.cpp"
 << "            Hypothetical Parser State is blocked; preserving for next iteration.\n")
                m_hypothetical_state_->m_new_hps_queue.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // If a hps' m_realized_lookahead_cursor is greater than min_realized_lookahead_cursor, then
            // save it for the next parse iteration but don't do anything with it.
            if (hps.m_realized_lookahead_cursor > min_realized_lookahead_cursor)
            {
                TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1339 "barf_regex_parser.cpp"
 << "            Hypothetical Parser State isn't at min_realized_lookahead_cursor (which is " << min_realized_lookahead_cursor << "); preserving for next iteration.\n")
                m_hypothetical_state_->m_new_hps_queue.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // This hps isn't blocked, so indicate that the parse should continue.
            should_return = false;

            std::uint32_t hps_state_index = hps.m_branch_node_ptr->Data();

            // Retrieve all transitions whose SortedTypeIndex is current_sorted_type_index.
            Npda_::TransitionVector_ const &non_epsilon_transitions = Npda_::NonEpsilonTransitionsOfState_(hps_state_index, current_sorted_type_index);
            // Exercise all valid transitions whose SortedTypeIndex is current_sorted_type_index.
            for (Npda_::TransitionVector_::const_iterator transition_it = non_epsilon_transitions.begin(), transition_it_end = non_epsilon_transitions.end(); transition_it != transition_it_end; ++transition_it)
            {
                Npda_::Transition_ const &transition = *transition_it;
                assert(transition.m_type >= Npda_::Transition_::RETURN);
                assert(transition.m_type <= Npda_::Transition_::POP_STACK);
                std::uint32_t transition_sorted_type_index = Npda_::Transition_::Order::SortedTypeIndex(Npda_::Transition_::Type(transition.m_type));
                assert(transition_sorted_type_index == current_sorted_type_index);

/*
                TRISON_CPP_DEBUG_CODE_(
                    *DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1367 "barf_regex_parser.cpp"
 << "            Processing transition " << ParseStackTreeNode_::AsString(ParseStackTreeNode_::Type(transition.m_type)) << " with transition token " << Token(transition.m_token_index) << " and data ";
                    if (transition.m_data_index == ParseStackTreeNode_::UNUSED_DATA)
                        *DebugSpewStream() << "<N/A>";
                    else
                        *DebugSpewStream() << transition.m_data_index;
                    *DebugSpewStream() << " and sorted type index " << Npda_::Transition_::Order::SortedTypeIndex(Npda_::Transition_::Type(transition.m_type)) << '\n';
                )
*/

                ParseStackTreeNode_ *resulting_hps = NULL;
                // If it's a default transition, there's no need to access the lookahead (except in
                // a certain case).
                if (transition.m_token_index == Nonterminal::none_)
                {
                    // Logic regarding empty reduction rules -- if this transition is REDUCE for an empty reduction rule
                    // and the lookahead is the nonterminal for that REDUCE action, then don't reduce, since that
                    // would produce an infinite loop.  There is a case where it's not necessary to access the lookahead:
                    // if this HPS is the child of a REDUCE action for the same nonterminal, then we know the lookahead
                    // is that nonterminal, so it's not necessary to check the lookahead (we don't want to access the
                    // lookahead unnecessarily).  But it's not an if-and-only-if condition; we could have just REDUCE'd
                    // that nonterminal but the HPS has no parent because the trunk action was executed and then popped,
                    // meaning that the parent of this HPS would be the parse tree root.
                    bool take_action = true;
                    assert(hps.m_parent_node != NULL);
                    if (transition.m_type == Npda_::Transition_::REDUCE)
                    {
                        Grammar_::Rule_ const &rule = Grammar_::ms_rule_table_[transition.m_data_index];
                        bool is_empty_reduction_rule = rule.m_token_count == 0;
                        bool just_reduced_this_nonterminal = hps.m_parent_node->m_spec.m_type == ParseStackTreeNode_::REDUCE && hps.m_parent_node->m_spec.m_single_data == rule.m_reduction_nonterminal_token_id;
                        // The fancy logical construction here is to avoid accessing the lookahead unless necessary
                        // (and technically this is not optimal, since really when executing the trunk actions,
                        // the information of "parent is REDUCE and the reduction rule nonterminal is this one"
                        // is lost in the current implementation.
                        if (is_empty_reduction_rule &&
                            (just_reduced_this_nonterminal ||
                             rule.m_reduction_nonterminal_token_id == hps.LookaheadTokenId(*this))) // lookahead is this nonterminal
                        {
                            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1408 "barf_regex_parser.cpp"
 << "            Skipping default action REDUCE on empty reduction rule because the lookahead matches the reduction nonterminal.\n")
                            take_action = false;
                        }
                    }

                    if (take_action)
                    {
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1419 "barf_regex_parser.cpp"
 << "            Exercising transition without accessing lookahead... ")
                        resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << '\n')
                    }
                }
                // Otherwise, the lookahead must be accessed.
                else
                {
                    Token::Id lookahead_token_id = hps.LookaheadTokenId(*this);
/*
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1433 "barf_regex_parser.cpp"
 << "                Lookahead is " << Token(lookahead_token_id) << '\n')
*/
                    if (transition.m_token_index == lookahead_token_id)
                    {
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1441 "barf_regex_parser.cpp"
 << "            Exercising transition using lookahead " << Token(lookahead_token_id) << " ... ")
                        resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << '\n')
                    }
                }
                if (resulting_hps != NULL)
                    m_hypothetical_state_->m_new_hps_queue.push_back(resulting_hps);
            }
        }
    }

    // Take new hps-es and clear old ones.
    assert(!m_hypothetical_state_->m_new_hps_queue.empty());
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1458 "barf_regex_parser.cpp"
 << "    Removing defunct HPSes...\n")
    for (HPSQueue_::iterator hps_it = m_hypothetical_state_->m_hps_queue.begin(), hps_it_end = m_hypothetical_state_->m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ *hps = *hps_it;
        if (hps != NULL)
        {
            TRISON_CPP_DEBUG_CODE_(
                hps->Print(*DebugSpewStream(), this, DebugSpewPrefix(), 2);
            )
            m_hypothetical_state_->DeleteBranch(hps);
        }
    }
    m_hypothetical_state_->m_hps_queue.clear();
    std::swap(m_hypothetical_state_->m_hps_queue, m_hypothetical_state_->m_new_hps_queue);
    assert(m_hypothetical_state_->m_new_hps_queue.empty());
}

Parser::Token::Data Parser::ExecuteReductionRule_ (std::uint32_t const rule_index_, TokenStack_ const &token_stack)
{
    assert(rule_index_ < Grammar_::ms_rule_count_);
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 1482 "barf_regex_parser.cpp"
 << "Executing reduction rule " << rule_index_ << '\n')
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return NULL;

        case 0:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            RegularExpression * regex(Dsc<RegularExpression *>(token_stack[token_stack.size()-3].m_data));
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));

#line 336 "barf_regex_parser.trison"

        for (RegularExpression::size_type i = 0; i < regex->size(); ++i)
            if (Regex::NodesAreEqual(branch, regex->Element(i)))
                THROW_STRING("duplicated branch");

        regex->Append(branch);
        return regex;
    
#line 1505 "barf_regex_parser.cpp"
            break;
        }

        case 1:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));

#line 346 "barf_regex_parser.trison"

        RegularExpression *regex = new RegularExpression();
        regex->Append(branch);
        return regex;
    
#line 1520 "barf_regex_parser.cpp"
            break;
        }

        case 2:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            RegularExpression * regex(Dsc<RegularExpression *>(token_stack[token_stack.size()-3].m_data));
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));

#line 356 "barf_regex_parser.trison"

        for (RegularExpression::size_type i = 0; i < regex->size(); ++i)
            if (Regex::NodesAreEqual(branch, regex->Element(i)))
                THROW_STRING("duplicated branch");

        regex->Append(branch);
        return regex;
    
#line 1539 "barf_regex_parser.cpp"
            break;
        }

        case 3:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));

#line 366 "barf_regex_parser.trison"

        RegularExpression *regex = new RegularExpression();
        regex->Append(branch);
        return regex;
    
#line 1554 "barf_regex_parser.cpp"
            break;
        }

        case 4:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            RegularExpression * regex(Dsc<RegularExpression *>(token_stack[token_stack.size()-3].m_data));
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));

#line 376 "barf_regex_parser.trison"

        for (RegularExpression::size_type i = 0; i < regex->size(); ++i)
            if (Regex::NodesAreEqual(branch, regex->Element(i)))
                THROW_STRING("duplicated branch");

        regex->Append(branch);
        return regex;
    
#line 1573 "barf_regex_parser.cpp"
            break;
        }

        case 5:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));

#line 386 "barf_regex_parser.trison"

        RegularExpression *regex = new RegularExpression();
        regex->Append(branch);
        return regex;
    
#line 1588 "barf_regex_parser.cpp"
            break;
        }

        case 6:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-1].m_data));

#line 415 "barf_regex_parser.trison"
 return branch; 
#line 1599 "barf_regex_parser.cpp"
            break;
        }

        case 7:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-1].m_data));

#line 416 "barf_regex_parser.trison"
 return branch; 
#line 1610 "barf_regex_parser.cpp"
            break;
        }

        case 8:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 417 "barf_regex_parser.trison"
 return new Branch(); 
#line 1620 "barf_regex_parser.cpp"
            break;
        }

        case 9:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));
            Bound * bound(Dsc<Bound *>(token_stack[token_stack.size()-1].m_data));

#line 423 "barf_regex_parser.trison"

        branch->AddBound(bound);
        return branch;
    
#line 1635 "barf_regex_parser.cpp"
            break;
        }

        case 10:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));
            Atom * atom(Dsc<Atom *>(token_stack[token_stack.size()-1].m_data));

#line 432 "barf_regex_parser.trison"

        branch->AddAtom(atom);
        return branch;
    
#line 1650 "barf_regex_parser.cpp"
            break;
        }

        case 11:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Branch * branch(Dsc<Branch *>(token_stack[token_stack.size()-2].m_data));
            Atom * atom(Dsc<Atom *>(token_stack[token_stack.size()-1].m_data));

#line 438 "barf_regex_parser.trison"

        branch->AddAtom(atom);
        return branch;
    
#line 1665 "barf_regex_parser.cpp"
            break;
        }

        case 12:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Atom * atom(Dsc<Atom *>(token_stack[token_stack.size()-1].m_data));

#line 444 "barf_regex_parser.trison"

        Branch *branch = new Branch();
        branch->AddAtom(atom);
        return branch;
    
#line 1680 "barf_regex_parser.cpp"
            break;
        }

        case 13:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * macro_name(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));

#line 458 "barf_regex_parser.trison"

        assert(macro_name != NULL);
        if (m_macro_map == NULL)
            THROW_STRING("undefined macro \"" + macro_name->GetText() + "\" (no macro map was provided)");
        RegularExpression *macro_regex = m_macro_map->Element(macro_name->GetText());
        if (macro_regex == NULL)
            THROW_STRING("undefined macro \"" + macro_name->GetText() + "\"");
        return macro_regex;
    
#line 1699 "barf_regex_parser.cpp"
            break;
        }

        case 14:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            RegularExpression * regex(Dsc<RegularExpression *>(token_stack[token_stack.size()-1].m_data));

#line 467 "barf_regex_parser.trison"
 return regex; 
#line 1710 "barf_regex_parser.cpp"
            break;
        }

        case 15:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 469 "barf_regex_parser.trison"
 return new ConditionalChar(CT_BEGINNING_OF_LINE); 
#line 1720 "barf_regex_parser.cpp"
            break;
        }

        case 16:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 470 "barf_regex_parser.trison"
 return new ConditionalChar(CT_END_OF_LINE); 
#line 1730 "barf_regex_parser.cpp"
            break;
        }

        case 17:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 471 "barf_regex_parser.trison"
 return new BracketCharSet('\n', true); 
#line 1740 "barf_regex_parser.cpp"
            break;
        }

        case 18:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 472 "barf_regex_parser.trison"
 return ch; 
#line 1751 "barf_regex_parser.cpp"
            break;
        }

        case 19:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 474 "barf_regex_parser.trison"

        if (ch->GetChar() == '0')
            THROW_STRING("can't use \\0");
        Atom *escaped = ch->Escaped();
        // if escaping changed the char (i.e. it new'ed something), delete the old
        if (ch != escaped)
            delete ch;
        return escaped;
    
#line 1770 "barf_regex_parser.cpp"
            break;
        }

        case 20:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 483 "barf_regex_parser.trison"
 return ch; 
#line 1781 "barf_regex_parser.cpp"
            break;
        }

        case 21:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 484 "barf_regex_parser.trison"
 return ch; 
#line 1792 "barf_regex_parser.cpp"
            break;
        }

        case 22:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Atom * exp(Dsc<Atom *>(token_stack[token_stack.size()-1].m_data));

#line 485 "barf_regex_parser.trison"
 return exp; 
#line 1803 "barf_regex_parser.cpp"
            break;
        }

        case 23:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 490 "barf_regex_parser.trison"
 return new Bound(0, Bound::NO_UPPER_BOUND); 
#line 1813 "barf_regex_parser.cpp"
            break;
        }

        case 24:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 492 "barf_regex_parser.trison"
 return new Bound(1, Bound::NO_UPPER_BOUND); 
#line 1823 "barf_regex_parser.cpp"
            break;
        }

        case 25:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 494 "barf_regex_parser.trison"
 return new Bound(0, 1); 
#line 1833 "barf_regex_parser.cpp"
            break;
        }

        case 26:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::SignedInteger * exact_bound(Dsc<Ast::SignedInteger *>(token_stack[token_stack.size()-2].m_data));

#line 497 "barf_regex_parser.trison"

        assert(exact_bound->Value() >= 0);
        Bound *bound = new Bound(exact_bound->Value(), exact_bound->Value());
        delete exact_bound;
        return bound;
    
#line 1849 "barf_regex_parser.cpp"
            break;
        }

        case 27:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::SignedInteger * lower_bound(Dsc<Ast::SignedInteger *>(token_stack[token_stack.size()-3].m_data));

#line 505 "barf_regex_parser.trison"

        assert(lower_bound->Value() >= 0);
        return new Bound(lower_bound->Value(), Bound::NO_UPPER_BOUND);
    
#line 1863 "barf_regex_parser.cpp"
            break;
        }

        case 28:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::SignedInteger * lower_bound(Dsc<Ast::SignedInteger *>(token_stack[token_stack.size()-4].m_data));
            Ast::SignedInteger * upper_bound(Dsc<Ast::SignedInteger *>(token_stack[token_stack.size()-2].m_data));

#line 511 "barf_regex_parser.trison"

        assert(lower_bound->Value() >= 0);
        assert(upper_bound->Value() >= 0);
        if (lower_bound->Value() > upper_bound->Value() ||
            (lower_bound->Value() == 0 && upper_bound->Value() == 0))
        {
            ostringstream out;
            out << "invalid bound {" << lower_bound->Value() << ',' << upper_bound->Value() << '}';
            throw out.str();
        }
        else if (lower_bound->Value() > Bound::MaximumBoundValue())
        {
            ostringstream out;
            out << "bound value " << lower_bound->Value() << " is out of range (max 255)";
            throw out.str();
        }
        else if (upper_bound->Value() > Bound::MaximumBoundValue())
        {
            ostringstream out;
            out << "bound value " << upper_bound->Value() << " is out of range (max 255)";
            throw out.str();
        }
        Bound *bound = new Bound(lower_bound->Value(), upper_bound->Value());
        delete lower_bound;
        delete upper_bound;
        return bound;
    
#line 1901 "barf_regex_parser.cpp"
            break;
        }

        case 29:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            BracketCharSet * bracket_char_set(Dsc<BracketCharSet *>(token_stack[token_stack.size()-2].m_data));

#line 547 "barf_regex_parser.trison"

        if (bracket_char_set->IsEmpty())
            THROW_STRING("invalid empty bracket expression");
        return bracket_char_set;
    
#line 1916 "barf_regex_parser.cpp"
            break;
        }

        case 30:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            BracketCharSet * bracket_char_set(Dsc<BracketCharSet *>(token_stack[token_stack.size()-2].m_data));

#line 554 "barf_regex_parser.trison"

        if (bracket_char_set->IsEmpty())
            THROW_STRING("invalid empty bracket expression");
        bracket_char_set->Negate();
        return bracket_char_set;
    
#line 1932 "barf_regex_parser.cpp"
            break;
        }

        case 31:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            BracketCharSet * bracket_char_set(Dsc<BracketCharSet *>(token_stack[token_stack.size()-2].m_data));
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 565 "barf_regex_parser.trison"

        bracket_char_set->AddChar(ch->GetChar());
        delete ch;
        return bracket_char_set;
    
#line 1948 "barf_regex_parser.cpp"
            break;
        }

        case 32:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            BracketCharSet * bracket_char_set(Dsc<BracketCharSet *>(token_stack[token_stack.size()-4].m_data));
            Char * begin_range(Dsc<Char *>(token_stack[token_stack.size()-3].m_data));
            Char * end_range(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 572 "barf_regex_parser.trison"

        if (end_range->GetChar() < begin_range->GetChar())
            THROW_STRING("invalid bracketed range [" << CharLiteral(begin_range->GetChar(), false) << '-' << CharLiteral(end_range->GetChar(), false) << ']');
        bracket_char_set->AddCharRange(
            begin_range->GetChar(),
            end_range->GetChar());
        delete begin_range;
        delete end_range;
        return bracket_char_set;
    
#line 1970 "barf_regex_parser.cpp"
            break;
        }

        case 33:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            BracketCharSet * bracket_char_set(Dsc<BracketCharSet *>(token_stack[token_stack.size()-6].m_data));
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-3].m_data));

#line 584 "barf_regex_parser.trison"

        bracket_char_set->AddCharClass(id->GetText());
        delete id;
        return bracket_char_set;
    
#line 1986 "barf_regex_parser.cpp"
            break;
        }

        case 34:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 591 "barf_regex_parser.trison"

        BracketCharSet *bracket_char_set = new BracketCharSet();
        return bracket_char_set;
    
#line 1999 "barf_regex_parser.cpp"
            break;
        }

        case 35:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * normal_char(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 599 "barf_regex_parser.trison"
 return normal_char; 
#line 2010 "barf_regex_parser.cpp"
            break;
        }

        case 36:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * normal_char(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 601 "barf_regex_parser.trison"
 normal_char->EscapeInsideBracketExpression(); return normal_char; 
#line 2021 "barf_regex_parser.cpp"
            break;
        }

        case 37:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * control_char(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 603 "barf_regex_parser.trison"
 return control_char; 
#line 2032 "barf_regex_parser.cpp"
            break;
        }

        case 38:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * hex_char(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 605 "barf_regex_parser.trison"
 return hex_char; 
#line 2043 "barf_regex_parser.cpp"
            break;
        }

        case 39:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 621 "barf_regex_parser.trison"
 return new Char('|'); 
#line 2053 "barf_regex_parser.cpp"
            break;
        }

        case 40:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 623 "barf_regex_parser.trison"
 return new Char('('); 
#line 2063 "barf_regex_parser.cpp"
            break;
        }

        case 41:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 625 "barf_regex_parser.trison"
 return new Char(')'); 
#line 2073 "barf_regex_parser.cpp"
            break;
        }

        case 42:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 627 "barf_regex_parser.trison"
 return new Char('{'); 
#line 2083 "barf_regex_parser.cpp"
            break;
        }

        case 43:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 629 "barf_regex_parser.trison"
 return new Char('}'); 
#line 2093 "barf_regex_parser.cpp"
            break;
        }

        case 44:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 631 "barf_regex_parser.trison"
 return new Char('['); 
#line 2103 "barf_regex_parser.cpp"
            break;
        }

        case 45:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 633 "barf_regex_parser.trison"
 return new Char(']'); 
#line 2113 "barf_regex_parser.cpp"
            break;
        }

        case 46:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 635 "barf_regex_parser.trison"
 return new Char('?'); 
#line 2123 "barf_regex_parser.cpp"
            break;
        }

        case 47:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 637 "barf_regex_parser.trison"
 return new Char('*'); 
#line 2133 "barf_regex_parser.cpp"
            break;
        }

        case 48:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 639 "barf_regex_parser.trison"
 return new Char('+'); 
#line 2143 "barf_regex_parser.cpp"
            break;
        }

        case 49:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 641 "barf_regex_parser.trison"
 return new Char('.'); 
#line 2153 "barf_regex_parser.cpp"
            break;
        }

        case 50:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 643 "barf_regex_parser.trison"
 return new Char('^'); 
#line 2163 "barf_regex_parser.cpp"
            break;
        }

        case 51:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 645 "barf_regex_parser.trison"
 return new Char('$'); 
#line 2173 "barf_regex_parser.cpp"
            break;
        }

        case 52:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 647 "barf_regex_parser.trison"
 return new Char('\\'); 
#line 2183 "barf_regex_parser.cpp"
            break;
        }

        case 53:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * alpha(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 658 "barf_regex_parser.trison"
 return alpha; 
#line 2194 "barf_regex_parser.cpp"
            break;
        }

        case 54:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * digit(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 659 "barf_regex_parser.trison"
 return digit; 
#line 2205 "barf_regex_parser.cpp"
            break;
        }

        case 55:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 660 "barf_regex_parser.trison"
 return ch; 
#line 2216 "barf_regex_parser.cpp"
            break;
        }

        case 56:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 661 "barf_regex_parser.trison"
 return new Char(','); 
#line 2226 "barf_regex_parser.cpp"
            break;
        }

        case 57:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 662 "barf_regex_parser.trison"
 return new Char('-'); 
#line 2236 "barf_regex_parser.cpp"
            break;
        }

        case 58:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 663 "barf_regex_parser.trison"
 return new Char(':'); 
#line 2246 "barf_regex_parser.cpp"
            break;
        }

        case 59:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 675 "barf_regex_parser.trison"
 return new Char('-'); 
#line 2256 "barf_regex_parser.cpp"
            break;
        }

        case 60:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 677 "barf_regex_parser.trison"
 return new Char('^'); 
#line 2266 "barf_regex_parser.cpp"
            break;
        }

        case 61:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 679 "barf_regex_parser.trison"
 return new Char('['); 
#line 2276 "barf_regex_parser.cpp"
            break;
        }

        case 62:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 681 "barf_regex_parser.trison"
 return new Char(']'); 
#line 2286 "barf_regex_parser.cpp"
            break;
        }

        case 63:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 683 "barf_regex_parser.trison"
 return new Char('\\'); 
#line 2296 "barf_regex_parser.cpp"
            break;
        }

        case 64:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * alpha(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 694 "barf_regex_parser.trison"
 return alpha; 
#line 2307 "barf_regex_parser.cpp"
            break;
        }

        case 65:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * digit(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 695 "barf_regex_parser.trison"
 return digit; 
#line 2318 "barf_regex_parser.cpp"
            break;
        }

        case 66:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 696 "barf_regex_parser.trison"
 return ch; 
#line 2329 "barf_regex_parser.cpp"
            break;
        }

        case 67:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 697 "barf_regex_parser.trison"
 return new Char('|'); 
#line 2339 "barf_regex_parser.cpp"
            break;
        }

        case 68:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 698 "barf_regex_parser.trison"
 return new Char(':'); 
#line 2349 "barf_regex_parser.cpp"
            break;
        }

        case 69:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 699 "barf_regex_parser.trison"
 return new Char('?'); 
#line 2359 "barf_regex_parser.cpp"
            break;
        }

        case 70:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 700 "barf_regex_parser.trison"
 return new Char('*'); 
#line 2369 "barf_regex_parser.cpp"
            break;
        }

        case 71:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 701 "barf_regex_parser.trison"
 return new Char('+'); 
#line 2379 "barf_regex_parser.cpp"
            break;
        }

        case 72:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 702 "barf_regex_parser.trison"
 return new Char('.'); 
#line 2389 "barf_regex_parser.cpp"
            break;
        }

        case 73:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 703 "barf_regex_parser.trison"
 return new Char('$'); 
#line 2399 "barf_regex_parser.cpp"
            break;
        }

        case 74:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 704 "barf_regex_parser.trison"
 return new Char(','); 
#line 2409 "barf_regex_parser.cpp"
            break;
        }

        case 75:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 705 "barf_regex_parser.trison"
 return new Char('('); 
#line 2419 "barf_regex_parser.cpp"
            break;
        }

        case 76:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 706 "barf_regex_parser.trison"
 return new Char(')'); 
#line 2429 "barf_regex_parser.cpp"
            break;
        }

        case 77:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 707 "barf_regex_parser.trison"
 return new Char('{'); 
#line 2439 "barf_regex_parser.cpp"
            break;
        }

        case 78:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());

#line 708 "barf_regex_parser.trison"
 return new Char('}'); 
#line 2449 "barf_regex_parser.cpp"
            break;
        }

        case 79:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));
            Char * alpha(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 714 "barf_regex_parser.trison"

        assert(id != NULL);
        id->AppendChar(alpha->GetChar());
        delete alpha;
        return id;
    
#line 2466 "barf_regex_parser.cpp"
            break;
        }

        case 80:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 722 "barf_regex_parser.trison"

        assert(id != NULL);
        id->AppendChar(ch->GetChar());
        delete ch;
        return id;
    
#line 2483 "barf_regex_parser.cpp"
            break;
        }

        case 81:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::Id * id(Dsc<Ast::Id *>(token_stack[token_stack.size()-2].m_data));
            Char * digit(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 730 "barf_regex_parser.trison"

        assert(id != NULL);
        id->AppendChar(digit->GetChar());
        delete digit;
        return id;
    
#line 2500 "barf_regex_parser.cpp"
            break;
        }

        case 82:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * alpha(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 738 "barf_regex_parser.trison"

        string temp;
        temp += alpha->GetChar();
        Ast::Id *id = new Ast::Id(temp, FiLoc::ms_invalid);
        delete alpha;
        return id;
    
#line 2517 "barf_regex_parser.cpp"
            break;
        }

        case 83:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * ch(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 747 "barf_regex_parser.trison"

        string temp;
        temp += ch->GetChar();
        Ast::Id *id = new Ast::Id(temp, FiLoc::ms_invalid);
        delete ch;
        return id;
    
#line 2534 "barf_regex_parser.cpp"
            break;
        }

        case 84:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Ast::SignedInteger * integer(Dsc<Ast::SignedInteger *>(token_stack[token_stack.size()-2].m_data));
            Char * digit(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 759 "barf_regex_parser.trison"

        integer->ShiftAndAdd(digit->GetChar() - '0');
        if (integer->Value() > 255)
            integer->SetValue(255);
        delete digit;
        return integer;
    
#line 2552 "barf_regex_parser.cpp"
            break;
        }

        case 85:
        {
            assert(Grammar_::ms_rule_table_[rule_index_].m_token_count < token_stack.size());
            Char * digit(Dsc<Char *>(token_stack[token_stack.size()-1].m_data));

#line 768 "barf_regex_parser.trison"

        Ast::SignedInteger *integer = new Ast::SignedInteger(digit->GetChar() - '0', FiLoc::ms_invalid);
        delete digit;
        return integer;
    
#line 2567 "barf_regex_parser.cpp"
            break;
        }

    }

    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "PROGRAMMER ERROR: No value returned from reduction rule code block; rule " << rule_index_ << ": " << Grammar_::ms_rule_table_[rule_index_].m_description << '\n')
    assert(false && "no value returned from reduction rule code block");
    return NULL;
}

void Parser::PrintParserStatus_ (std::ostream &out) const
{
    assert(m_hypothetical_state_->m_root != NULL);

    // TODO: Print full stack (this is quite a lot)
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2586 "barf_regex_parser.cpp"
 << "Realized state branch node stacks are (each listed bottom to top):\n";
    for (BranchNodePtrVector_::const_iterator it = m_realized_state_->BranchNodePtrVectorStack().back().begin(),
                                              it_end = m_realized_state_->BranchNodePtrVectorStack().back().end();
         it != it_end;
         ++it)
    {
        BranchNodePtr_ const &branch_node_ptr = *it;
        out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2597 "barf_regex_parser.cpp"
 << "    (";
        branch_node_ptr->PrintRootToLeaf(out, IdentityTransform_<Npda_::StateIndex_>);
        out << ")\n";
    }

    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2606 "barf_regex_parser.cpp"
 << "Max realized lookahead count (so far) is:\n";
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2611 "barf_regex_parser.cpp"
 << "    " << m_realized_state_->MaxRealizedLookaheadCount();
    if (m_max_allowable_lookahead_count >= 0)
        out << " (max allowable lookahead count is " << m_max_allowable_lookahead_count << ")\n";
    else
        out << " (allowable lookahead count is unlimited)\n";
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2620 "barf_regex_parser.cpp"
 << "Has-encountered-error-state (so far) is:\n";
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2625 "barf_regex_parser.cpp"
 << "    " << (m_realized_state_->HasEncounteredErrorState() ? "true" : "false") << '\n';
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2630 "barf_regex_parser.cpp"
 << "Realized stack tokens then realized lookahead queue is:\n";
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2635 "barf_regex_parser.cpp"
 << "    ";
    for (TokenStack_::const_iterator it = m_realized_state_->TokenStack().begin(),
                                     it_end = m_realized_state_->TokenStack().end();
         it != it_end;
         ++it)
    {
        Token const &token = *it;
        out << token << ' ';
    }
    out << ". ";
    for (TokenQueue_::const_iterator it = m_realized_state_->LookaheadQueue().begin(),
                                     it_end = m_realized_state_->LookaheadQueue().end();
         it != it_end;
         ++it)
    {
        Token const &token = *it;
        out << token << ' ';
    }
    out << '\n';

    m_hypothetical_state_->m_root->Print(out, this, DebugSpewPrefix());
    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2660 "barf_regex_parser.cpp"
 << '\n';

    out << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 2666 "barf_regex_parser.cpp"
 << "HPS queue:\n";
    for (HPSQueue_::const_iterator it = m_hypothetical_state_->m_hps_queue.begin(), it_end = m_hypothetical_state_->m_hps_queue.end(); it != it_end; ++it)
    {
        ParseStackTreeNode_ *hps = *it;
        assert(hps != NULL);
        hps->Print(out, this, DebugSpewPrefix(), 1);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::RealizedState_
// ////////////////////////////////////////////////////////////////////////////

Parser::RealizedState_::RealizedState_ (Npda_::StateIndex_ initial_state)
    :   m_max_realized_lookahead_count(0)
    ,   m_has_encountered_error_state(false)
{
    Initialize(initial_state);
}

void Parser::RealizedState_::PushBackLookahead (Token const &lookahead, HPSQueue_ const &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out.

    m_lookahead_queue.push_back(lookahead);
    UpdateMaxRealizedLookaheadCount(hps_queue);
}

Parser::Token Parser::RealizedState_::PopStack ()
{
    assert(!m_token_stack.empty());

    Token popped_token(m_token_stack.back());
    m_token_stack.pop_back();

    assert(!m_branch_node_ptr_vector_stack.empty());
    m_branch_node_ptr_vector_stack.pop_back();
    assert(!m_branch_node_token_id_ptr_vector_stack.empty());
    m_branch_node_token_id_ptr_vector_stack.pop_back();

    assert(m_branch_node_ptr_vector_stack.size() == m_token_stack.size());
    assert(m_branch_node_ptr_vector_stack.size() == m_branch_node_token_id_ptr_vector_stack.size());

    return popped_token;
}

Parser::Token Parser::RealizedState_::PopFrontLookahead (HPSQueue_ &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out.

    assert(!m_lookahead_queue.empty());
    // Because the contents of m_lookahead_queue are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        --hps.m_realized_lookahead_cursor;
    }
    Token retval(m_lookahead_queue.back());
    m_lookahead_queue.pop_front();
    return retval;
}

void Parser::RealizedState_::StealTokenStackTop (Ast::Base * *&return_token)
{
    assert(return_token != NULL);
    assert(!m_token_stack.empty());
    *return_token = m_token_stack.back().m_data;
    // Assign the token default so that the actual return token isn't destroyed when the parser is destroyed.
    m_token_stack.back().m_data = NULL;
}

// void Parser::RealizedState_::ExecuteAction (Npda_::Transition_::Type action, ActionData_ action_data)
// {
// }

void Parser::RealizedState_::ExecuteActionReduce (Grammar_::Rule_ const &rule, Token::Data const &reduced_nonterminal_token_data, HPSQueue_ &hps_queue)
{
    for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
        PopStack();
    // Push the reduced nonterminal token data onto the front of the lookahead queue
    PushFrontLookahead(Token(rule.m_reduction_nonterminal_token_id, reduced_nonterminal_token_data), hps_queue);
}

void Parser::RealizedState_::ExecuteActionShift (BranchNodePtrVector_ const &shifted_branch_node_ptr_vector, BranchNodeTokenIdPtrVector_ const &shifted_branch_node_token_id_ptr_vector, HPSQueue_ &hps_queue)
{
    // Ensure that each of the branch nodes in the shifted vector are actually children of
    // the current set of branch nodes.
    assert(!m_branch_node_ptr_vector_stack.empty());
    assert(!m_branch_node_token_id_ptr_vector_stack.empty());
    assert(m_branch_node_ptr_vector_stack.size() == m_branch_node_ptr_vector_stack.size());
    BranchNodePtrVector_ const &branch_node_ptr_vector_stack_top = m_branch_node_ptr_vector_stack.back();
    // Ensure that the stack is actually consistent with regard to the parent/child relationships.
    for (BranchNodePtrVector_::const_iterator it = shifted_branch_node_ptr_vector.begin(), it_end = shifted_branch_node_ptr_vector.end(); it != it_end; ++it)
    {
        BranchNodePtr_ const &branch_node_ptr = *it;
        //assert(branch_node_ptr_vector_stack_top.find(branch_node_ptr->Parent()) != branch_node_ptr_vector_stack_top.end());
        assert(TEMP_vector_find_<TreeNodeOrder_<Npda_::StateIndex_>>(branch_node_ptr_vector_stack_top, branch_node_ptr->Parent()) != branch_node_ptr_vector_stack_top.end());
    }
    BranchNodeTokenIdPtrVector_ const &branch_node_token_id_ptr_vector_stack_top = m_branch_node_token_id_ptr_vector_stack.back();
    assert(branch_node_ptr_vector_stack_top.size() == branch_node_token_id_ptr_vector_stack_top.size());
    // Ensure that the stack is actually consistent with regard to the parent/child relationships.
    for (BranchNodeTokenIdPtrVector_::const_iterator it = shifted_branch_node_token_id_ptr_vector.begin(), it_end = shifted_branch_node_token_id_ptr_vector.end(); it != it_end; ++it)
    {
        BranchNodeTokenIdPtr_ const &branch_node_token_id_ptr = *it;
        //assert(branch_node_token_id_ptr_vector_stack_top.find(branch_node_token_id_ptr->Parent()) != branch_node_token_id_ptr_vector_stack_top.end());
        assert(TEMP_vector_find_<TreeNodeOrder_<Token::Id>>(branch_node_token_id_ptr_vector_stack_top, branch_node_token_id_ptr->Parent()) != branch_node_token_id_ptr_vector_stack_top.end());
    }
    // Ensure that there's actually a lookahead.
    assert(!m_lookahead_queue.empty());


    // Push onto the branch node stack.
    m_branch_node_ptr_vector_stack.push_back(shifted_branch_node_ptr_vector);
    // Push onto the branch node token id stack.
    m_branch_node_token_id_ptr_vector_stack.push_back(shifted_branch_node_token_id_ptr_vector);
    // Push the token onto the stack.
    m_token_stack.push_back(m_lookahead_queue.front());
    // Pop the shifted lookahead from the queue
    PopFrontLookahead(hps_queue);
}

void Parser::RealizedState_::ExecuteActionInsertLookaheadError (HPSQueue_ &hps_queue)
{
    PushFrontLookahead(Token(Terminal::ERROR_), hps_queue);
    SetHasEncounteredErrorState();
}

void Parser::RealizedState_::ExecuteActionDiscardLookahead (HPSQueue_ &hps_queue)
{
    assert(!m_lookahead_queue.empty());
    PopFrontLookahead(hps_queue);
}

void Parser::RealizedState_::ClearStack ()
{
    m_branch_node_ptr_vector_stack.clear();
    m_branch_node_token_id_ptr_vector_stack.clear();
    m_token_stack.clear();
}

void Parser::RealizedState_::Reinitialize (Npda_::StateIndex_ initial_state)
{
    // Clear the stack(s) and reset the error state.
    ClearStack();
    m_has_encountered_error_state = false;
    // But preserve m_lookahead_queue and m_max_realized_lookahead_count.

    Initialize(initial_state);
}

void Parser::RealizedState_::Initialize (Npda_::StateIndex_ initial_state)
{
    assert(m_branch_node_ptr_vector_stack.empty());
    assert(m_branch_node_token_id_ptr_vector_stack.empty());
    assert(m_token_stack.empty());

    BranchNodePtrVector_ initial_branch_node_ptr_vector;
    initial_branch_node_ptr_vector.push_back(BranchNode_::CreateOrphan(initial_state));
    m_branch_node_ptr_vector_stack.push_back(initial_branch_node_ptr_vector);
    // Put a dummy token ID in to correspond with the start state.
    BranchNodeTokenIdPtrVector_ initial_branch_node_token_id_ptr_vector;
    initial_branch_node_token_id_ptr_vector.push_back(BranchNodeTokenId_::CreateOrphan(Nonterminal::none_));
    m_branch_node_token_id_ptr_vector_stack.push_back(initial_branch_node_token_id_ptr_vector);
    // Put a dummy token in to correspond with the start state.
    m_token_stack.push_back(Token(Nonterminal::none_));
}

void Parser::RealizedState_::PushFrontLookahead (Token const &lookahead, HPSQueue_ &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out.

    m_lookahead_queue.push_front(lookahead);
    // Because the contents of m_lookahead_queue_ are changing, and each hps's
    // m_realized_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        ++hps.m_realized_lookahead_cursor;
    }
    UpdateMaxRealizedLookaheadCount(hps_queue);
}

void Parser::RealizedState_::UpdateMaxRealizedLookaheadCount (HPSQueue_ const &hps_queue)
{
    // NOTE: For now, during this RealizedState_ and HypotheticalState_ refactor,
    // this RealizedState_ method will be responsible for handling some HypotheticalState_
    // logic (regarding the lookahead cursors of the HPS queue).  But perhaps this should
    // be factored out.

    // HPS's m_realized_lookahead_cursor is an index into RealizedState::m_lookahead_queue, so the number
    // of lookaheads depends on the cursor for each branch.
    for (HPSQueue_::const_iterator hps_it = hps_queue.begin(), hps_it_end = hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        // Skip nullified elements because they have been deleted.
        if (*hps_it == NULL)
            continue;

        ParseStackTreeNode_ const &hps = **hps_it;
        // The actual lookaheads are offset by the realized lookahead cursor, because the tokens before
        // the realized lookahead cursor are ones we've seen already, and therefore don't contribute to
        // the actual lookahead count.
        assert(m_lookahead_queue.size() >= hps.m_realized_lookahead_cursor);
        std::size_t hps_actual_lookahead_count = m_lookahead_queue.size() - hps.m_realized_lookahead_cursor;
        m_max_realized_lookahead_count = std::max(m_max_realized_lookahead_count, hps_actual_lookahead_count);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::HypotheticalState_
// ////////////////////////////////////////////////////////////////////////////

Parser::HypotheticalState_::HypotheticalState_ (std::uint32_t initial_state)
{
    m_root = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::ROOT));

    ParseStackTreeNode_ *hps = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::HPS));
    hps->m_branch_node_ptr = BranchNode_::CreateOrphan(initial_state);
    hps->m_branch_node_token_id_ptr = BranchNodeTokenId_::CreateOrphan(Nonterminal::none_);

    m_root->AddChild(hps);
    m_hps_queue.push_back(hps);
}

Parser::HypotheticalState_::~HypotheticalState_ ()
{
    m_hps_queue.clear();
    m_new_hps_queue.clear();

    delete m_root;
    m_root = NULL;
}

bool Parser::HypotheticalState_::MinAndMaxRealizedLookaheadCursorsAreEqual () const
{
    std::uint32_t min;
    std::uint32_t max;
    ComputeMinAndMaxRealizedLookaheadCursors(&min, &max);
    return min == max;
}

void Parser::HypotheticalState_::DeleteBranch (ParseStackTreeNode_ *branch_node)
{
    assert(!branch_node->IsRoot());

    // Find the most root-ward ancestor that is an only child that isn't the root node.
    ParseStackTreeNode_ *branch_root = branch_node->BranchRoot();
    assert(branch_root != NULL);
    assert(!branch_root->IsRoot());
    assert(branch_root->HasParent());

    branch_root->RemoveFromParent();
    branch_node->NullifyHPSNodeDescendantsInHPSQueue(m_hps_queue);
    delete branch_root;
}

void Parser::HypotheticalState_::DestroyParseTree ()
{
    assert(m_new_hps_queue.empty());
    // Clear all HPSes, which represent the leaf nodes of the parse tree.
    m_hps_queue.clear();
    // Delete the parse tree root, which deletes all nodes.
    delete m_root;
    // At this point, the parse tree has been destroyed.  Create a new root node.
    m_root = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::ROOT));
}

void Parser::HypotheticalState_::ComputeMinAndMaxRealizedLookaheadCursors (std::uint32_t *min, std::uint32_t *max) const
{
    if (min != NULL)
        *min = std::numeric_limits<std::uint32_t>::max();
    if (max != NULL)
        *max = std::numeric_limits<std::uint32_t>::min();

    for (HPSQueue_::const_iterator hps_it = m_hps_queue.begin(), hps_it_end = m_hps_queue.end(); hps_it != hps_it_end; ++hps_it)
    {
        // Skip nullified HPS nodes.
        if (*hps_it == NULL)
            continue;

        ParseStackTreeNode_ const &hps = **hps_it;
        if (min != NULL && hps.m_realized_lookahead_cursor < *min)
            *min = hps.m_realized_lookahead_cursor;
        if (max != NULL && hps.m_realized_lookahead_cursor > *max)
            *max = hps.m_realized_lookahead_cursor;
    }
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::ParseStackTreeNode_
// ////////////////////////////////////////////////////////////////////////////

char const *Parser::ParseStackTreeNode_::AsString (Type type)
{
    static char const *const LOOKUP_TABLE[COUNT_] =
    {
        "ROOT",
        "RETURN",
        "REDUCE",
        "SHIFT",
        "INSERT_LOOKAHEAD_ERROR",
        "DISCARD_LOOKAHEAD",
        "POP_STACK",
        "HPS"
    };
    assert(std::uint32_t(type) < COUNT_);
    return LOOKUP_TABLE[std::uint32_t(type)];
}


bool Parser::ParseStackTreeNode_::ParseStackTreeNodeOrder::operator () (Parser::ParseStackTreeNode_ const *lhs, Parser::ParseStackTreeNode_ const *rhs) const
{
    assert(lhs != NULL);
    assert(rhs != NULL);
    assert(lhs->m_spec.m_type == rhs->m_spec.m_type); // ParseStackTreeNodeSet should contain only nodes of the same type.
    // for HPS, their contents must be compared.
    if (lhs->m_spec.m_type == HPS)
    {
        assert(lhs->m_child_nodes.empty());
        assert(rhs->m_child_nodes.empty());
        // hps-es are equal if their m_realized_lookahead_cursor and m_hypothetical_lookahead_token_id_queue members are.
        if (lhs->m_realized_lookahead_cursor != rhs->m_realized_lookahead_cursor)
            return lhs->m_realized_lookahead_cursor < rhs->m_realized_lookahead_cursor;
        else if (lhs->m_branch_node_ptr != rhs->m_branch_node_ptr)
            return lhs->m_branch_node_ptr < rhs->m_branch_node_ptr;
        else
            return std::lexicographical_compare(
                lhs->m_hypothetical_lookahead_token_id_queue.begin(), lhs->m_hypothetical_lookahead_token_id_queue.end(),
                rhs->m_hypothetical_lookahead_token_id_queue.begin(), rhs->m_hypothetical_lookahead_token_id_queue.end(),
                CompareTokenId_
            );
    }
    // For REDUCE, their contents must be compared.
    else if (lhs->m_spec.m_type == REDUCE)
    {
        // m_single_data contains the reduction rule index.
        Grammar_::Rule_ const &lhs_rule = Grammar_::ms_rule_table_[lhs->m_spec.m_single_data];
        Grammar_::Rule_ const &rhs_rule = Grammar_::ms_rule_table_[rhs->m_spec.m_single_data];
        // Sort first by rule precedence, then by rule index (lower has higher priority).
        if (Grammar_::ms_precedence_table_[lhs_rule.m_precedence_index].m_level != Grammar_::ms_precedence_table_[rhs_rule.m_precedence_index].m_level)
            return Grammar_::ms_precedence_table_[lhs_rule.m_precedence_index].m_level > Grammar_::ms_precedence_table_[rhs_rule.m_precedence_index].m_level;
        else // Sort based on rule index.
            return lhs->m_spec.m_single_data < rhs->m_spec.m_single_data;
    }
    // Otherwise just use pointer value.
    else
        return lhs < rhs;
}

Parser::ParseStackTreeNode_::~ParseStackTreeNode_ ()
{
    // TODO: figure out if stack element tokens should be thrown away
    // TODO: figure out if local lookahead queue tokens should be thrown away
    // TODO: are they actually uninitialized (default value)?
    for (ChildMap::iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet &child_node_set = it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            assert(child != NULL);
            assert(child->m_parent_node == this);
            delete child;
        }
        child_node_set.clear(); // not strictly necessary, but is cleaner.
    }
}

bool Parser::ParseStackTreeNode_::HasTrunkChild () const
{
    if (m_spec.m_type != ROOT || m_child_nodes.size() != 1)
        return false;
    ParseStackTreeNodeSet const &single_type_child_node_set = m_child_nodes.begin()->second;
    if (single_type_child_node_set.size() != 1)
        return false;
    ParseStackTreeNode_ *single_child = *single_type_child_node_set.begin();
    assert(single_child != NULL);
    assert(single_child->m_spec.m_type != ROOT);
    return single_child->m_spec.m_type != HPS;
}

Parser::ParseStackTreeNode_ *Parser::ParseStackTreeNode_::PopTrunkChild ()
{
    assert(HasTrunkChild());
    ParseStackTreeNode_ *trunk_child = *m_child_nodes.begin()->second.begin();
    assert(trunk_child != NULL);
    assert(trunk_child->m_parent_node == this);
    // Reassign the children of the trunk child to this node (root).
    m_child_nodes = trunk_child->m_child_nodes;
    trunk_child->m_child_nodes.clear();
    // Set the reassigned child nodes' parent to be this node (root).
    for (ChildMap::iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseStackTreeNodeSet &child_node_set = child_map_it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            assert(child != NULL);
            child->m_parent_node = this;
        }
    }
    trunk_child->m_parent_node = NULL;
    return trunk_child;
}

bool Parser::ParseStackTreeNode_::HasExactlyOneChild () const
{
    return m_child_nodes.size() == 1 && m_child_nodes.begin()->second.size() == 1;
}

Parser::ParseStackTreeNode_ *Parser::ParseStackTreeNode_::BranchRoot ()
{
    assert(!IsRoot());
    assert(HasParent());
    ParseStackTreeNode_ *node = this;
    while (node->HasParent() && !node->m_parent_node->IsRoot() && node->m_parent_node->HasExactlyOneChild())
    {
        node = node->m_parent_node;
        assert(node->m_spec.m_type != HPS);
    }
    return node;
}

Parser::Token::Id Parser::ParseStackTreeNode_::LookaheadTokenId (Parser &parser) const
{
    if (m_hypothetical_lookahead_token_id_queue.empty())
        return parser.Lookahead_(m_realized_lookahead_cursor).m_id;
    else
        return m_hypothetical_lookahead_token_id_queue.front();
}

bool Parser::ParseStackTreeNode_::IsBlockedHPS () const
{
    assert(m_spec.m_type == HPS);
    if (m_parent_node == NULL)
        return false;
    switch (m_parent_node->m_spec.m_type)
    {
        // Nothing can happen after returning, so this has to be blocking.
        case RETURN:
        // TODO: Figure out if this should be considered a blocked HPS (making it non-blocking
        // could potentially increase the depth of the state stack on which a decision depends,
        // so this is a nontrivial decision).
        case POP_STACK: return true;

        default:        return false;
    }
}

Parser::ParseStackTreeNode_::PrecedenceLevelRange Parser::ParseStackTreeNode_::ComputePrecedenceLevelRange (std::uint32_t current_child_depth) const
{
    if (m_spec.m_type == HPS)
    {
        // Need to look back at the rule of the (current_child_depth-1)th ancestor of this node in order
        // to get the correct rule precedence, because that's where the conflict occurred.

        assert(current_child_depth >= 2);
        // These asserts are equivalent to checking that the stack depth is at least 2.
        assert(bool(m_branch_node_ptr));
        assert(bool(m_branch_node_ptr->HasParent()));

        // Thinking of m_branch_node_ptr as the top of the state stack, we want to get the
        // (current_child_depth-1)th element from the top.
        BranchNodePtr_ child_branch_node_ptr = m_branch_node_ptr;
        for (std::uint32_t i = 0; i < current_child_depth-2; ++i)
        {
            // This assert checks that the stack depth is sufficient.
            assert(child_branch_node_ptr->HasParent());
            child_branch_node_ptr = child_branch_node_ptr->Parent();
        }
        std::uint32_t state_index = child_branch_node_ptr->Data();

        assert(state_index < Npda_::ms_state_count_);
        Npda_::State_ const &state = Npda_::ms_state_table_[state_index];
        // If there's an associated rule, then use the precedence from that.
        if (state.m_associated_rule_index < Grammar_::ms_rule_count_)
        {
            Grammar_::Rule_ const &associated_rule = Grammar_::ms_rule_table_[state.m_associated_rule_index];
            assert(associated_rule.m_precedence_index < Grammar_::ms_precedence_count_);
            Grammar_::Precedence_ const &rule_precedence = Grammar_::ms_precedence_table_[associated_rule.m_precedence_index];
            return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
        }
        // Otherwise (e.g. a RETURN state), return default precedence.
        else
        {
            Grammar_::Precedence_ const &default_precedence = Grammar_::ms_precedence_table_[0]; // 0 is default precedence.
            return PrecedenceLevelRange(default_precedence.m_level, default_precedence.m_level);
        }
    }
    else if (m_spec.m_type == REDUCE)
    {
        std::uint32_t reduction_rule_index = m_spec.m_single_data;
        Grammar_::Rule_ const &reduction_rule = Grammar_::ms_rule_table_[reduction_rule_index];
        assert(reduction_rule.m_precedence_index < Grammar_::ms_precedence_count_);
        Grammar_::Precedence_ const &rule_precedence = Grammar_::ms_precedence_table_[reduction_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == SHIFT)
    {
        PrecedenceLevelRange retval(std::numeric_limits<std::int32_t>::max(), std::numeric_limits<std::int32_t>::min());
        assert(!m_child_nodes.empty());
        // The range is the smallest range encompassing the range of each child node.
        for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
        {
            ParseStackTreeNodeSet const &child_node_set = child_map_it->second;
            for (ParseStackTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
            {
                assert(*child_it != NULL);
                ParseStackTreeNode_ const &child = **child_it;
                PrecedenceLevelRange child_precedence_level_range(child.ComputePrecedenceLevelRange(current_child_depth+1));
                retval.first = std::min(retval.first, child_precedence_level_range.first);
                retval.second = std::max(retval.second, child_precedence_level_range.second);
            }
        }
        //std::cerr << "HIPPO: retval = " << retval.first << ", " << retval.second << '\n';
        assert(retval.first <= retval.second);
        return retval;
    }
    else
    {
        // TODO: Probably need to do something to determine if this can't happen or prevent it.
        assert(false);
        return PrecedenceLevelRange(0, 0);
    }
}

bool Parser::ParseStackTreeNode_::HasShiftReduceConflict (ParseStackTreeNode_ *&shift, ParseStackTreeNode_ *&reduce)
{
    ChildMap::iterator shift_children_it = m_child_nodes.find(Spec(SHIFT));
    ChildMap::iterator reduce_children_it = m_child_nodes.find(Spec(REDUCE));
    if (shift_children_it == m_child_nodes.end() || reduce_children_it == m_child_nodes.end())
        return false;

    ParseStackTreeNodeSet &shift_children = shift_children_it->second;
    ParseStackTreeNodeSet &reduce_children = reduce_children_it->second;
    assert(shift_children.size() == 1);
    assert(reduce_children.size() == 1);

    shift = *shift_children.begin();
    reduce = *reduce_children.begin();
    return true;
}

void Parser::ParseStackTreeNode_::AddChild (ParseStackTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == NULL);
    assert(child->m_spec.m_type != ROOT);

    // child->m_branch_node_ptr and child->m_branch_node_token_id_ptr must both be set or both not be set.
    assert(bool(child->m_branch_node_ptr) == bool(child->m_branch_node_token_id_ptr));

    // // std::cerr << "ParseStackTreeNode_::AddChild; this = " << this << ", child = " << child << ", m_child_branch_node_ptr_vector = " << m_child_branch_node_ptr_vector << '\n';
    // std::cerr << "ParseStackTreeNode_::AddChild; this = " << this << ", child = " << child << ", m_child_branch_node_ptr_vector = " << "(branch values omitted)" << '\n';
    // std::cerr << "this:\n";
    // this->Print(std::cerr, NULL, "HIPPO", 1);
    // std::cerr << "child:\n";
    // child->Print(std::cerr, NULL, "HIPPO", 1);

    m_child_nodes[child->m_spec].insert(child);
    child->m_parent_node = this;

    // If this node is SHIFT and the child is HPS, then add the child's NPDA state to this node's
    // m_child_branch_node_ptr_vector.  This is the only situation in which
    // m_child_branch_node_ptr_vector is added to.
    if (m_spec.m_type == SHIFT && child->m_spec.m_type == HPS)
    {
        assert(bool(child->m_branch_node_ptr));
        //assert(m_child_branch_node_ptr_vector.find(child->m_branch_node_ptr) == m_child_branch_node_ptr_vector.end() && "child branch node should not already be in the set");
        assert(TEMP_vector_find_<TreeNodeOrder_<Npda_::StateIndex_>>(m_child_branch_node_ptr_vector, child->m_branch_node_ptr) == m_child_branch_node_ptr_vector.end() && "child branch node should not already be in the set");
        m_child_branch_node_ptr_vector.push_back(child->m_branch_node_ptr);
        assert(bool(child->m_branch_node_token_id_ptr));
        // NOTE: It isn't necessarily true that the branch node token id is unique, so don't make the analogous check.
        m_child_branch_node_token_id_ptr_vector.push_back(child->m_branch_node_token_id_ptr);
    }
//    std::cerr << '\n';
}

void Parser::ParseStackTreeNode_::RemoveChild (ParseStackTreeNode_ *child)
{
    //std::cerr << "ParseStackTreeNode_::RemoveChild; this = " << this << ", child = " << child << '\n'; // HIPPO
    assert(child != NULL);
    assert(child->m_parent_node == this);
    assert(HasChildrenHavingSpec(child->m_spec));
    assert(m_child_nodes[child->m_spec].find(child) != m_child_nodes[child->m_spec].end());
    m_child_nodes[child->m_spec].erase(child);
    if (m_child_nodes[child->m_spec].empty())
    {
        //std::cerr << "    all child nodes of spec " << AsString(child->m_spec.m_type) << " are gone; removing that subset\n"; // HIPPO
        m_child_nodes.erase(child->m_spec);
    }
    child->m_parent_node = NULL;

    // QUESTION: Should this be removed?  The recovery set is used in error recovery, so maybe
    // it should be kept.  Keep it for now since it wasn't in the old code.
    //assert(m_child_branch_node_ptr_vector.find(child->m_branch_node_ptr) != m_child_branch_node_ptr_vector.end());
    //m_child_branch_node_ptr_vector.erase(child->m_branch_node_ptr);
    //assert(m_child_branch_node_token_id_ptr_vector.find(child->m_branch_node_token_id_ptr) != m_child_branch_node_token_id_ptr_vector.end());
    //m_child_branch_node_token_id_ptr_vector.erase(child->m_branch_node_token_id_ptr);

    // If there are no children and this isn't the root node, remove it from its parent.
    if (m_child_nodes.empty() && m_parent_node != NULL)
        RemoveFromParent();
}

void Parser::ParseStackTreeNode_::RemoveFromParent ()
{
    assert(m_parent_node != NULL);
    //std::cerr << "ParseStackTreeNode_::RemoveFromParent; this = " << this << '\n'; // HIPPO
    m_parent_node->RemoveChild(this);
}

void Parser::ParseStackTreeNode_::NullifyHPSNodeDescendantsInHPSQueue (HPSQueue_ &hps_queue) const
{
    if (m_spec.m_type == HPS)
    {
        // NOTE: This is a linear search, which is not as efficient as a different way of handling this.
        HPSQueue_::iterator it = std::find(hps_queue.begin(), hps_queue.end(), this);
        if (it != hps_queue.end())
            *it = NULL;
    }
    for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseStackTreeNodeSet const &child_node_set = child_map_it->second;
        for (ParseStackTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            assert(*child_it != NULL);
            ParseStackTreeNode_ const &child = **child_it;
            child.NullifyHPSNodeDescendantsInHPSQueue(hps_queue);
        }
    }
}

Parser::ParseStackTreeNode_ *Parser::ParseStackTreeNode_::CloneLeafNode () const
{
    ParseStackTreeNode_ *retval = new ParseStackTreeNode_(m_spec);
    CloneLeafNodeInto(*retval);
    return retval;
}

void Parser::ParseStackTreeNode_::CloneLeafNodeInto (Parser::ParseStackTreeNode_ &orphan_target) const
{
    assert(orphan_target.m_parent_node == NULL);
    assert(m_child_nodes.empty());
    orphan_target.m_spec                                    = m_spec;
    orphan_target.m_branch_node_ptr                         = m_branch_node_ptr;
    orphan_target.m_child_branch_node_ptr_vector            = m_child_branch_node_ptr_vector;
    orphan_target.m_branch_node_token_id_ptr                = m_branch_node_token_id_ptr;
    orphan_target.m_child_branch_node_token_id_ptr_vector   = m_child_branch_node_token_id_ptr_vector;
    orphan_target.m_hypothetical_lookahead_token_id_queue   = m_hypothetical_lookahead_token_id_queue;
    orphan_target.m_realized_lookahead_cursor               = m_realized_lookahead_cursor;
}

void Parser::ParseStackTreeNode_::Print (std::ostream &out, Parser const *parser, std::string const &prefix, std::uint32_t indent_level, bool suppress_initial_prefix) const
{
    if (!suppress_initial_prefix)
    {
        out << prefix;
        for (std::uint32_t i = 0; i < indent_level; ++i)
            out << "    ";
    }
    out << AsString(m_spec.m_type) << ' ' << this;
    if (m_spec.m_type == HPS)
    {
        out << (IsBlockedHPS() ? " (    blocked," : " (non-blocked,");
        out << " m_realized_lookahead_cursor = " << m_realized_lookahead_cursor << ')';
    }
    switch (m_spec.m_type)
    {
        case REDUCE:    out << " rule " << m_spec.m_single_data << "; " << Grammar_::ms_rule_table_[m_spec.m_single_data].m_description;  break;
        //case SHIFT:     out << " to (?) state " << m_spec.m_single_data << "; " << Npda_::ms_state_table_[m_spec.m_single_data].m_description; break;
        case SHIFT:     out << ' ' << Token(m_spec.m_single_data); break;
        case POP_STACK: out << ' ' << m_spec.m_single_data << " time(s)";                                                       break;
        default:                                                                                                                break;
    }
    // out << ' ' << this << ", parent = " << m_parent_node << ' ' << Npda_::ms_state_table_[m_branch_node_ptr->Data()].m_description << ' ';
    if (bool(m_branch_node_ptr))
        out << ' ' << Npda_::ms_state_table_[m_branch_node_ptr->Data()].m_description << ' ';
    if (m_spec.m_type == HPS)
    {
        assert(bool(m_branch_node_ptr));
        assert(bool(m_branch_node_token_id_ptr));

        out << "    (";
        m_branch_node_ptr->PrintRootToLeaf(out, IdentityTransform_<Npda_::StateIndex_>);
        out << "); ";

        m_branch_node_token_id_ptr->PrintRootToLeaf(out, TokenName_);
        out << " . ";
        for (std::size_t i = 0; i < m_hypothetical_lookahead_token_id_queue.size(); ++i)
            out << ms_token_name_table_[m_hypothetical_lookahead_token_id_queue[i]] << ' ';
        out << ", ";
        if (parser != NULL)
            for (std::size_t i = m_realized_lookahead_cursor; i < parser->m_realized_state_->LookaheadQueue().size(); ++i)
                out << ms_token_name_table_[parser->m_realized_state_->LookaheadQueue()[i].m_id] << ' ';
        else
            out << "<realized-lookaheads-not-printed>";
    }
    out << '\n';

    // Print children recursively with higher indent level
    for (ChildMap::const_iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet const &child_node_set = it->second;
        for (ParseStackTreeNodeSet::const_iterator set_it = child_node_set.begin(), set_it_end = child_node_set.end(); set_it != set_it_end; ++set_it)
            (*set_it)->Print(out, parser, prefix, indent_level+1);
    }
}

// ////////////////////////////////////////////////////////////////////////////
// End of Parser::ParseStackTreeNode_
// ////////////////////////////////////////////////////////////////////////////

Parser::Token const &Parser::Lookahead_ (TokenQueue_::size_type index)
{
    while (index >= m_realized_state_->LookaheadQueue().size())
    {
        // This does not require updating the hps-es' m_realized_lookahead_cursor.
        m_realized_state_->PushBackLookahead(Scan_(), m_hypothetical_state_->m_hps_queue);

        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 3399 "barf_regex_parser.cpp"
 << "Pushed " << m_realized_state_->LookaheadQueue().back() << " onto back of lookahead queue\n")
    }
    return m_realized_state_->LookaheadQueue()[index];
}

Parser::ParseStackTreeNode_ *Parser::TakeHypotheticalActionOnHPS_ (ParseStackTreeNode_ const &hps, ParseStackTreeNode_::Type action_type, std::uint32_t action_data)
{
    // TODO: replace individual arguments action_type, action_data with ParseStackTreeNode_::Spec and just modify that struct below where it needs it.
    assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS && "Only a HPS type node can take an action");
    assert(hps.m_parent_node != NULL);

    // TODO: Once enough testing/verification is done, this comment and the commented-out early check code
    // should be removed.
    //
    // Because the parse tree will be recreated when the trunk action is POP_STACK, there's no need to
    // early out if the stack will be popped empty.

//     // Early check for if the stack would be popped empty, in which case, don't create the new hps.
//     if (action_type == ParseStackTreeNode_::POP_STACK && hps.m_stack.size() <= 1)
//     {
//         return NULL;
//     }

    ParseStackTreeNode_ *new_hps = NULL;

    switch (action_type)
    {
        case ParseStackTreeNode_::ROOT: {
            assert(false && "ParseStackTreeNode_::ROOT is an invalid action type.");
            break;
        }
        case ParseStackTreeNode_::RETURN: {
            new_hps = hps.CloneLeafNode();
            break;
        }
        case ParseStackTreeNode_::REDUCE: {
            // Execute the appropriate rule on the top tokens in the stack
            std::uint32_t const &rule_index = action_data;
            Grammar_::Rule_ const &rule = Grammar_::ms_rule_table_[rule_index];

            // Avoid creating the new hps altogether if it won't be added due to a REDUCE/REDUCE conflict.
            ParseStackTreeNode_ *existing_reduce_action_node = NULL;
            ParseStackTreeNode_ *reduce_hps = NULL;
            ParseStackTreeNode_::Spec action_spec(action_type, action_data);
            if (hps.m_parent_node->HasChildrenHavingSpec(action_spec)) // Check for an existing REDUCE action
            {
                // This may or may not be a conflict.  Need to determine that.

                ParseStackTreeNode_::ParseStackTreeNodeSet &reduce_node_set = hps.m_parent_node->ChildrenHavingSpec(action_spec);
                assert(reduce_node_set.size() == 1);
                existing_reduce_action_node = *reduce_node_set.begin();
                assert(existing_reduce_action_node != NULL);
                assert(existing_reduce_action_node->m_spec.m_type == ParseStackTreeNode_::REDUCE);

                // If the hypothetical action is identical to the existing one, then there's no problem,
                // just add it as a child to the existing one.
                if (existing_reduce_action_node->m_spec.m_single_data == rule_index)
                {
                    new_hps = hps.CloneLeafNode();
                    reduce_hps = new_hps;
                }
                // Otherwise this is a REDUCE/REDUCE conflict
                else
                {
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 3467 "barf_regex_parser.cpp"
 << "TakeHypotheticalActionOnHPS_ - REDUCE/REDUCE conflict encountered ... ")

                    // If the new REDUCE action beats the existing one in a conflict, just replace the existing one
                    // (replacement instead of creating a new one and deleting the old is an optimization which also
                    // avoids an annoying traversal through m_hypothetical_state_->m_hps_queue).
                    // NOTE: This depends on the fact that a REDUCE node has exactly one HPS child,
                    // which is what these three asserts check.  TODO: maybe make abstractions for these sorts of checks.
                    assert(existing_reduce_action_node->m_child_nodes.size() == 1);
                    assert(existing_reduce_action_node->m_child_nodes.begin()->second.size() == 1);
                    assert((*existing_reduce_action_node->m_child_nodes.begin()->second.begin())->m_spec.m_type == ParseStackTreeNode_::HPS);
                    if (Grammar_::CompareRuleByPrecedence_(action_data, existing_reduce_action_node->m_spec.m_single_data))
                    {
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "resolving in favor of new hps.\n")

                        reduce_hps = *existing_reduce_action_node->m_child_nodes.begin()->second.begin();
                        assert(reduce_hps != NULL);

                        // Remove the nodes from the ParseStackTreeNode_ tree.
                        assert(existing_reduce_action_node != NULL);
                        existing_reduce_action_node->RemoveFromParent();
                        reduce_hps->RemoveFromParent();
                        // Modify the nodes.
                        existing_reduce_action_node->m_spec = action_spec; // Replace with the winning reduction rule Spec.
                        hps.CloneLeafNodeInto(*reduce_hps); // NOTE: This modifies the existing hps, so no update of m_hypothetical_state_->m_hps_queue is necessary.
                        // Re-add them to the ParseStackTreeNode_ tree.
                        existing_reduce_action_node->AddChild(reduce_hps);
                        hps.m_parent_node->AddChild(existing_reduce_action_node);
                    }
                    else
                    {
                        TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "resolving in favor of existing hps.\n")
                    }
                }
            }
            else
            {
                new_hps = hps.CloneLeafNode();
                reduce_hps = new_hps;
            }

            if (reduce_hps != NULL)
            {
                // Pop those stack tokens.
                for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
                {
                    assert(bool(reduce_hps->m_branch_node_ptr));
                    assert(reduce_hps->m_branch_node_ptr->HasParent());
                    reduce_hps->m_branch_node_ptr = reduce_hps->m_branch_node_ptr->Parent();
                    assert(bool(reduce_hps->m_branch_node_token_id_ptr));
                    assert(reduce_hps->m_branch_node_token_id_ptr->HasParent());
                    reduce_hps->m_branch_node_token_id_ptr = reduce_hps->m_branch_node_token_id_ptr->Parent();
                }
                // Push the reduced nonterminal token data onto the front of the lookahead queue
                reduce_hps->m_hypothetical_lookahead_token_id_queue.push_front(rule.m_reduction_nonterminal_token_id);
            }

            break;
        }
        case ParseStackTreeNode_::SHIFT: {
            // Move the front of the lookahead queue to the top of the stack, assigning the appropriate state index.
            std::uint32_t const &state_index = action_data;
            // TODO: probably make "Shift" method for ParseStackTreeNode_ to do all this bookkeeping and parallel LookaheadTokenId tracking.
            new_hps = hps.CloneLeafNode();
            Token::Id lookahead_token_id = new_hps->LookaheadTokenId(*this);
            // Create a new BranchNodePtr_ and link it to the parent node's.
            new_hps->m_branch_node_ptr = BranchNode_::CreateWithParent(hps.m_branch_node_ptr, state_index);
            // Create a new BranchNodeTokenIdPtr and link it to the parent node's
            new_hps->m_branch_node_token_id_ptr = BranchNode_::CreateWithParent(hps.m_branch_node_token_id_ptr, lookahead_token_id);
            // Store the lookahead token id in action_data so it can printed.
            action_data = std::uint32_t(lookahead_token_id);
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
            new_hps = hps.CloneLeafNode();
            new_hps->m_hypothetical_lookahead_token_id_queue.push_front(Terminal::ERROR_);
            break;
        }
        case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
            new_hps = hps.CloneLeafNode();
            if (new_hps->m_hypothetical_lookahead_token_id_queue.empty())
                ++new_hps->m_realized_lookahead_cursor;
            else
                new_hps->m_hypothetical_lookahead_token_id_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::POP_STACK: {
            // TODO: make separate action nodes for each pop, instead of using action data,
            // since for example two branches may agree on popping at least once, even if
            // one of them is killed later.
            std::uint32_t const &pop_count = action_data;
            // Check if there are actually enough stack elements to pop successfully.
            // If not, then don't create an HPS, and break early.
            if (pop_count >= hps.m_branch_node_ptr->BranchLength())
            {
                new_hps = NULL;
                break;
            }

            new_hps = hps.CloneLeafNode();
            for (std::uint32_t i = 0; i < pop_count; ++i)
            {
                assert(new_hps->m_branch_node_ptr->HasParent());
                new_hps->m_branch_node_ptr = new_hps->m_branch_node_ptr->Parent();
                assert(new_hps->m_branch_node_token_id_ptr->HasParent());
                new_hps->m_branch_node_token_id_ptr = new_hps->m_branch_node_token_id_ptr->Parent();
            }
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "creating HPS to be child of POP_STACK node... ")
            break;
        }
        case ParseStackTreeNode_::HPS: {
            assert(false && "ParseStackTreeNode_::HPS is an invalid action type.");
            break;
        }
        default: {
            assert(false && "invalid ParseStackTreeNode_::Type");
            break;
        }
    }

    if (new_hps != NULL)
    {
        assert(new_hps->m_parent_node == NULL);

        ParseStackTreeNode_ *action_node = NULL;

        // Ensure the action node exists, creating it if necessary.
        ParseStackTreeNode_::Spec action_spec(action_type, action_data);
        if (hps.m_parent_node->HasChildrenHavingSpec(action_spec))
        {
            ParseStackTreeNode_::ParseStackTreeNodeSet &children_of_action_type = hps.m_parent_node->ChildrenHavingSpec(action_spec);
            assert(children_of_action_type.size() == 1);
            action_node = *children_of_action_type.begin();
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "using existing action node of type " << ParseStackTreeNode_::AsString(action_spec.m_type) << "... ")

            // If the new hps already exists (can only happen as a child of POP_STACK), then don't add it.
            if (action_type == ParseStackTreeNode_::POP_STACK && action_node->HasChildrenHavingSpec(new_hps->m_spec))
            {
                ParseStackTreeNode_::ParseStackTreeNodeSet const &child_hps_set = action_node->ChildrenHavingSpec(new_hps->m_spec);
                if (child_hps_set.find(new_hps) != child_hps_set.end())
                {
                    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "not adding duplicate HPS as child of POP_STACK node... ")
                    delete new_hps;
                    new_hps = NULL;
                }
            }
        }
        else
        {
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "creating new action node of type " << ParseStackTreeNode_::AsString(action_spec.m_type) << "... ")
            action_node = new ParseStackTreeNode_(action_spec);
            TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << "(action_node = " << action_node << ") ")
            hps.m_parent_node->AddChild(action_node);
        }

        if (new_hps != NULL)
            action_node->AddChild(new_hps);
    }

    return new_hps;
}

void Parser::CreateParseTreeFromRealizedState_ ()
{
    BranchNodePtrVector_ const &reconstruct_branch_node_ptr_vector = m_realized_state_->BranchNodePtrVectorStack().back();
    BranchNodeTokenIdPtrVector_ const &reconstruct_branch_node_token_id_ptr_vector = m_realized_state_->BranchNodeTokenIdPtrVectorStack().back();

    // Add HPS nodes for each branch in the top of the realized state stack.
    assert(!reconstruct_branch_node_ptr_vector.empty());
    TRISON_CPP_DEBUG_CODE_(*DebugSpewStream() << 
#line 290 "barf_regex_parser.trison"
"Regex::Parser" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 3643 "barf_regex_parser.cpp"
 << "        reconstructing branches " << reconstruct_branch_node_ptr_vector << '\n')
    assert(reconstruct_branch_node_ptr_vector.size() == reconstruct_branch_node_token_id_ptr_vector.size());
    for (std::size_t i = 0; i < reconstruct_branch_node_ptr_vector.size(); ++i)
    {
        BranchNodePtr_ const &branch_node_ptr = reconstruct_branch_node_ptr_vector[i];
        BranchNodeTokenIdPtr_ const &branch_node_token_id_ptr = reconstruct_branch_node_token_id_ptr_vector[i];
        ParseStackTreeNode_ *hps = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::HPS));
        hps->m_branch_node_ptr = branch_node_ptr;
        hps->m_branch_node_token_id_ptr = branch_node_token_id_ptr;

        m_hypothetical_state_->m_root->AddChild(hps);
        m_hypothetical_state_->m_hps_queue.push_back(hps);
    }
}

void Parser::ClearStack_ ()
{
    if (m_realized_state_ != NULL)
    {
        // TODO: Could print the m_realized_state_ m_branch_node_ptr_vector_stack element being popped.
        while (!m_realized_state_->TokenStack().empty())
            ThrowAwayToken_(m_realized_state_->PopStack());
    }

    delete m_hypothetical_state_;
    m_hypothetical_state_ = NULL;
}

void Parser::CleanUpAllInternals_ ()
{
    if (m_realized_state_ != NULL)
    {
        // TODO: Could print the m_realized_state_ m_branch_node_ptr_vector_stack element being popped.
        while (!m_realized_state_->TokenStack().empty())
            ThrowAwayToken_(m_realized_state_->PopStack());

        while (!m_realized_state_->LookaheadQueue().empty())
            ThrowAwayToken_(m_realized_state_->PopFrontLookahead(m_hypothetical_state_->m_hps_queue));

        // Note that this implicitly resets the error state (since that's tracked by m_realized_state_).
        delete m_realized_state_;
        m_realized_state_ = NULL;
    }

    delete m_hypothetical_state_;
    m_hypothetical_state_ = NULL;
}

// ////////////////////////////////////////////////////////////////////////////
// Parser::Grammar_
// ////////////////////////////////////////////////////////////////////////////

bool Parser::Grammar_::CompareRuleByPrecedence_ (std::uint32_t lhs_rule_index, std::uint32_t rhs_rule_index)
{
    if (ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level != ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level)
        return ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level > ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level;
    else
        return lhs_rule_index < rhs_rule_index;
}

Parser::Grammar_::Precedence_ const Parser::Grammar_::ms_precedence_table_[] =
{
    { 0, 0, "DEFAULT_" }
};

std::size_t const Parser::Grammar_::ms_precedence_count_ = sizeof(Parser::Grammar_::ms_precedence_table_) / sizeof(*Parser::Grammar_::ms_precedence_table_);

Parser::Grammar_::Rule_ const Parser::Grammar_::ms_rule_table_[] =
{
    { Parser::Nonterminal::regex_then_end, 3, 0, "regex_then_end <- regex_unterminated branch END_" },
    { Parser::Nonterminal::regex_then_end, 2, 0, "regex_then_end <- branch END_" },
    { Parser::Nonterminal::regex_parenthesized, 4, 0, "regex_parenthesized <- '(' regex_unterminated branch ')'" },
    { Parser::Nonterminal::regex_parenthesized, 3, 0, "regex_parenthesized <- '(' branch ')'" },
    { Parser::Nonterminal::regex_unterminated, 3, 0, "regex_unterminated <- regex_unterminated branch '|'" },
    { Parser::Nonterminal::regex_unterminated, 2, 0, "regex_unterminated <- branch '|'" },
    { Parser::Nonterminal::branch, 1, 0, "branch <- branch_which_didnt_just_accept_an_atom" },
    { Parser::Nonterminal::branch, 1, 0, "branch <- branch_which_just_accepted_an_atom" },
    { Parser::Nonterminal::branch, 0, 0, "branch <-" },
    { Parser::Nonterminal::branch_which_didnt_just_accept_an_atom, 2, 0, "branch_which_didnt_just_accept_an_atom <- branch_which_just_accepted_an_atom bound" },
    { Parser::Nonterminal::branch_which_just_accepted_an_atom, 2, 0, "branch_which_just_accepted_an_atom <- branch_which_just_accepted_an_atom atom" },
    { Parser::Nonterminal::branch_which_just_accepted_an_atom, 2, 0, "branch_which_just_accepted_an_atom <- branch_which_didnt_just_accept_an_atom atom" },
    { Parser::Nonterminal::branch_which_just_accepted_an_atom, 1, 0, "branch_which_just_accepted_an_atom <- atom" },
    { Parser::Nonterminal::atom, 3, 0, "atom <- '{' id '}'" },
    { Parser::Nonterminal::atom, 1, 0, "atom <- regex_parenthesized" },
    { Parser::Nonterminal::atom, 1, 0, "atom <- '^'" },
    { Parser::Nonterminal::atom, 1, 0, "atom <- '$'" },
    { Parser::Nonterminal::atom, 1, 0, "atom <- '.'" },
    { Parser::Nonterminal::atom, 1, 0, "atom <- atom_normal_char" },
    { Parser::Nonterminal::atom, 2, 0, "atom <- '\\\\' atom_normal_char" },
    { Parser::Nonterminal::atom, 2, 0, "atom <- '\\\\' atom_control_char" },
    { Parser::Nonterminal::atom, 1, 0, "atom <- HEX_CHAR" },
    { Parser::Nonterminal::atom, 1, 0, "atom <- bracket_expression" },
    { Parser::Nonterminal::bound, 1, 0, "bound <- '*'" },
    { Parser::Nonterminal::bound, 1, 0, "bound <- '+'" },
    { Parser::Nonterminal::bound, 1, 0, "bound <- '?'" },
    { Parser::Nonterminal::bound, 3, 0, "bound <- '{' integer '}'" },
    { Parser::Nonterminal::bound, 4, 0, "bound <- '{' integer ',' '}'" },
    { Parser::Nonterminal::bound, 5, 0, "bound <- '{' integer ',' integer '}'" },
    { Parser::Nonterminal::bracket_expression, 3, 0, "bracket_expression <- '[' bracket_char_set ']'" },
    { Parser::Nonterminal::bracket_expression, 4, 0, "bracket_expression <- '[' '^' bracket_char_set ']'" },
    { Parser::Nonterminal::bracket_char_set, 2, 0, "bracket_char_set <- bracket_char_set bracket_expression_char" },
    { Parser::Nonterminal::bracket_char_set, 4, 0, "bracket_char_set <- bracket_char_set bracket_expression_char '-' bracket_expression_char" },
    { Parser::Nonterminal::bracket_char_set, 6, 0, "bracket_char_set <- bracket_char_set '[' ':' id ':' ']'" },
    { Parser::Nonterminal::bracket_char_set, 0, 0, "bracket_char_set <-" },
    { Parser::Nonterminal::bracket_expression_char, 1, 0, "bracket_expression_char <- bracket_expression_normal_char" },
    { Parser::Nonterminal::bracket_expression_char, 2, 0, "bracket_expression_char <- '\\\\' bracket_expression_normal_char" },
    { Parser::Nonterminal::bracket_expression_char, 2, 0, "bracket_expression_char <- '\\\\' bracket_expression_control_char" },
    { Parser::Nonterminal::bracket_expression_char, 1, 0, "bracket_expression_char <- HEX_CHAR" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '|'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '('" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- ')'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '{'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '}'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '['" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- ']'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '?'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '*'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '+'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '.'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '^'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '$'" },
    { Parser::Nonterminal::atom_control_char, 1, 0, "atom_control_char <- '\\\\'" },
    { Parser::Nonterminal::atom_normal_char, 1, 0, "atom_normal_char <- ALPHA" },
    { Parser::Nonterminal::atom_normal_char, 1, 0, "atom_normal_char <- DIGIT" },
    { Parser::Nonterminal::atom_normal_char, 1, 0, "atom_normal_char <- CHAR" },
    { Parser::Nonterminal::atom_normal_char, 1, 0, "atom_normal_char <- ','" },
    { Parser::Nonterminal::atom_normal_char, 1, 0, "atom_normal_char <- '-'" },
    { Parser::Nonterminal::atom_normal_char, 1, 0, "atom_normal_char <- ':'" },
    { Parser::Nonterminal::bracket_expression_control_char, 1, 0, "bracket_expression_control_char <- '-'" },
    { Parser::Nonterminal::bracket_expression_control_char, 1, 0, "bracket_expression_control_char <- '^'" },
    { Parser::Nonterminal::bracket_expression_control_char, 1, 0, "bracket_expression_control_char <- '['" },
    { Parser::Nonterminal::bracket_expression_control_char, 1, 0, "bracket_expression_control_char <- ']'" },
    { Parser::Nonterminal::bracket_expression_control_char, 1, 0, "bracket_expression_control_char <- '\\\\'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- ALPHA" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- DIGIT" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- CHAR" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '|'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- ':'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '?'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '*'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '+'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '.'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '$'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- ','" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '('" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- ')'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '{'" },
    { Parser::Nonterminal::bracket_expression_normal_char, 1, 0, "bracket_expression_normal_char <- '}'" },
    { Parser::Nonterminal::id, 2, 0, "id <- id ALPHA" },
    { Parser::Nonterminal::id, 2, 0, "id <- id CHAR" },
    { Parser::Nonterminal::id, 2, 0, "id <- id DIGIT" },
    { Parser::Nonterminal::id, 1, 0, "id <- ALPHA" },
    { Parser::Nonterminal::id, 1, 0, "id <- CHAR" },
    { Parser::Nonterminal::integer, 2, 0, "integer <- integer DIGIT" },
    { Parser::Nonterminal::integer, 1, 0, "integer <- DIGIT" }
};
std::size_t const Parser::Grammar_::ms_rule_count_ = sizeof(Parser::Grammar_::ms_rule_table_) / sizeof(*Parser::Grammar_::ms_rule_table_);

// ////////////////////////////////////////////////////////////////////////////
// Parser::Npda_
// ////////////////////////////////////////////////////////////////////////////

Parser::Npda_::StateIndexVector_ const &Parser::Npda_::EpsilonClosureOfState_ (StateIndex_ state_index)
{
    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<StateIndex_,StateIndexVector_> LookupTable;
    static LookupTable s_lookup_table;

    LookupTable::iterator find_it = s_lookup_table.find(state_index);
    if (find_it != s_lookup_table.end())
        return find_it->second;

    // Compute the epsilon closure as a set
    StateIndexSet_ epsilon_closure_set;
    ComputeEpsilonClosureOfState_(state_index, epsilon_closure_set);

    // Copy the states in the set into the memoized vector.
//    std::cerr << "EpsilonClosureOfState_(" << state_index << "):"; // HIPPO
    StateIndexVector_ &epsilon_closure = s_lookup_table[state_index];
    epsilon_closure.reserve(epsilon_closure_set.size());
    for (StateIndexSet_::const_iterator it = epsilon_closure_set.begin(), it_end = epsilon_closure_set.end(); it != it_end; ++it)
    {
//        std::cerr << ' ' << *it; // HIPPO
        epsilon_closure.push_back(*it);
    }
//    std::cerr << ";\n"; // HIPPO
    // Return the memoized value.
    return epsilon_closure;
}

void Parser::Npda_::ComputeEpsilonClosureOfState_ (StateIndex_ state_index, StateIndexSet_ &epsilon_closure)
{
    // NOTE: The working definition of epsilon closure in this implementation used to only include
    // states that had non-epsilon transitions, but has been changed to include all epsilon-reachable
    // states, including those having no non-epsilon transitions.

    // This implementation allows epsilon cycles.

    // If this state has already been visited, there's no reason to continue.
    if (epsilon_closure.find(state_index) != epsilon_closure.end())
        return;
    // Otherwise, mark it as visited.  This also prevents infinite recursion.
    else
        epsilon_closure.insert(state_index);

    // This set collects the epsilon closure with no duplicates
    State_ const &state = ms_state_table_[state_index];
    for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count;
         transition != transition_end;
         ++transition)
    {
        if (transition->m_type == Transition_::EPSILON)
            ComputeEpsilonClosureOfState_(transition->m_data_index, epsilon_closure);
    }
}

Parser::Npda_::TransitionVector_ const &Parser::Npda_::NonEpsilonTransitionsOfState_ (StateIndex_ state_index, std::uint32_t sorted_type_index)
{
    assert(0 <= sorted_type_index && sorted_type_index <= 3);

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::pair<StateIndex_,std::uint32_t> KeyType;
    typedef std::map<KeyType,TransitionVector_> LookupTable;
    static LookupTable s_lookup_table;

    KeyType key(state_index, sorted_type_index);
    LookupTable::iterator it = s_lookup_table.find(key);
    if (it != s_lookup_table.end())
        return it->second;

    // TODO: probably don't need to memoize epsilon closures because non-epsilon transitions is memoized.
    TransitionSet_ non_epsilon_transition_set;
    StateIndexVector_ const &epsilon_closure = EpsilonClosureOfState_(state_index);
    for (StateIndexVector_::const_iterator it = epsilon_closure.begin(), it_end = epsilon_closure.end(); it != it_end; ++it)
    {
        State_ const &state = ms_state_table_[*it];
        for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count; transition != transition_end; ++transition)
        {
            std::uint32_t transition_sorted_type_index = Transition_::Order::SortedTypeIndex(Transition_::Type(transition->m_type));
            if (transition->m_type != Transition_::EPSILON && transition_sorted_type_index == sorted_type_index)
                non_epsilon_transition_set.insert(*transition);
        }
    }

    TransitionVector_ &non_epsilon_transitions = s_lookup_table[key];
    non_epsilon_transitions.reserve(non_epsilon_transition_set.size());
    for (TransitionSet_::const_iterator it = non_epsilon_transition_set.begin(), it_end = non_epsilon_transition_set.end(); it != it_end; ++it)
        non_epsilon_transitions.push_back(*it);
    return non_epsilon_transitions;
}

Parser::Npda_::State_ const Parser::Npda_::ms_state_table_[] =
{
    { 2, ms_transition_table_+0, 86, "START regex_then_end" },
    { 1, ms_transition_table_+2, 86, "RETURN regex_then_end" },
    { 2, ms_transition_table_+3, 86, "head of: regex_then_end" },
    { 4, ms_transition_table_+5, 0, "rule 0: regex_then_end <- . regex_unterminated branch END_" },
    { 4, ms_transition_table_+9, 0, "rule 0: regex_then_end <- regex_unterminated . branch END_" },
    { 2, ms_transition_table_+13, 86, "START regex_unterminated" },
    { 1, ms_transition_table_+15, 86, "RETURN regex_unterminated" },
    { 2, ms_transition_table_+16, 86, "head of: regex_unterminated" },
    { 3, ms_transition_table_+18, 4, "rule 4: regex_unterminated <- . regex_unterminated branch '|'" },
    { 4, ms_transition_table_+21, 4, "rule 4: regex_unterminated <- regex_unterminated . branch '|'" },
    { 3, ms_transition_table_+25, 4, "rule 4: regex_unterminated <- regex_unterminated branch . '|'" },
    { 2, ms_transition_table_+28, 86, "START branch" },
    { 1, ms_transition_table_+30, 86, "RETURN branch" },
    { 3, ms_transition_table_+31, 86, "head of: branch" },
    { 4, ms_transition_table_+34, 6, "rule 6: branch <- . branch_which_didnt_just_accept_an_atom" },
    { 1, ms_transition_table_+38, 6, "rule 6: branch <- branch_which_didnt_just_accept_an_atom ." },
    { 2, ms_transition_table_+39, 86, "START branch_which_didnt_just_accept_an_atom" },
    { 1, ms_transition_table_+41, 86, "RETURN branch_which_didnt_just_accept_an_atom" },
    { 1, ms_transition_table_+42, 86, "head of: branch_which_didnt_just_accept_an_atom" },
    { 4, ms_transition_table_+43, 9, "rule 9: branch_which_didnt_just_accept_an_atom <- . branch_which_just_accepted_an_atom bound" },
    { 4, ms_transition_table_+47, 9, "rule 9: branch_which_didnt_just_accept_an_atom <- branch_which_just_accepted_an_atom . bound" },
    { 2, ms_transition_table_+51, 86, "START branch_which_just_accepted_an_atom" },
    { 1, ms_transition_table_+53, 86, "RETURN branch_which_just_accepted_an_atom" },
    { 3, ms_transition_table_+54, 86, "head of: branch_which_just_accepted_an_atom" },
    { 3, ms_transition_table_+57, 10, "rule 10: branch_which_just_accepted_an_atom <- . branch_which_just_accepted_an_atom atom" },
    { 4, ms_transition_table_+60, 10, "rule 10: branch_which_just_accepted_an_atom <- branch_which_just_accepted_an_atom . atom" },
    { 1, ms_transition_table_+64, 10, "rule 10: branch_which_just_accepted_an_atom <- branch_which_just_accepted_an_atom atom ." },
    { 2, ms_transition_table_+65, 86, "START atom" },
    { 1, ms_transition_table_+67, 86, "RETURN atom" },
    { 10, ms_transition_table_+68, 86, "head of: atom" },
    { 3, ms_transition_table_+78, 13, "rule 13: atom <- . '{' id '}'" },
    { 4, ms_transition_table_+81, 13, "rule 13: atom <- '{' . id '}'" },
    { 3, ms_transition_table_+85, 13, "rule 13: atom <- '{' id . '}'" },
    { 2, ms_transition_table_+88, 86, "START id" },
    { 1, ms_transition_table_+90, 86, "RETURN id" },
    { 5, ms_transition_table_+91, 86, "head of: id" },
    { 3, ms_transition_table_+96, 79, "rule 79: id <- . id ALPHA" },
    { 3, ms_transition_table_+99, 79, "rule 79: id <- id . ALPHA" },
    { 1, ms_transition_table_+102, 79, "rule 79: id <- id ALPHA ." },
    { 3, ms_transition_table_+103, 80, "rule 80: id <- . id CHAR" },
    { 3, ms_transition_table_+106, 80, "rule 80: id <- id . CHAR" },
    { 1, ms_transition_table_+109, 80, "rule 80: id <- id CHAR ." },
    { 3, ms_transition_table_+110, 81, "rule 81: id <- . id DIGIT" },
    { 3, ms_transition_table_+113, 81, "rule 81: id <- id . DIGIT" },
    { 1, ms_transition_table_+116, 81, "rule 81: id <- id DIGIT ." },
    { 3, ms_transition_table_+117, 82, "rule 82: id <- . ALPHA" },
    { 1, ms_transition_table_+120, 82, "rule 82: id <- ALPHA ." },
    { 3, ms_transition_table_+121, 83, "rule 83: id <- . CHAR" },
    { 1, ms_transition_table_+124, 83, "rule 83: id <- CHAR ." },
    { 1, ms_transition_table_+125, 13, "rule 13: atom <- '{' id '}' ." },
    { 4, ms_transition_table_+126, 14, "rule 14: atom <- . regex_parenthesized" },
    { 1, ms_transition_table_+130, 14, "rule 14: atom <- regex_parenthesized ." },
    { 2, ms_transition_table_+131, 86, "START regex_parenthesized" },
    { 1, ms_transition_table_+133, 86, "RETURN regex_parenthesized" },
    { 2, ms_transition_table_+134, 86, "head of: regex_parenthesized" },
    { 3, ms_transition_table_+136, 2, "rule 2: regex_parenthesized <- . '(' regex_unterminated branch ')'" },
    { 4, ms_transition_table_+139, 2, "rule 2: regex_parenthesized <- '(' . regex_unterminated branch ')'" },
    { 4, ms_transition_table_+143, 2, "rule 2: regex_parenthesized <- '(' regex_unterminated . branch ')'" },
    { 3, ms_transition_table_+147, 2, "rule 2: regex_parenthesized <- '(' regex_unterminated branch . ')'" },
    { 1, ms_transition_table_+150, 2, "rule 2: regex_parenthesized <- '(' regex_unterminated branch ')' ." },
    { 3, ms_transition_table_+151, 3, "rule 3: regex_parenthesized <- . '(' branch ')'" },
    { 4, ms_transition_table_+154, 3, "rule 3: regex_parenthesized <- '(' . branch ')'" },
    { 3, ms_transition_table_+158, 3, "rule 3: regex_parenthesized <- '(' branch . ')'" },
    { 1, ms_transition_table_+161, 3, "rule 3: regex_parenthesized <- '(' branch ')' ." },
    { 3, ms_transition_table_+162, 15, "rule 15: atom <- . '^'" },
    { 1, ms_transition_table_+165, 15, "rule 15: atom <- '^' ." },
    { 3, ms_transition_table_+166, 16, "rule 16: atom <- . '$'" },
    { 1, ms_transition_table_+169, 16, "rule 16: atom <- '$' ." },
    { 3, ms_transition_table_+170, 17, "rule 17: atom <- . '.'" },
    { 1, ms_transition_table_+173, 17, "rule 17: atom <- '.' ." },
    { 4, ms_transition_table_+174, 18, "rule 18: atom <- . atom_normal_char" },
    { 1, ms_transition_table_+178, 18, "rule 18: atom <- atom_normal_char ." },
    { 2, ms_transition_table_+179, 86, "START atom_normal_char" },
    { 1, ms_transition_table_+181, 86, "RETURN atom_normal_char" },
    { 6, ms_transition_table_+182, 86, "head of: atom_normal_char" },
    { 3, ms_transition_table_+188, 53, "rule 53: atom_normal_char <- . ALPHA" },
    { 1, ms_transition_table_+191, 53, "rule 53: atom_normal_char <- ALPHA ." },
    { 3, ms_transition_table_+192, 54, "rule 54: atom_normal_char <- . DIGIT" },
    { 1, ms_transition_table_+195, 54, "rule 54: atom_normal_char <- DIGIT ." },
    { 3, ms_transition_table_+196, 55, "rule 55: atom_normal_char <- . CHAR" },
    { 1, ms_transition_table_+199, 55, "rule 55: atom_normal_char <- CHAR ." },
    { 3, ms_transition_table_+200, 56, "rule 56: atom_normal_char <- . ','" },
    { 1, ms_transition_table_+203, 56, "rule 56: atom_normal_char <- ',' ." },
    { 3, ms_transition_table_+204, 57, "rule 57: atom_normal_char <- . '-'" },
    { 1, ms_transition_table_+207, 57, "rule 57: atom_normal_char <- '-' ." },
    { 3, ms_transition_table_+208, 58, "rule 58: atom_normal_char <- . ':'" },
    { 1, ms_transition_table_+211, 58, "rule 58: atom_normal_char <- ':' ." },
    { 3, ms_transition_table_+212, 19, "rule 19: atom <- . '\\\\' atom_normal_char" },
    { 4, ms_transition_table_+215, 19, "rule 19: atom <- '\\\\' . atom_normal_char" },
    { 1, ms_transition_table_+219, 19, "rule 19: atom <- '\\\\' atom_normal_char ." },
    { 3, ms_transition_table_+220, 20, "rule 20: atom <- . '\\\\' atom_control_char" },
    { 4, ms_transition_table_+223, 20, "rule 20: atom <- '\\\\' . atom_control_char" },
    { 1, ms_transition_table_+227, 20, "rule 20: atom <- '\\\\' atom_control_char ." },
    { 2, ms_transition_table_+228, 86, "START atom_control_char" },
    { 1, ms_transition_table_+230, 86, "RETURN atom_control_char" },
    { 14, ms_transition_table_+231, 86, "head of: atom_control_char" },
    { 3, ms_transition_table_+245, 39, "rule 39: atom_control_char <- . '|'" },
    { 1, ms_transition_table_+248, 39, "rule 39: atom_control_char <- '|' ." },
    { 3, ms_transition_table_+249, 40, "rule 40: atom_control_char <- . '('" },
    { 1, ms_transition_table_+252, 40, "rule 40: atom_control_char <- '(' ." },
    { 3, ms_transition_table_+253, 41, "rule 41: atom_control_char <- . ')'" },
    { 1, ms_transition_table_+256, 41, "rule 41: atom_control_char <- ')' ." },
    { 3, ms_transition_table_+257, 42, "rule 42: atom_control_char <- . '{'" },
    { 1, ms_transition_table_+260, 42, "rule 42: atom_control_char <- '{' ." },
    { 3, ms_transition_table_+261, 43, "rule 43: atom_control_char <- . '}'" },
    { 1, ms_transition_table_+264, 43, "rule 43: atom_control_char <- '}' ." },
    { 3, ms_transition_table_+265, 44, "rule 44: atom_control_char <- . '['" },
    { 1, ms_transition_table_+268, 44, "rule 44: atom_control_char <- '[' ." },
    { 3, ms_transition_table_+269, 45, "rule 45: atom_control_char <- . ']'" },
    { 1, ms_transition_table_+272, 45, "rule 45: atom_control_char <- ']' ." },
    { 3, ms_transition_table_+273, 46, "rule 46: atom_control_char <- . '?'" },
    { 1, ms_transition_table_+276, 46, "rule 46: atom_control_char <- '?' ." },
    { 3, ms_transition_table_+277, 47, "rule 47: atom_control_char <- . '*'" },
    { 1, ms_transition_table_+280, 47, "rule 47: atom_control_char <- '*' ." },
    { 3, ms_transition_table_+281, 48, "rule 48: atom_control_char <- . '+'" },
    { 1, ms_transition_table_+284, 48, "rule 48: atom_control_char <- '+' ." },
    { 3, ms_transition_table_+285, 49, "rule 49: atom_control_char <- . '.'" },
    { 1, ms_transition_table_+288, 49, "rule 49: atom_control_char <- '.' ." },
    { 3, ms_transition_table_+289, 50, "rule 50: atom_control_char <- . '^'" },
    { 1, ms_transition_table_+292, 50, "rule 50: atom_control_char <- '^' ." },
    { 3, ms_transition_table_+293, 51, "rule 51: atom_control_char <- . '$'" },
    { 1, ms_transition_table_+296, 51, "rule 51: atom_control_char <- '$' ." },
    { 3, ms_transition_table_+297, 52, "rule 52: atom_control_char <- . '\\\\'" },
    { 1, ms_transition_table_+300, 52, "rule 52: atom_control_char <- '\\\\' ." },
    { 3, ms_transition_table_+301, 21, "rule 21: atom <- . HEX_CHAR" },
    { 1, ms_transition_table_+304, 21, "rule 21: atom <- HEX_CHAR ." },
    { 4, ms_transition_table_+305, 22, "rule 22: atom <- . bracket_expression" },
    { 1, ms_transition_table_+309, 22, "rule 22: atom <- bracket_expression ." },
    { 2, ms_transition_table_+310, 86, "START bracket_expression" },
    { 1, ms_transition_table_+312, 86, "RETURN bracket_expression" },
    { 2, ms_transition_table_+313, 86, "head of: bracket_expression" },
    { 3, ms_transition_table_+315, 29, "rule 29: bracket_expression <- . '[' bracket_char_set ']'" },
    { 4, ms_transition_table_+318, 29, "rule 29: bracket_expression <- '[' . bracket_char_set ']'" },
    { 3, ms_transition_table_+322, 29, "rule 29: bracket_expression <- '[' bracket_char_set . ']'" },
    { 2, ms_transition_table_+325, 86, "START bracket_char_set" },
    { 1, ms_transition_table_+327, 86, "RETURN bracket_char_set" },
    { 4, ms_transition_table_+328, 86, "head of: bracket_char_set" },
    { 3, ms_transition_table_+332, 31, "rule 31: bracket_char_set <- . bracket_char_set bracket_expression_char" },
    { 4, ms_transition_table_+335, 31, "rule 31: bracket_char_set <- bracket_char_set . bracket_expression_char" },
    { 1, ms_transition_table_+339, 31, "rule 31: bracket_char_set <- bracket_char_set bracket_expression_char ." },
    { 2, ms_transition_table_+340, 86, "START bracket_expression_char" },
    { 1, ms_transition_table_+342, 86, "RETURN bracket_expression_char" },
    { 4, ms_transition_table_+343, 86, "head of: bracket_expression_char" },
    { 4, ms_transition_table_+347, 35, "rule 35: bracket_expression_char <- . bracket_expression_normal_char" },
    { 1, ms_transition_table_+351, 35, "rule 35: bracket_expression_char <- bracket_expression_normal_char ." },
    { 2, ms_transition_table_+352, 86, "START bracket_expression_normal_char" },
    { 1, ms_transition_table_+354, 86, "RETURN bracket_expression_normal_char" },
    { 15, ms_transition_table_+355, 86, "head of: bracket_expression_normal_char" },
    { 3, ms_transition_table_+370, 64, "rule 64: bracket_expression_normal_char <- . ALPHA" },
    { 1, ms_transition_table_+373, 64, "rule 64: bracket_expression_normal_char <- ALPHA ." },
    { 3, ms_transition_table_+374, 65, "rule 65: bracket_expression_normal_char <- . DIGIT" },
    { 1, ms_transition_table_+377, 65, "rule 65: bracket_expression_normal_char <- DIGIT ." },
    { 3, ms_transition_table_+378, 66, "rule 66: bracket_expression_normal_char <- . CHAR" },
    { 1, ms_transition_table_+381, 66, "rule 66: bracket_expression_normal_char <- CHAR ." },
    { 3, ms_transition_table_+382, 67, "rule 67: bracket_expression_normal_char <- . '|'" },
    { 1, ms_transition_table_+385, 67, "rule 67: bracket_expression_normal_char <- '|' ." },
    { 3, ms_transition_table_+386, 68, "rule 68: bracket_expression_normal_char <- . ':'" },
    { 1, ms_transition_table_+389, 68, "rule 68: bracket_expression_normal_char <- ':' ." },
    { 3, ms_transition_table_+390, 69, "rule 69: bracket_expression_normal_char <- . '?'" },
    { 1, ms_transition_table_+393, 69, "rule 69: bracket_expression_normal_char <- '?' ." },
    { 3, ms_transition_table_+394, 70, "rule 70: bracket_expression_normal_char <- . '*'" },
    { 1, ms_transition_table_+397, 70, "rule 70: bracket_expression_normal_char <- '*' ." },
    { 3, ms_transition_table_+398, 71, "rule 71: bracket_expression_normal_char <- . '+'" },
    { 1, ms_transition_table_+401, 71, "rule 71: bracket_expression_normal_char <- '+' ." },
    { 3, ms_transition_table_+402, 72, "rule 72: bracket_expression_normal_char <- . '.'" },
    { 1, ms_transition_table_+405, 72, "rule 72: bracket_expression_normal_char <- '.' ." },
    { 3, ms_transition_table_+406, 73, "rule 73: bracket_expression_normal_char <- . '$'" },
    { 1, ms_transition_table_+409, 73, "rule 73: bracket_expression_normal_char <- '$' ." },
    { 3, ms_transition_table_+410, 74, "rule 74: bracket_expression_normal_char <- . ','" },
    { 1, ms_transition_table_+413, 74, "rule 74: bracket_expression_normal_char <- ',' ." },
    { 3, ms_transition_table_+414, 75, "rule 75: bracket_expression_normal_char <- . '('" },
    { 1, ms_transition_table_+417, 75, "rule 75: bracket_expression_normal_char <- '(' ." },
    { 3, ms_transition_table_+418, 76, "rule 76: bracket_expression_normal_char <- . ')'" },
    { 1, ms_transition_table_+421, 76, "rule 76: bracket_expression_normal_char <- ')' ." },
    { 3, ms_transition_table_+422, 77, "rule 77: bracket_expression_normal_char <- . '{'" },
    { 1, ms_transition_table_+425, 77, "rule 77: bracket_expression_normal_char <- '{' ." },
    { 3, ms_transition_table_+426, 78, "rule 78: bracket_expression_normal_char <- . '}'" },
    { 1, ms_transition_table_+429, 78, "rule 78: bracket_expression_normal_char <- '}' ." },
    { 3, ms_transition_table_+430, 36, "rule 36: bracket_expression_char <- . '\\\\' bracket_expression_normal_char" },
    { 4, ms_transition_table_+433, 36, "rule 36: bracket_expression_char <- '\\\\' . bracket_expression_normal_char" },
    { 1, ms_transition_table_+437, 36, "rule 36: bracket_expression_char <- '\\\\' bracket_expression_normal_char ." },
    { 3, ms_transition_table_+438, 37, "rule 37: bracket_expression_char <- . '\\\\' bracket_expression_control_char" },
    { 4, ms_transition_table_+441, 37, "rule 37: bracket_expression_char <- '\\\\' . bracket_expression_control_char" },
    { 1, ms_transition_table_+445, 37, "rule 37: bracket_expression_char <- '\\\\' bracket_expression_control_char ." },
    { 2, ms_transition_table_+446, 86, "START bracket_expression_control_char" },
    { 1, ms_transition_table_+448, 86, "RETURN bracket_expression_control_char" },
    { 5, ms_transition_table_+449, 86, "head of: bracket_expression_control_char" },
    { 3, ms_transition_table_+454, 59, "rule 59: bracket_expression_control_char <- . '-'" },
    { 1, ms_transition_table_+457, 59, "rule 59: bracket_expression_control_char <- '-' ." },
    { 3, ms_transition_table_+458, 60, "rule 60: bracket_expression_control_char <- . '^'" },
    { 1, ms_transition_table_+461, 60, "rule 60: bracket_expression_control_char <- '^' ." },
    { 3, ms_transition_table_+462, 61, "rule 61: bracket_expression_control_char <- . '['" },
    { 1, ms_transition_table_+465, 61, "rule 61: bracket_expression_control_char <- '[' ." },
    { 3, ms_transition_table_+466, 62, "rule 62: bracket_expression_control_char <- . ']'" },
    { 1, ms_transition_table_+469, 62, "rule 62: bracket_expression_control_char <- ']' ." },
    { 3, ms_transition_table_+470, 63, "rule 63: bracket_expression_control_char <- . '\\\\'" },
    { 1, ms_transition_table_+473, 63, "rule 63: bracket_expression_control_char <- '\\\\' ." },
    { 3, ms_transition_table_+474, 38, "rule 38: bracket_expression_char <- . HEX_CHAR" },
    { 1, ms_transition_table_+477, 38, "rule 38: bracket_expression_char <- HEX_CHAR ." },
    { 3, ms_transition_table_+478, 32, "rule 32: bracket_char_set <- . bracket_char_set bracket_expression_char '-' bracket_expression_char" },
    { 4, ms_transition_table_+481, 32, "rule 32: bracket_char_set <- bracket_char_set . bracket_expression_char '-' bracket_expression_char" },
    { 3, ms_transition_table_+485, 32, "rule 32: bracket_char_set <- bracket_char_set bracket_expression_char . '-' bracket_expression_char" },
    { 4, ms_transition_table_+488, 32, "rule 32: bracket_char_set <- bracket_char_set bracket_expression_char '-' . bracket_expression_char" },
    { 1, ms_transition_table_+492, 32, "rule 32: bracket_char_set <- bracket_char_set bracket_expression_char '-' bracket_expression_char ." },
    { 3, ms_transition_table_+493, 33, "rule 33: bracket_char_set <- . bracket_char_set '[' ':' id ':' ']'" },
    { 3, ms_transition_table_+496, 33, "rule 33: bracket_char_set <- bracket_char_set . '[' ':' id ':' ']'" },
    { 3, ms_transition_table_+499, 33, "rule 33: bracket_char_set <- bracket_char_set '[' . ':' id ':' ']'" },
    { 4, ms_transition_table_+502, 33, "rule 33: bracket_char_set <- bracket_char_set '[' ':' . id ':' ']'" },
    { 3, ms_transition_table_+506, 33, "rule 33: bracket_char_set <- bracket_char_set '[' ':' id . ':' ']'" },
    { 3, ms_transition_table_+509, 33, "rule 33: bracket_char_set <- bracket_char_set '[' ':' id ':' . ']'" },
    { 1, ms_transition_table_+512, 33, "rule 33: bracket_char_set <- bracket_char_set '[' ':' id ':' ']' ." },
    { 1, ms_transition_table_+513, 34, "rule 34: bracket_char_set <- ." },
    { 1, ms_transition_table_+514, 29, "rule 29: bracket_expression <- '[' bracket_char_set ']' ." },
    { 3, ms_transition_table_+515, 30, "rule 30: bracket_expression <- . '[' '^' bracket_char_set ']'" },
    { 3, ms_transition_table_+518, 30, "rule 30: bracket_expression <- '[' . '^' bracket_char_set ']'" },
    { 4, ms_transition_table_+521, 30, "rule 30: bracket_expression <- '[' '^' . bracket_char_set ']'" },
    { 3, ms_transition_table_+525, 30, "rule 30: bracket_expression <- '[' '^' bracket_char_set . ']'" },
    { 1, ms_transition_table_+528, 30, "rule 30: bracket_expression <- '[' '^' bracket_char_set ']' ." },
    { 4, ms_transition_table_+529, 11, "rule 11: branch_which_just_accepted_an_atom <- . branch_which_didnt_just_accept_an_atom atom" },
    { 4, ms_transition_table_+533, 11, "rule 11: branch_which_just_accepted_an_atom <- branch_which_didnt_just_accept_an_atom . atom" },
    { 1, ms_transition_table_+537, 11, "rule 11: branch_which_just_accepted_an_atom <- branch_which_didnt_just_accept_an_atom atom ." },
    { 4, ms_transition_table_+538, 12, "rule 12: branch_which_just_accepted_an_atom <- . atom" },
    { 1, ms_transition_table_+542, 12, "rule 12: branch_which_just_accepted_an_atom <- atom ." },
    { 1, ms_transition_table_+543, 9, "rule 9: branch_which_didnt_just_accept_an_atom <- branch_which_just_accepted_an_atom bound ." },
    { 2, ms_transition_table_+544, 86, "START bound" },
    { 1, ms_transition_table_+546, 86, "RETURN bound" },
    { 6, ms_transition_table_+547, 86, "head of: bound" },
    { 3, ms_transition_table_+553, 23, "rule 23: bound <- . '*'" },
    { 1, ms_transition_table_+556, 23, "rule 23: bound <- '*' ." },
    { 3, ms_transition_table_+557, 24, "rule 24: bound <- . '+'" },
    { 1, ms_transition_table_+560, 24, "rule 24: bound <- '+' ." },
    { 3, ms_transition_table_+561, 25, "rule 25: bound <- . '?'" },
    { 1, ms_transition_table_+564, 25, "rule 25: bound <- '?' ." },
    { 3, ms_transition_table_+565, 26, "rule 26: bound <- . '{' integer '}'" },
    { 4, ms_transition_table_+568, 26, "rule 26: bound <- '{' . integer '}'" },
    { 3, ms_transition_table_+572, 26, "rule 26: bound <- '{' integer . '}'" },
    { 2, ms_transition_table_+575, 86, "START integer" },
    { 1, ms_transition_table_+577, 86, "RETURN integer" },
    { 2, ms_transition_table_+578, 86, "head of: integer" },
    { 3, ms_transition_table_+580, 84, "rule 84: integer <- . integer DIGIT" },
    { 3, ms_transition_table_+583, 84, "rule 84: integer <- integer . DIGIT" },
    { 1, ms_transition_table_+586, 84, "rule 84: integer <- integer DIGIT ." },
    { 3, ms_transition_table_+587, 85, "rule 85: integer <- . DIGIT" },
    { 1, ms_transition_table_+590, 85, "rule 85: integer <- DIGIT ." },
    { 1, ms_transition_table_+591, 26, "rule 26: bound <- '{' integer '}' ." },
    { 3, ms_transition_table_+592, 27, "rule 27: bound <- . '{' integer ',' '}'" },
    { 4, ms_transition_table_+595, 27, "rule 27: bound <- '{' . integer ',' '}'" },
    { 3, ms_transition_table_+599, 27, "rule 27: bound <- '{' integer . ',' '}'" },
    { 3, ms_transition_table_+602, 27, "rule 27: bound <- '{' integer ',' . '}'" },
    { 1, ms_transition_table_+605, 27, "rule 27: bound <- '{' integer ',' '}' ." },
    { 3, ms_transition_table_+606, 28, "rule 28: bound <- . '{' integer ',' integer '}'" },
    { 4, ms_transition_table_+609, 28, "rule 28: bound <- '{' . integer ',' integer '}'" },
    { 3, ms_transition_table_+613, 28, "rule 28: bound <- '{' integer . ',' integer '}'" },
    { 4, ms_transition_table_+616, 28, "rule 28: bound <- '{' integer ',' . integer '}'" },
    { 3, ms_transition_table_+620, 28, "rule 28: bound <- '{' integer ',' integer . '}'" },
    { 1, ms_transition_table_+623, 28, "rule 28: bound <- '{' integer ',' integer '}' ." },
    { 4, ms_transition_table_+624, 7, "rule 7: branch <- . branch_which_just_accepted_an_atom" },
    { 1, ms_transition_table_+628, 7, "rule 7: branch <- branch_which_just_accepted_an_atom ." },
    { 1, ms_transition_table_+629, 8, "rule 8: branch <- ." },
    { 1, ms_transition_table_+630, 4, "rule 4: regex_unterminated <- regex_unterminated branch '|' ." },
    { 4, ms_transition_table_+631, 5, "rule 5: regex_unterminated <- . branch '|'" },
    { 3, ms_transition_table_+635, 5, "rule 5: regex_unterminated <- branch . '|'" },
    { 1, ms_transition_table_+638, 5, "rule 5: regex_unterminated <- branch '|' ." },
    { 3, ms_transition_table_+639, 0, "rule 0: regex_then_end <- regex_unterminated branch . END_" },
    { 1, ms_transition_table_+642, 0, "rule 0: regex_then_end <- regex_unterminated branch END_ ." },
    { 4, ms_transition_table_+643, 1, "rule 1: regex_then_end <- . branch END_" },
    { 3, ms_transition_table_+647, 1, "rule 1: regex_then_end <- branch . END_" },
    { 1, ms_transition_table_+650, 1, "rule 1: regex_then_end <- branch END_ ." }
};
std::size_t const Parser::Npda_::ms_state_count_ = sizeof(Parser::Npda_::ms_state_table_) / sizeof(*Parser::Npda_::ms_state_table_);

Parser::Npda_::Transition_ const Parser::Npda_::ms_transition_table_[] =
{
    { Parser::Npda_::Transition_::SHIFT, 263, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(3) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(265) },
    { Parser::Npda_::Transition_::SHIFT, 265, std::uint32_t(4) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(7) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(263) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 265, std::uint32_t(6) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(7) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(8) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(260) },
    { Parser::Npda_::Transition_::SHIFT, 265, std::uint32_t(9) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(10) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 124, std::uint32_t(259) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(12) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(14) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(256) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(258) },
    { Parser::Npda_::Transition_::SHIFT, 267, std::uint32_t(15) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(18) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(6) },
    { Parser::Npda_::Transition_::SHIFT, 267, std::uint32_t(17) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(18) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(19) },
    { Parser::Npda_::Transition_::SHIFT, 268, std::uint32_t(20) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(23) },
    { Parser::Npda_::Transition_::SHIFT, 270, std::uint32_t(223) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(226) },
    { Parser::Npda_::Transition_::SHIFT, 268, std::uint32_t(22) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(23) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(24) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(218) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(221) },
    { Parser::Npda_::Transition_::SHIFT, 268, std::uint32_t(25) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 269, std::uint32_t(26) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(29) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(10) },
    { Parser::Npda_::Transition_::SHIFT, 269, std::uint32_t(28) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(29) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(30) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(50) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(64) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(66) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(68) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(70) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(87) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(90) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(124) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(126) },
    { Parser::Npda_::Transition_::SHIFT, 123, std::uint32_t(31) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 278, std::uint32_t(32) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(35) },
    { Parser::Npda_::Transition_::SHIFT, 125, std::uint32_t(49) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 278, std::uint32_t(34) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(35) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(36) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(39) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(42) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(45) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(47) },
    { Parser::Npda_::Transition_::SHIFT, 278, std::uint32_t(37) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(38) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(79) },
    { Parser::Npda_::Transition_::SHIFT, 278, std::uint32_t(40) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(41) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(80) },
    { Parser::Npda_::Transition_::SHIFT, 278, std::uint32_t(43) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(44) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(81) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(46) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(82) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(48) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(83) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 264, std::uint32_t(51) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(54) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(14) },
    { Parser::Npda_::Transition_::SHIFT, 264, std::uint32_t(53) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(54) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(55) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(60) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(56) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 265, std::uint32_t(57) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(7) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(58) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(59) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(2) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(61) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(62) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(63) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(3) },
    { Parser::Npda_::Transition_::SHIFT, 94, std::uint32_t(65) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(15) },
    { Parser::Npda_::Transition_::SHIFT, 36, std::uint32_t(67) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(16) },
    { Parser::Npda_::Transition_::SHIFT, 46, std::uint32_t(69) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(17) },
    { Parser::Npda_::Transition_::SHIFT, 275, std::uint32_t(71) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(74) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(18) },
    { Parser::Npda_::Transition_::SHIFT, 275, std::uint32_t(73) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(74) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(75) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(77) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(79) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(81) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(83) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(85) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(76) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(53) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(78) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(54) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(80) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(55) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(82) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(56) },
    { Parser::Npda_::Transition_::SHIFT, 45, std::uint32_t(84) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(57) },
    { Parser::Npda_::Transition_::SHIFT, 58, std::uint32_t(86) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(58) },
    { Parser::Npda_::Transition_::SHIFT, 92, std::uint32_t(88) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 275, std::uint32_t(89) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(74) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(19) },
    { Parser::Npda_::Transition_::SHIFT, 92, std::uint32_t(91) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 274, std::uint32_t(92) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(95) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(20) },
    { Parser::Npda_::Transition_::SHIFT, 274, std::uint32_t(94) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(95) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(96) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(98) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(100) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(102) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(104) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(106) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(108) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(110) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(112) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(114) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(116) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(118) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(120) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(122) },
    { Parser::Npda_::Transition_::SHIFT, 124, std::uint32_t(97) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(39) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(99) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(40) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(101) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(41) },
    { Parser::Npda_::Transition_::SHIFT, 123, std::uint32_t(103) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(42) },
    { Parser::Npda_::Transition_::SHIFT, 125, std::uint32_t(105) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(43) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(107) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(44) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(109) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(45) },
    { Parser::Npda_::Transition_::SHIFT, 63, std::uint32_t(111) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(46) },
    { Parser::Npda_::Transition_::SHIFT, 42, std::uint32_t(113) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(47) },
    { Parser::Npda_::Transition_::SHIFT, 43, std::uint32_t(115) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(48) },
    { Parser::Npda_::Transition_::SHIFT, 46, std::uint32_t(117) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(49) },
    { Parser::Npda_::Transition_::SHIFT, 94, std::uint32_t(119) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(50) },
    { Parser::Npda_::Transition_::SHIFT, 36, std::uint32_t(121) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(51) },
    { Parser::Npda_::Transition_::SHIFT, 92, std::uint32_t(123) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(52) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(125) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(21) },
    { Parser::Npda_::Transition_::SHIFT, 271, std::uint32_t(127) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(130) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(22) },
    { Parser::Npda_::Transition_::SHIFT, 271, std::uint32_t(129) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(130) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(131) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(213) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(132) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(133) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(136) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(212) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(135) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(136) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(137) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(199) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(204) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(211) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(138) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 273, std::uint32_t(139) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(142) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(31) },
    { Parser::Npda_::Transition_::SHIFT, 273, std::uint32_t(141) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(142) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(143) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(178) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(181) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(197) },
    { Parser::Npda_::Transition_::SHIFT, 277, std::uint32_t(144) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(147) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(35) },
    { Parser::Npda_::Transition_::SHIFT, 277, std::uint32_t(146) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(147) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(148) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(150) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(152) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(154) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(156) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(158) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(160) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(162) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(164) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(166) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(168) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(170) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(172) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(174) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(176) },
    { Parser::Npda_::Transition_::SHIFT, 259, std::uint32_t(149) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(64) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(151) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(65) },
    { Parser::Npda_::Transition_::SHIFT, 260, std::uint32_t(153) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(66) },
    { Parser::Npda_::Transition_::SHIFT, 124, std::uint32_t(155) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(67) },
    { Parser::Npda_::Transition_::SHIFT, 58, std::uint32_t(157) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(68) },
    { Parser::Npda_::Transition_::SHIFT, 63, std::uint32_t(159) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(69) },
    { Parser::Npda_::Transition_::SHIFT, 42, std::uint32_t(161) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(70) },
    { Parser::Npda_::Transition_::SHIFT, 43, std::uint32_t(163) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(71) },
    { Parser::Npda_::Transition_::SHIFT, 46, std::uint32_t(165) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(72) },
    { Parser::Npda_::Transition_::SHIFT, 36, std::uint32_t(167) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(73) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(169) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(74) },
    { Parser::Npda_::Transition_::SHIFT, 40, std::uint32_t(171) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(75) },
    { Parser::Npda_::Transition_::SHIFT, 41, std::uint32_t(173) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(76) },
    { Parser::Npda_::Transition_::SHIFT, 123, std::uint32_t(175) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(77) },
    { Parser::Npda_::Transition_::SHIFT, 125, std::uint32_t(177) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(78) },
    { Parser::Npda_::Transition_::SHIFT, 92, std::uint32_t(179) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 277, std::uint32_t(180) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(147) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(36) },
    { Parser::Npda_::Transition_::SHIFT, 92, std::uint32_t(182) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 276, std::uint32_t(183) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(186) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(37) },
    { Parser::Npda_::Transition_::SHIFT, 276, std::uint32_t(185) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(186) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(187) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(189) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(191) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(193) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(195) },
    { Parser::Npda_::Transition_::SHIFT, 45, std::uint32_t(188) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(59) },
    { Parser::Npda_::Transition_::SHIFT, 94, std::uint32_t(190) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(60) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(192) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(61) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(194) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(62) },
    { Parser::Npda_::Transition_::SHIFT, 92, std::uint32_t(196) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(63) },
    { Parser::Npda_::Transition_::SHIFT, 262, std::uint32_t(198) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(38) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(200) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 273, std::uint32_t(201) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(142) },
    { Parser::Npda_::Transition_::SHIFT, 45, std::uint32_t(202) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 273, std::uint32_t(203) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(142) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(32) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(205) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(206) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 58, std::uint32_t(207) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 278, std::uint32_t(208) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(35) },
    { Parser::Npda_::Transition_::SHIFT, 58, std::uint32_t(209) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(210) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(33) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(34) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(29) },
    { Parser::Npda_::Transition_::SHIFT, 91, std::uint32_t(214) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 94, std::uint32_t(215) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 272, std::uint32_t(216) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(136) },
    { Parser::Npda_::Transition_::SHIFT, 93, std::uint32_t(217) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(30) },
    { Parser::Npda_::Transition_::SHIFT, 267, std::uint32_t(219) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(18) },
    { Parser::Npda_::Transition_::SHIFT, 269, std::uint32_t(220) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(29) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(11) },
    { Parser::Npda_::Transition_::SHIFT, 269, std::uint32_t(222) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(29) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(12) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(9) },
    { Parser::Npda_::Transition_::SHIFT, 270, std::uint32_t(225) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(226) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(227) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(229) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(231) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(233) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(245) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(250) },
    { Parser::Npda_::Transition_::SHIFT, 42, std::uint32_t(228) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(23) },
    { Parser::Npda_::Transition_::SHIFT, 43, std::uint32_t(230) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(24) },
    { Parser::Npda_::Transition_::SHIFT, 63, std::uint32_t(232) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(25) },
    { Parser::Npda_::Transition_::SHIFT, 123, std::uint32_t(234) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 279, std::uint32_t(235) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(238) },
    { Parser::Npda_::Transition_::SHIFT, 125, std::uint32_t(244) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 279, std::uint32_t(237) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(238) },
    { Parser::Npda_::Transition_::RETURN, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(239) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(242) },
    { Parser::Npda_::Transition_::SHIFT, 279, std::uint32_t(240) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(241) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(84) },
    { Parser::Npda_::Transition_::SHIFT, 261, std::uint32_t(243) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(85) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(26) },
    { Parser::Npda_::Transition_::SHIFT, 123, std::uint32_t(246) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 279, std::uint32_t(247) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(238) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(248) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 125, std::uint32_t(249) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(27) },
    { Parser::Npda_::Transition_::SHIFT, 123, std::uint32_t(251) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 279, std::uint32_t(252) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(238) },
    { Parser::Npda_::Transition_::SHIFT, 44, std::uint32_t(253) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::SHIFT, 279, std::uint32_t(254) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(238) },
    { Parser::Npda_::Transition_::SHIFT, 125, std::uint32_t(255) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(28) },
    { Parser::Npda_::Transition_::SHIFT, 268, std::uint32_t(257) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(23) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(7) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(8) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(4) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(261) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 124, std::uint32_t(262) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(5) },
    { Parser::Npda_::Transition_::SHIFT, 256, std::uint32_t(264) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(0) },
    { Parser::Npda_::Transition_::SHIFT, 266, std::uint32_t(266) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::EPSILON, 0, std::uint32_t(13) },
    { Parser::Npda_::Transition_::SHIFT, 256, std::uint32_t(267) },
    { Parser::Npda_::Transition_::INSERT_LOOKAHEAD_ERROR, 0, std::uint32_t(-1) },
    { Parser::Npda_::Transition_::POP_STACK, 257, std::uint32_t(1) },
    { Parser::Npda_::Transition_::REDUCE, 0, std::uint32_t(1) }
};
std::size_t const Parser::Npda_::ms_transition_count_ = sizeof(Parser::Npda_::ms_transition_table_) / sizeof(*Parser::Npda_::ms_transition_table_);

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 107 "barf_regex_parser.trison"

bool Parser::OpenFile (string const &input_filename)
{
    ResetForNewInput();
    return InputBase::OpenFile(input_filename);
}

void Parser::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    ResetForNewInput();
    return InputBase::OpenString(input_string, input_name, use_line_numbers);
}

void Parser::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    ResetForNewInput();
    return InputBase::OpenUsingStream(input_stream, input_name, use_line_numbers);
}

Parser::ParserReturnCode Parser::Parse (RegularExpression **parsed_regex, RegularExpressionMap *macro_map)
{
    assert(parsed_regex != NULL);
    assert(m_macro_map == NULL);
    try {
        Ast::Base *parsed_tree_root = NULL;
        m_macro_map = macro_map;
        ParserReturnCode retval = Parse(&parsed_tree_root);
        *parsed_regex = Dsc<RegularExpression *>(parsed_tree_root);
        m_macro_map = NULL;
        return retval;
    } catch (string const &exception) {
        *parsed_regex = NULL;
        m_macro_map = NULL;
        throw exception;
    }
}

} // end of namespace Regex
} // end of namespace Barf

#line 4870 "barf_regex_parser.cpp"
