// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// Parser.cpp generated by trison
// from Parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "Parser.hpp"



#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 34 "Parser.trison"

#include <cmath>
#include <sstream>
#include "Scanner.hpp"

#line 20 "Parser.cpp"

Parser::Parser ()
{
    DebugSpew(false);


#line 39 "Parser.trison"

    m_scanner = new Scanner();
    m_scanner->DebugSpew(true);

#line 32 "Parser.cpp"
}

Parser::~Parser ()
{


#line 43 "Parser.trison"

    delete m_scanner;
    m_scanner = NULL;

#line 44 "Parser.cpp"
}

bool Parser::IsAtEndOfInput ()
{
    return true; // TEMP
}

void Parser::ResetForNewInput ()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 57 "Parser.cpp"
 << " executing reset-for-new-input actions" << std::endl)



#line 145 "Parser.trison"

    // m_recoverable_error_encountered = false;

#line 66 "Parser.cpp"
}

Parser::ParserReturnCode Parser::Parse (double *return_token, Nonterminal::Name nonterminal_to_parse)
{
    return Parse_(return_token, nonterminal_to_parse);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

void Parser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << 
#line 155 "Parser.trison"
"Parser"
#line 84 "Parser.cpp"
 << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << 
#line 155 "Parser.trison"
"Parser"
#line 92 "Parser.cpp"
 << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, Parser::Token const &token)
{
    if (token.m_id < Parser::ms_token_name_count_)
        stream << Parser::ms_token_name_table_[token.m_id];
    else
        stream << "!INVALID TOKEN!";
    return stream;
}

char const *const Parser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "NUM",
    "BAD_TOKEN",
    "statement_then_end",
    "statement",
    "expression"
};
std::size_t const Parser::ms_token_name_count_ = sizeof(Parser::ms_token_name_table_) / sizeof(*Parser::ms_token_name_table_);


void Parser::ThrowAwayToken_ (Token &token_) throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 383 "Parser.cpp"
 << " executing throw-away-token actions on token " << token_ << std::endl)

    ThrowAwayTokenData_(token_.m_data);
}

void Parser::ThrowAwayStackElement_ (StackElement_ &stack_element_) throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 394 "Parser.cpp"
 << " executing throw-away-token actions on token " << stack_element_.m_token << " corresponding to stack element with index " << stack_element_.m_state_index << std::endl)

    ThrowAwayTokenData_(stack_element_.m_token.m_data);
}

void Parser::ThrowAwayTokenData_ (double &token_data) throw()
{

#line 140 "Parser.trison"
 
#line 405 "Parser.cpp"
}

Parser::Token Parser::Scan_ () throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 413 "Parser.cpp"
 << " executing scan actions" << std::endl)


#line 141 "Parser.trison"

    assert(m_scanner != NULL);
    return m_scanner->Scan();

#line 422 "Parser.cpp"
}

#include <algorithm>
#include <limits>

std::uint32_t Parser::NonterminalStartStateIndex_ (Parser::Nonterminal::Name nonterminal)
{
    switch (nonterminal)
    {
        case Nonterminal::expression: return 10;
        case Nonterminal::statement: return 5;
        case Nonterminal::statement_then_end: return 0;
        default: assert(false && "invalid nonterminal"); return 0;
    }
}

Parser::ParserReturnCode Parser::Parse_ (double *return_token, Nonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 446 "Parser.cpp"
 << " starting parse" << std::endl)

    ParserReturnCode parser_return_code_ = PRC_INTERNAL_ERROR;
    *return_token = 0.0;


    m_npda_.m_root_ = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::ROOT));

    ParseStackTreeNode_ *hps = new ParseStackTreeNode_(ParseStackTreeNode_::Spec(ParseStackTreeNode_::HPS));
    std::uint32_t initial_state = NonterminalStartStateIndex_(nonterminal_to_parse);
    hps->m_stack.push_back(StackElement_(initial_state, 0.0));

    m_npda_.m_hps_queue_.push_back(hps);

    m_npda_.m_global_stack_.push_back(StackElement_(initial_state, 0.0));

    StateVector_ const &epsilon_closure = EpsilonClosureOfState_(hps->m_stack.back().m_state_index);
    std::cerr << "epsilon closure of state " << initial_state << ";\n";
    for (StateVector_::const_iterator it = epsilon_closure.begin(), it_end = epsilon_closure.end(); it != it_end; ++it)
        std::cerr << *it << ' ';
    std::cerr << '\n';

    m_npda_.m_root_->AddChild(hps);

    bool should_return = false;
    // while (true)
    for (int i = 0; i < 300 && !should_return; ++i)
    {
        std::cerr << "\n---------- ITERATION " << i << " --------------\n";
        PrintParserStatus_(std::cerr);
        std::cerr << '\n';

        if (m_npda_.m_root_->HasTrunkChild())
            ExecuteAndRemoveTrunkActions_(should_return, parser_return_code_, return_token);
        else
            ContinueNPDAParse_(should_return);
        std::cerr << '\n';
    }

    std::cerr << "\n---------- RETURNING --------------\n";
    PrintParserStatus_(std::cerr);
    std::cerr << '\n';

    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_SUCCESS) std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 493 "Parser.cpp"
 << " Parse() is returning PRC_SUCCESS" << std::endl)
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_UNHANDLED_PARSE_ERROR) std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 498 "Parser.cpp"
 << " Parse() is returning PRC_UNHANDLED_PARSE_ERROR" << std::endl)

    return parser_return_code_;
}

void Parser::ExecuteAndRemoveTrunkActions_ (bool &should_return, ParserReturnCode &parser_return_code_, double *&return_token)
{
    std::cerr << "Parse stack tree has trunk; executing trunk actions.\n";
    while (m_npda_.m_root_->HasTrunkChild())
    {
        ParseStackTreeNode_ *trunk_child = m_npda_.m_root_->PopTrunkChild();
        switch (trunk_child->m_spec.m_type)
        {
            case ParseStackTreeNode_::RETURN: {
                std::cerr << "    executing trunk action RETURN.\n";
                assert(m_npda_.m_global_stack_.size() == 2);
                parser_return_code_ = PRC_SUCCESS;
                *return_token = m_npda_.m_global_stack_.back().m_token.m_data;
                should_return = true;
                break;
            }
            case ParseStackTreeNode_::REDUCE: {
                // Execute the appropriate rule on the top tokens in the stack
                std::uint32_t const &rule_index = trunk_child->m_spec.m_single_data;
                std::cerr << "    executing trunk action REDUCE rule " << rule_index << ".\n";
                // NOTE: dont actually execute reduction rules here, that should be saved for executing the trunk
                Token::Data reduced_nonterminal_token_data = ExecuteReductionRule_(rule_index, m_npda_.m_global_stack_);
                Rule_ const &rule = ms_rule_table_[rule_index];
                // Pop those stack tokens
                for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
                    m_npda_.m_global_stack_.pop_back();
                // Push the reduced nonterminal token data onto the front of the lookahead queue
                m_npda_.PushFrontGlobalLookahead(Token(rule.m_reduction_nonterminal_token_id, reduced_nonterminal_token_data));
                break;
            }
            case ParseStackTreeNode_::SHIFT: {
                // Move the front of the lookahead queue to the top of the stack, assigning the appropriate state index.
                std::uint32_t const &state_index = trunk_child->m_spec.m_single_data;
                std::cerr << "    executing trunk action SHIFT.\n";// then push state " << state_index << ".\n";
                m_npda_.m_global_stack_.push_back(StackElement_(state_index, Lookahead_(0)));
                m_npda_.PopFrontGlobalLookahead();
                break;
            }
            case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
                std::cerr << "    executing trunk action INSERT_LOOKAHEAD_ERROR.\n";
                m_npda_.PushFrontGlobalLookahead(Token(Terminal::ERROR_));
                break;
            }
            case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
                std::cerr << "    executing trunk action DISCARD_LOOKAHEAD.\n";
                assert(!m_npda_.m_global_lookahead_queue_.empty());
                m_npda_.PopFrontGlobalLookahead();
                break;
            }
            case ParseStackTreeNode_::POP_STACK: {
                std::uint32_t const &pop_count = trunk_child->m_spec.m_single_data;
                std::cerr << "    executing trunk action POP_STACK " << pop_count << ".\n";
                if (m_npda_.m_global_stack_.size() > pop_count)
                {
                    for (std::uint32_t i = 0; i < pop_count; ++i)
                    {
                        ThrowAwayStackElement_(m_npda_.m_global_stack_.back());
                        m_npda_.m_global_stack_.pop_back();
                    }
                }
                // TODO: figure out if hps-es' lookahead queues or cursors need to be updated.
                break;
            }

            default:
                assert(false && "this should not happen");
                break;
        }
        assert(trunk_child->m_parent_node == NULL);
        assert(trunk_child->m_child_nodes.empty());
        delete trunk_child;
    }
}

void Parser::ContinueNPDAParse_ (bool &should_return)
{
    // If there are no non-blocked hps-es, then the parse should stop.  If any non-blocked hps-es
    // are processed, then this flag will be set to false.
    should_return = true;

    std::cerr << "Parse stack tree does not have trunk; continuing parse.\n";

    // If there's a SHIFT/REDUCE conflict, then see if it can be resolved first.
    {
        ParseStackTreeNode_ *shift = NULL;
        ParseStackTreeNode_ *reduce = NULL;
        if (m_npda_.m_root_->HasShiftReduceConflict(shift, reduce))
        {
            assert(shift != NULL);
            assert(reduce != NULL);
            ParseStackTreeNode_::PrecedenceLevelRange shift_precedence_rule_range = shift->ComputePrecedenceLevelRange();
            ParseStackTreeNode_::PrecedenceLevelRange reduce_precedence_rule_range = reduce->ComputePrecedenceLevelRange();
            assert(reduce_precedence_rule_range.first == reduce_precedence_rule_range.second);

            // 6 possibilities (the higher lines indicate higher precedence level.  same line
            // indicates equality).  there is always exactly one reduce hps, and at least
            // one shift hps.
            //
            // 1.     shift        2.     shift        3.
            //        shift               shift
            // reduce              reduce shift        reduce shift
            //
            // 4.                  5.                  6.
            //                                                shift
            // reduce shift        reduce              reduce shift
            //        shift               shift               shift
            //        shift               shift
            //
            // cases 1 and 5 can be trivially resolved -- by pruning the reduce
            // and by pruning the shift respectively.
            //
            // case 3 may be trivially resolved via rule associativity (LEFT causes the
            // shift to be pruned, RIGHT causes the reduce to be pruned, and NONASSOC
            // should cause an error).
            //
            // case 4 can only be resolved if the associativity of the reduction rule
            // is LEFT, otherwise no resolution can be reached at this point.
            //
            // case 2 can only be resolved if the associativity of the reduction rule
            // is RIGHT, otherwise no resolution can be reached at this point.
            //
            // case 6 can not be resolved at this point.

            // Case 1
            if (reduce_precedence_rule_range.second < shift_precedence_rule_range.first)
            {
                std::cerr << "Case 1\n";
            }
            // Case 2
            else if (reduce_precedence_rule_range.second == shift_precedence_rule_range.first)
            {
                std::cerr << "Case 2\n";
            }
            // Case 3
            else if (reduce_precedence_rule_range.first == shift_precedence_rule_range.first &&
                     reduce_precedence_rule_range.second == shift_precedence_rule_range.second)
            {
                std::cerr << "Case 3\n";
            }
            // Case 4
            else if (reduce_precedence_rule_range.first == shift_precedence_rule_range.second)
            {
                std::cerr << "Case 4\n";
            }
            // Case 5
            else if (reduce_precedence_rule_range.first > shift_precedence_rule_range.second)
            {
                std::cerr << "Case 5\n";
            }
            // Case 6
            else {
                std::cerr << "Case 6\n";
                assert(reduce_precedence_rule_range.first > shift_precedence_rule_range.first);
                assert(reduce_precedence_rule_range.second < shift_precedence_rule_range.second);
            }
        }
    }

    // This is a clunky and inefficient way to process actions (from all hps-es) first by their SortedTypeIndex.
    for (std::uint32_t current_sorted_type_index = 0; current_sorted_type_index <= 3; ++current_sorted_type_index)
    {
        std::cerr << "    Processing transitions having SortedTypeIndex equal to " << current_sorted_type_index << ".\n";

        if (!m_npda_.m_new_hps_queue_.empty())
        {
            std::cerr << "        Early-out based on sorted type index.\n";
            break;
        }

        // Process non-blocked hps-es.
        for (HPSQueue_::iterator hps_it = m_npda_.m_hps_queue_.begin(), hps_it_end = m_npda_.m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
        {
            assert(*hps_it != NULL);
            ParseStackTreeNode_ &hps = **hps_it;

            assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS);
            std::cerr << "        Processing hps: ";
            hps.Print(std::cerr, *this, 0);

            // If a hps is blocked, save it for the next parse iteration but don't do anything with it.
            if (hps.IsBlockedHPS())
            {
                std::cerr << "            Hypothetical Parser State is blocked; preserving for next iteration.\n";
                m_npda_.m_new_hps_queue_.push_back(&hps);
                *hps_it = NULL;
                continue;
            }

            // This hps isn't blocked, so indicate that the parse should continue.
            should_return = false;

            std::uint32_t hps_state_index = hps.m_stack.back().m_state_index;
            TransitionVector_ const &non_epsilon_transitions = NonEpsilonTransitionsOfState_(hps_state_index);

            // Exercise all valid transitions whose SortedTypeIndex is current_sorted_type_index
            for (TransitionVector_::const_iterator transition_it = non_epsilon_transitions.begin(), transition_it_end = non_epsilon_transitions.end(); transition_it != transition_it_end; ++transition_it)
            {                    
                Transition_ const &transition = *transition_it;
                assert(transition.m_type >= Transition_::RETURN);
                assert(transition.m_type <= Transition_::POP_STACK);
                std::uint32_t transition_sorted_type_index = Transition_::Order::SortedTypeIndex(Transition_::Type(transition.m_type));

                if (transition_sorted_type_index != current_sorted_type_index)
                    continue;

                std::cerr << "            Processing transition " << ParseStackTreeNode_::AsString(ParseStackTreeNode_::Type(transition.m_type)) << " with transition token " << Token(transition.m_token_index) << " and data " << transition.m_data_index << " and sorted type index " << Transition_::Order::SortedTypeIndex(Transition_::Type(transition.m_type)) << '\n';

                ParseStackTreeNode_ *resulting_hps = NULL;
                // If it's a default transition, there's no need to access the lookahead.
                if (transition.m_token_index == Nonterminal::none_)
                {
                    std::cerr << "                Exercising transition.\n";
                    resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
                    // std::cerr << "                    resulting hps: ";
                    // if (resulting_hps != NULL)
                    //     resulting_hps->Print(std::cerr, *this, 0);
                    // else
                    //     std::cerr << "NULL\n";
                }
                // Otherwise, the lookahead must be accessed.
                else
                {
                    Token const &lookahead = hps.Lookahead(*this);
                    std::cerr << "                Lookahead is " << lookahead << '\n';
                    if (transition.m_token_index == lookahead.m_id)
                    {
                        std::cerr << "                Exercising transition.\n";
                        resulting_hps = TakeHypotheticalActionOnHPS_(hps, ParseStackTreeNode_::Type(transition.m_type), transition.m_data_index);
                        // std::cerr << "                    resulting hps: ";
                        // if (resulting_hps != NULL)
                        //     resulting_hps->Print(std::cerr, *this, 0);
                        // else
                        //     std::cerr << "NULL\n";
                    }
                }
                if (resulting_hps != NULL)
                    m_npda_.m_new_hps_queue_.push_back(resulting_hps);
            }
        }
    }

    // std::cerr << "m_npda_.m_new_hps_queue_.size() = " << m_npda_.m_new_hps_queue_.size() << '\n';
    // Take new hps-es and clear old ones.
    for (HPSQueue_::iterator hps_it = m_npda_.m_hps_queue_.begin(), hps_it_end = m_npda_.m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ *hps = *hps_it;
        if (hps != NULL)
        {
            // std::cerr << "deleting hps " << hps << " ";
            // hps->Print(std::cerr, *this, 0);
            // std::cerr << " having parent " << hps->m_parent_node << '\n';
            hps->RemoveFromParent();
            delete hps;
        }
    }
    m_npda_.m_hps_queue_.clear();
    std::swap(m_npda_.m_hps_queue_, m_npda_.m_new_hps_queue_);
    assert(m_npda_.m_new_hps_queue_.empty());
}

Parser::Token::Data Parser::ExecuteReductionRule_ (std::uint32_t const rule_index_, Stack_ &stack) throw()
{
    assert(rule_index_ < ms_rule_count_);
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 770 "Parser.cpp"
 << " executing reduction rule " << rule_index_ << std::endl)
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return 0.0;

        case 0:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double st(stack[stack.size()-2].m_token.m_data);

#line 190 "Parser.trison"
 return st; 
#line 785 "Parser.cpp"
            break;
        }

        case 1:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double ex(stack[stack.size()-2].m_token.m_data);

#line 195 "Parser.trison"
 return ex; 
#line 796 "Parser.cpp"
            break;
        }

        case 2:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());

#line 197 "Parser.trison"
 return 0.0; 
#line 806 "Parser.cpp"
            break;
        }

        case 3:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double e(stack[stack.size()-2].m_token.m_data);

#line 202 "Parser.trison"
 return e; 
#line 817 "Parser.cpp"
            break;
        }

        case 4:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());

#line 204 "Parser.trison"
 return 0.0; 
#line 827 "Parser.cpp"
            break;
        }

        case 5:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());

#line 206 "Parser.trison"
 return 0.0; 
#line 837 "Parser.cpp"
            break;
        }

        case 6:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double num(stack[stack.size()-1].m_token.m_data);

#line 208 "Parser.trison"
 return num; 
#line 848 "Parser.cpp"
            break;
        }

        case 7:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double lhs(stack[stack.size()-3].m_token.m_data);
            double rhs(stack[stack.size()-1].m_token.m_data);

#line 210 "Parser.trison"
 return lhs + rhs; 
#line 860 "Parser.cpp"
            break;
        }

        case 8:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double lhs(stack[stack.size()-6].m_token.m_data);
            double rhs(stack[stack.size()-1].m_token.m_data);

#line 212 "Parser.trison"
 return lhs + rhs; 
#line 872 "Parser.cpp"
            break;
        }

        case 9:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double lhs(stack[stack.size()-5].m_token.m_data);
            double rhs(stack[stack.size()-1].m_token.m_data);

#line 214 "Parser.trison"
 return lhs + rhs; 
#line 884 "Parser.cpp"
            break;
        }

        case 10:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double lhs(stack[stack.size()-4].m_token.m_data);
            double rhs(stack[stack.size()-1].m_token.m_data);

#line 216 "Parser.trison"
 return lhs + rhs; 
#line 896 "Parser.cpp"
            break;
        }

        case 11:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double lhs(stack[stack.size()-3].m_token.m_data);
            double rhs(stack[stack.size()-1].m_token.m_data);

#line 218 "Parser.trison"
 return lhs * rhs; 
#line 908 "Parser.cpp"
            break;
        }

        case 12:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double op(stack[stack.size()-1].m_token.m_data);

#line 220 "Parser.trison"
 return -op; 
#line 919 "Parser.cpp"
            break;
        }

        case 13:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());
            double lhs(stack[stack.size()-3].m_token.m_data);
            double rhs(stack[stack.size()-1].m_token.m_data);

#line 222 "Parser.trison"
 return std::pow(lhs, rhs); 
#line 931 "Parser.cpp"
            break;
        }

        case 14:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < stack.size());

#line 224 "Parser.trison"
 return 0.0; 
#line 941 "Parser.cpp"
            break;
        }

    }

    assert(false && "no value returned from reduction rule code block");
    return 0.0;
}

void Parser::PrintParserStatus_ (std::ostream &out) const
{
    assert(m_npda_.m_root_ != NULL);

    out << "global state stack is (";
    for (std::size_t i = 0; i < m_npda_.m_global_stack_.size(); ++i)
    {
        out << m_npda_.m_global_stack_[i].m_state_index;
        if (i+1 < m_npda_.m_global_stack_.size())
            out << ' ';
    }
    out << "), stack tokens then lookahead queue is:\n    ";
    for (std::size_t i = 1; i < m_npda_.m_global_stack_.size(); ++i)
        out << m_npda_.m_global_stack_[i].m_token << ' ';
        // out << ms_token_name_table_[m_npda_.m_global_stack_[i].m_token.m_id] << ' ';
    out << ". ";
    for (std::size_t i = 0; i < m_npda_.m_global_lookahead_queue_.size(); ++i)
        out << m_npda_.m_global_lookahead_queue_[i] << ' ';
        // out << ms_token_name_table_[m_npda_.m_global_lookahead_queue_[i].m_id] << ' ';
    out << '\n';

    m_npda_.m_root_->Print(out, *this);
    out << '\n';

    out << "hps queue:\n";
    for (HPSQueue_::const_iterator it = m_npda_.m_hps_queue_.begin(), it_end = m_npda_.m_hps_queue_.end(); it != it_end; ++it)
    {
        ParseStackTreeNode_ *hps = *it;
        assert(hps != NULL);
        hps->Print(std::cerr, *this, 1);
    }
}

char const *Parser::ParseStackTreeNode_::AsString (Type type)
{
    static char const *const LOOKUP_TABLE[COUNT_] =
    {
        "ROOT",
        "RETURN",
        "REDUCE",
        "SHIFT",
        "INSERT_LOOKAHEAD_ERROR",
        "DISCARD_LOOKAHEAD",
        "POP_STACK",
        "HPS"
    };
    assert(std::uint32_t(type) < COUNT_);
    return LOOKUP_TABLE[std::uint32_t(type)];
}


bool Parser::ParseStackTreeNode_::ParseStackTreeNodeOrder::operator () (Parser::ParseStackTreeNode_ const *lhs, Parser::ParseStackTreeNode_ const *rhs) const
{
    assert(lhs != NULL);
    assert(rhs != NULL);
    assert(lhs->m_spec.m_type == rhs->m_spec.m_type); // ParseStackTreeNodeSet should contain only nodes of the same type.
    // for HPS, their contents must be compared.
    if (lhs->m_spec.m_type == HPS)
    {
        assert(lhs->m_child_nodes.empty());
        assert(rhs->m_child_nodes.empty());
        // hps-es are equal if their m_global_lookahead_cursor and m_local_lookahead_queue members are.
        if (lhs->m_global_lookahead_cursor != rhs->m_global_lookahead_cursor)
            return lhs->m_global_lookahead_cursor < rhs->m_global_lookahead_cursor;
        else if (lhs->m_stack != rhs->m_stack)
            return std::lexicographical_compare(
                lhs->m_stack.begin(), lhs->m_stack.end(),
                rhs->m_stack.begin(), rhs->m_stack.end(),
                CompareStackElement
            );
        else
            return std::lexicographical_compare(
                lhs->m_local_lookahead_queue.begin(), lhs->m_local_lookahead_queue.end(),
                rhs->m_local_lookahead_queue.begin(), rhs->m_local_lookahead_queue.end(),
                CompareToken
            );
    }
    // For REDUCE, their contents must be compared.
    else if (lhs->m_spec.m_type == REDUCE)
    {
        // m_single_data contains the reduction rule index.
        Rule_ const &lhs_rule = ms_rule_table_[lhs->m_spec.m_single_data];
        Rule_ const &rhs_rule = ms_rule_table_[rhs->m_spec.m_single_data];
        // Sort first by rule precedence, then by rule index (lower has higher priority).
        if (ms_precedence_table_[lhs_rule.m_precedence_index].m_level != ms_precedence_table_[rhs_rule.m_precedence_index].m_level)
            return ms_precedence_table_[lhs_rule.m_precedence_index].m_level > ms_precedence_table_[rhs_rule.m_precedence_index].m_level;
        else // Sort based on rule index.
            return lhs->m_spec.m_single_data < rhs->m_spec.m_single_data;
    }
    // Otherwise just use pointer value.
    else
        return lhs < rhs;
}

Parser::ParseStackTreeNode_::~ParseStackTreeNode_ ()
{
    // TODO: figure out if stack element tokens should be thrown away
    // TODO: figure out if local lookahead queue tokens should be thrown away
    // TODO: are they actually uninitialized (default value)?
    for (ChildMap::iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet &child_node_set = it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            assert(child != NULL);
            assert(child->m_parent_node == this);
            delete child;
        }
        child_node_set.clear(); // not strictly necessary, but is cleaner.
    }
}

bool Parser::ParseStackTreeNode_::HasTrunkChild () const
{
    if (m_spec.m_type != ROOT || m_child_nodes.size() != 1)
        return false;
    ParseStackTreeNodeSet const &single_type_child_node_set = m_child_nodes.begin()->second;
    if (single_type_child_node_set.size() != 1)
        return false;
    ParseStackTreeNode_ *single_child = *single_type_child_node_set.begin();
    assert(single_child != NULL);
    assert(single_child->m_spec.m_type != ROOT);
    return single_child->m_spec.m_type != HPS;
}

Parser::ParseStackTreeNode_ *Parser::ParseStackTreeNode_::PopTrunkChild ()
{
    assert(HasTrunkChild());
    ParseStackTreeNode_ *trunk_child = *m_child_nodes.begin()->second.begin();
    assert(trunk_child != NULL);
    assert(trunk_child->m_parent_node == this);
    // Reassign the children of the trunk child to this node (root).
    m_child_nodes = trunk_child->m_child_nodes;
    trunk_child->m_child_nodes.clear();
    // Set the reassigned child nodes' parent to be this node (root).
    for (ChildMap::iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
    {
        ParseStackTreeNodeSet &child_node_set = child_map_it->second;
        for (ParseStackTreeNodeSet::iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
        {
            ParseStackTreeNode_ *child = *child_it;
            // std::cerr << "reassigning node " << child << "'s parent (formerly " << child->m_parent_node << ") to " << this << '\n';
            assert(child != NULL);
            child->m_parent_node = this;
        }
    }
    trunk_child->m_parent_node = NULL;
    return trunk_child;
}

Parser::Token const &Parser::ParseStackTreeNode_::Lookahead (Parser &parser) const
{
    if (m_local_lookahead_queue.empty())
        return parser.Lookahead_(m_global_lookahead_cursor);
    else
        return m_local_lookahead_queue.front();
}

bool Parser::ParseStackTreeNode_::IsBlockedHPS () const
{
    assert(m_spec.m_type == HPS);
    if (m_parent_node == NULL)
        return false;
    switch (m_parent_node->m_spec.m_type)
    {
        case RETURN:
        case REDUCE:
        case POP_STACK: return true;

        default:        return false;
    }
}

Parser::ParseStackTreeNode_::PrecedenceLevelRange Parser::ParseStackTreeNode_::ComputePrecedenceLevelRange () const
{
    if (m_spec.m_type == HPS)
    {
        assert(!m_stack.empty());
        assert(m_stack.back().m_state_index < ms_state_count_);
        State_ const &hps_state = ms_state_table_[m_stack.back().m_state_index];
        assert(hps_state.m_associated_rule_index < ms_rule_count_);
        Rule_ const &associated_rule = ms_rule_table_[hps_state.m_associated_rule_index];
        assert(associated_rule.m_precedence_index < ms_precedence_count_);
        Precedence_ const &rule_precedence = ms_precedence_table_[associated_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == REDUCE)
    {
        std::uint32_t reduction_rule_index = m_spec.m_single_data;
        Rule_ const &reduction_rule = ms_rule_table_[reduction_rule_index];
        assert(reduction_rule.m_precedence_index < ms_precedence_count_);
        Precedence_ const &rule_precedence = ms_precedence_table_[reduction_rule.m_precedence_index];
        return PrecedenceLevelRange(rule_precedence.m_level, rule_precedence.m_level);
    }
    else if (m_spec.m_type == SHIFT)
    {
        PrecedenceLevelRange retval(std::numeric_limits<std::int32_t>::max(), std::numeric_limits<std::int32_t>::min());
        // The range is the smallest range encompassing the range of each child node.
        for (ChildMap::const_iterator child_map_it = m_child_nodes.begin(), child_map_it_end = m_child_nodes.end(); child_map_it != child_map_it_end; ++child_map_it)
        {
            ParseStackTreeNodeSet const &child_node_set = child_map_it->second;
            for (ParseStackTreeNodeSet::const_iterator child_it = child_node_set.begin(), child_it_end = child_node_set.end(); child_it != child_it_end; ++child_it)
            {
                assert(*child_it != NULL);
                ParseStackTreeNode_ const &child = **child_it;
                PrecedenceLevelRange child_precedence_level_range(child.ComputePrecedenceLevelRange());
                retval.first = std::min(retval.first, child_precedence_level_range.first);
                retval.second = std::max(retval.second, child_precedence_level_range.second);
            }
        }
        assert(retval.first <= retval.second);
        return retval;
    }
    else
    {
        // TODO: Probably need to do something to determine if this can't happen or prevent it.
        assert(false);
        return PrecedenceLevelRange(0, 0);
    }
}

bool Parser::ParseStackTreeNode_::HasShiftReduceConflict (ParseStackTreeNode_ *&shift, ParseStackTreeNode_ *&reduce)
{
    ChildMap::iterator shift_children_it = m_child_nodes.find(Spec(SHIFT));
    ChildMap::iterator reduce_children_it = m_child_nodes.find(Spec(REDUCE));
    if (shift_children_it == m_child_nodes.end() || reduce_children_it == m_child_nodes.end())
        return false;

    ParseStackTreeNodeSet &shift_children = shift_children_it->second;
    ParseStackTreeNodeSet &reduce_children = reduce_children_it->second;
    assert(shift_children.size() == 1);
    assert(reduce_children.size() == 1);

    shift = *shift_children.begin();
    reduce = *reduce_children.begin();
    return true;
}

void Parser::ParseStackTreeNode_::AddChild (ParseStackTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == NULL);
    assert(child->m_spec.m_type != ROOT);
    m_child_nodes[child->m_spec].insert(child);
    child->m_parent_node = this;
}

void Parser::ParseStackTreeNode_::RemoveChild (ParseStackTreeNode_ *child)
{
    assert(child != NULL);
    assert(child->m_parent_node == this);
    assert(HasChildrenHavingSpec(child->m_spec));
    m_child_nodes[child->m_spec].erase(child);
    if (m_child_nodes[child->m_spec].empty())
        m_child_nodes.erase(child->m_spec);
    child->m_parent_node = NULL;
}

void Parser::ParseStackTreeNode_::RemoveFromParent ()
{
    assert(m_parent_node != NULL);
    m_parent_node->RemoveChild(this);
}

Parser::ParseStackTreeNode_ *Parser::ParseStackTreeNode_::CloneLeafNode () const
{
    ParseStackTreeNode_ *retval = new ParseStackTreeNode_(m_spec);
    CloneLeafNodeInto(*retval);
    return retval;
}

void Parser::ParseStackTreeNode_::CloneLeafNodeInto (Parser::ParseStackTreeNode_ &orphan_target) const
{
    assert(orphan_target.m_parent_node == NULL);
    assert(m_child_nodes.empty());
    orphan_target.m_spec = m_spec;
    orphan_target.m_stack = m_stack;
    orphan_target.m_local_lookahead_queue = m_local_lookahead_queue;
    orphan_target.m_global_lookahead_cursor = m_global_lookahead_cursor;
}

void Parser::ParseStackTreeNode_::Print (std::ostream &out, Parser const &parser, std::uint32_t indent_level) const
{
    for (std::uint32_t i = 0; i < indent_level; ++i)
        out << "    ";
    out << AsString(m_spec.m_type);
    if (m_spec.m_type == HPS)
        out << (IsBlockedHPS() ? " (    blocked)" : " (non-blocked)");
    switch (m_spec.m_type)
    {
        case REDUCE:    out << " rule " << m_spec.m_single_data << "; " << ms_rule_table_[m_spec.m_single_data].m_description;  break;
        case POP_STACK: out << ' ' << m_spec.m_single_data << " times";                                                         break;
        default:                                                                                                                break;
    }
    // assert(!m_stack.empty());
    // out << ' ' << this << ", parent = " << m_parent_node << ' ' << ms_state_table_[m_stack.back()].m_description << ' ';
    if (!m_stack.empty())
        out << ' ' << ms_state_table_[m_stack.back().m_state_index].m_description << ' ';
    if (m_spec.m_type == HPS)
    {
        out << "; (";
        for (std::size_t i = 0; i < m_stack.size(); ++i)
        {
            out << m_stack[i].m_state_index;
            if (i+1 < m_stack.size())
                out << ' ';
        }
        out << "); ";
        for (std::size_t i = 1; i < m_stack.size(); ++i)
            out << ms_token_name_table_[m_stack[i].m_token.m_id] << ' ';
        out << ". ";
        for (std::size_t i = 0; i < m_local_lookahead_queue.size(); ++i)
            out << ms_token_name_table_[m_local_lookahead_queue[i].m_id] << ' ';
        for (std::size_t i = m_global_lookahead_cursor; i < parser.m_npda_.m_global_lookahead_queue_.size(); ++i)
            out << ms_token_name_table_[parser.m_npda_.m_global_lookahead_queue_[i].m_id] << ' ';
    }
    out << '\n';

    // Print children recursively with higher indent level
    for (ChildMap::const_iterator it = m_child_nodes.begin(), it_end = m_child_nodes.end(); it != it_end; ++it)
    {
        ParseStackTreeNodeSet const &child_node_set = it->second;
        for (ParseStackTreeNodeSet::const_iterator set_it = child_node_set.begin(), set_it_end = child_node_set.end(); set_it != set_it_end; ++set_it)
            (*set_it)->Print(out, parser, indent_level+1);
    }
}

Parser::Token const &Parser::Lookahead_ (LookaheadQueue_::size_type index) throw()
{
    while (index >= m_npda_.m_global_lookahead_queue_.size())
    {
        // This does not require updating the hps-es' m_global_lookahead_cursor.
        m_npda_.m_global_lookahead_queue_.push_back(Scan_());

        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 155 "Parser.trison"
"Parser"
#line 1289 "Parser.cpp"
 << " pushed " << m_npda_.m_global_lookahead_queue_.back() << " onto back of lookahead queue" << std::endl)
    }
    return m_npda_.m_global_lookahead_queue_[index];
}

Parser::ParseStackTreeNode_ *Parser::TakeHypotheticalActionOnHPS_ (ParseStackTreeNode_ const &hps, ParseStackTreeNode_::Type action_type, std::uint32_t action_data)
{
    // TODO: replace individual arguments action_type, action_data with ParseStackTreeNode_::Spec and just modify that struct below where it needs it.
    assert(hps.m_spec.m_type == ParseStackTreeNode_::HPS && "Only a HPS type node can take an action");
    assert(hps.m_parent_node != NULL);

    // Early check for if the stack would be popped empty, in which case, don't create the new hps.
    if (action_type == ParseStackTreeNode_::POP_STACK && hps.m_stack.size() <= 1)
        return NULL;

    ParseStackTreeNode_ *new_hps = NULL;

    switch (action_type)
    {
        case ParseStackTreeNode_::ROOT: {
            assert(false && "ParseStackTreeNode_::ROOT is an invalid action type.");
            break;
        }
        case ParseStackTreeNode_::RETURN: {
            new_hps = hps.CloneLeafNode();
            break;
        }
        case ParseStackTreeNode_::REDUCE: {
            // Execute the appropriate rule on the top tokens in the stack
            std::uint32_t const &rule_index = action_data;
            Rule_ const &rule = ms_rule_table_[rule_index];

            // Avoid creating the new hps altogether if it won't be added due to a REDUCE/REDUCE conflict.
            ParseStackTreeNode_ *existing_reduce_action_node = NULL;
            ParseStackTreeNode_ *reduce_hps = NULL;
            ParseStackTreeNode_::Spec action_spec(action_type, action_data);
            if (hps.m_parent_node->HasChildrenHavingSpec(action_spec)) // Check for an existing REDUCE action
            {
                // This is a REDUCE/REDUCE conflict
                std::cerr << "TakeHypotheticalActionOnHPS_ - REDUCE/REDUCE conflict encountered ... ";

                ParseStackTreeNode_::ParseStackTreeNodeSet &reduce_node_set = hps.m_parent_node->ChildrenHavingSpec(action_spec);
                assert(reduce_node_set.size() == 1);
                existing_reduce_action_node = *reduce_node_set.begin();
                assert(existing_reduce_action_node != NULL);
                // If the new REDUCE action beats the existing one in a conflict, just replace the existing one
                // (replacement instead of creating a new one and deleting the old is an optimization which also
                // avoids an annoying traversal through m_npda_.m_hps_queue_).
                // NOTE: This depends on the fact that a [hypothetical] REDUCE node has exactly one HPS child,
                // which is what these three asserts check.  TODO: maybe make abstractions for these sorts of checks.
                assert(existing_reduce_action_node->m_child_nodes.size() == 1);
                assert(existing_reduce_action_node->m_child_nodes.begin()->second.size() == 1);
                assert((*existing_reduce_action_node->m_child_nodes.begin()->second.begin())->m_spec.m_type == ParseStackTreeNode_::HPS);
                if (CompareRuleByPrecedence(action_data, existing_reduce_action_node->m_spec.m_single_data))
                {
                    std::cerr << "resolving in favor of new hps.\n";

                    reduce_hps = *existing_reduce_action_node->m_child_nodes.begin()->second.begin();
                    assert(reduce_hps != NULL);

                    // Remove the nodes from the ParseStackTreeNode_ tree.
                    assert(existing_reduce_action_node != NULL);
                    existing_reduce_action_node->RemoveFromParent();
                    reduce_hps->RemoveFromParent();
                    // Modify the nodes.
                    existing_reduce_action_node->m_spec = action_spec; // Replace with the winning reduction rule Spec.
                    hps.CloneLeafNodeInto(*reduce_hps); // NOTE: This modifies the existing hps, so no update of m_npda_.m_hps_queue_ is necessary.
                    // Re-add them to the ParseStackTreeNode_ tree.
                    existing_reduce_action_node->AddChild(reduce_hps);
                    hps.m_parent_node->AddChild(existing_reduce_action_node);
                }
                else
                {
                    std::cerr << "resolving in favor of existing hps.\n";
                }
            }
            else
            {
                new_hps = hps.CloneLeafNode();
                reduce_hps = new_hps;
            }

            if (reduce_hps != NULL)
            {
                // Pop those stack tokens
                // std::cerr << "TakeHypotheticalActionOnHPS_ -- reducing rule " << rule_index << " \"" << rule.m_description << "\" which has " << rule.m_token_count << " tokens\n";
                for (std::uint32_t i = 0; i < rule.m_token_count; ++i)
                    reduce_hps->m_stack.pop_back();
                // Push the reduced nonterminal token data onto the front of the lookahead queue
                reduce_hps->m_local_lookahead_queue.push_front(Token(rule.m_reduction_nonterminal_token_id));
            }

            break;
        }
        case ParseStackTreeNode_::SHIFT: {
            // Move the front of the lookahead queue to the top of the stack, assigning the appropriate state index.
            std::uint32_t const &state_index = action_data;
            // TODO: probably make "Shift" method for ParseStackTreeNode_ to do all this bookkeeping and parallel Lookahead.
            new_hps = hps.CloneLeafNode();
            new_hps->m_stack.push_back(StackElement_(state_index, new_hps->Lookahead(*this)));
            action_data = ParseStackTreeNode_::UNUSED_DATA; // SHIFT action doesn't store the state, the HPS children do.
            if (new_hps->m_local_lookahead_queue.empty())
                ++new_hps->m_global_lookahead_cursor;
            else
                new_hps->m_local_lookahead_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::INSERT_LOOKAHEAD_ERROR: {
            new_hps = hps.CloneLeafNode();
            new_hps->m_local_lookahead_queue.push_front(Token(Terminal::ERROR_));
            break;
        }
        case ParseStackTreeNode_::DISCARD_LOOKAHEAD: {
            new_hps = hps.CloneLeafNode();
            if (new_hps->m_local_lookahead_queue.empty())
                ++new_hps->m_global_lookahead_cursor;
            else
                new_hps->m_local_lookahead_queue.pop_front();
            break;
        }
        case ParseStackTreeNode_::POP_STACK: {
            // TODO: make separate action nodes for each pop, instead of using action data.
            std::uint32_t const &pop_count = action_data;
            new_hps = hps.CloneLeafNode();
            assert(new_hps->m_stack.size() > pop_count);
            for (std::uint32_t i = 0; i < pop_count; ++i)
                new_hps->m_stack.pop_back();
            break;
        }
        case ParseStackTreeNode_::HPS: {
            assert(false && "ParseStackTreeNode_::HPS is an invalid action type.");
            break;
        }
        default: {
            assert(false && "invalid ParseStackTreeNode_::Type");
            break;
        }
    }

    if (new_hps != NULL)
    {
        assert(new_hps->m_parent_node == NULL);

        ParseStackTreeNode_ *action_node = NULL;

        // Ensure the action node exists, creating it if necessary.
        ParseStackTreeNode_::Spec action_spec(action_type, action_data);
        // std::cerr << "hps.m_parent_node = " << hps.m_parent_node << '\n';
        if (hps.m_parent_node->HasChildrenHavingSpec(action_spec))
        {
            ParseStackTreeNode_::ParseStackTreeNodeSet &children_of_action_type = hps.m_parent_node->ChildrenHavingSpec(action_spec);
            assert(children_of_action_type.size() == 1);
            action_node = *children_of_action_type.begin();

            // If the new hps already exists (can only happen as a child of POP_STACK), then don't add it.
            if (action_type == ParseStackTreeNode_::POP_STACK && action_node->HasChildrenHavingSpec(new_hps->m_spec))
            {
                ParseStackTreeNode_::ParseStackTreeNodeSet const &child_hps_set = action_node->ChildrenHavingSpec(new_hps->m_spec);
                if (child_hps_set.find(new_hps) != child_hps_set.end())
                {
                    delete new_hps;
                    new_hps = NULL;
                }
            }
        }
        else
        {
            action_node = new ParseStackTreeNode_(action_spec);
            hps.m_parent_node->AddChild(action_node);
        }

        if (new_hps != NULL)
        {
            // std::cerr << "    adding new hps: ";
            // new_hps->Print(std::cerr, *this, 2);
            // std::cerr << "    to action node: ";
            // action_node->Print(std::cerr, *this, 2);
            action_node->AddChild(new_hps);
        }
    }

    return new_hps;
}

Parser::Npda_::~Npda_ ()
{
    // TODO: figure out if global stack and lookahead queue should have their tokens thrown away
    delete m_root_;
    m_root_ = NULL;
    m_hps_queue_.clear();
    m_new_hps_queue_.clear();
}

void Parser::Npda_::PopFrontGlobalLookahead ()
{
    assert(!m_global_lookahead_queue_.empty());
    // Because the contents of m_npda_.m_global_lookahead_queue_ are changing, and each hps's
    // m_global_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = m_hps_queue_.begin(), hps_it_end = m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        --hps.m_global_lookahead_cursor;
    }
    m_global_lookahead_queue_.pop_front();
}

void Parser::Npda_::PushFrontGlobalLookahead (Parser::Token const &lookahead)
{
    // Because the contents of m_npda_.m_global_lookahead_queue_ are changing, and each hps's
    // m_global_lookahead_cursor is an index into that queue, each must be updated.
    for (HPSQueue_::iterator hps_it = m_hps_queue_.begin(), hps_it_end = m_hps_queue_.end(); hps_it != hps_it_end; ++hps_it)
    {
        ParseStackTreeNode_ &hps = **hps_it;
        ++hps.m_global_lookahead_cursor;
    }
    m_global_lookahead_queue_.push_front(lookahead);
}

bool Parser::CompareRuleByPrecedence (std::uint32_t lhs_rule_index, std::uint32_t rhs_rule_index)
{
    if (ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level != ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level)
        return ms_precedence_table_[ms_rule_table_[lhs_rule_index].m_precedence_index].m_level > ms_precedence_table_[ms_rule_table_[rhs_rule_index].m_precedence_index].m_level;
    else
        return lhs_rule_index < rhs_rule_index;
}

Parser::StateVector_ const &Parser::EpsilonClosureOfState_ (std::uint32_t state_index)
{
    // This function implementation depends on there not being an epsilon transition cycle.

    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<std::uint32_t,StateVector_> LookupTable;
    static LookupTable s_lookup_table;
    LookupTable::iterator it = s_lookup_table.find(state_index);
    if (it != s_lookup_table.end())
        return it->second;

    // This set collects the epsilon closure with no duplicates    
    StateSet_ epsilon_closure_set;
    State_ const &state = ms_state_table_[state_index];
    bool state_has_non_epsilon_transitions = false;
    for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count;
         transition != transition_end;
         ++transition)
    {
        if (transition->m_type == Transition_::EPSILON)
        {
            StateVector_ const &sub_epsilon_closure = EpsilonClosureOfState_(transition->m_data_index);
            for (StateVector_::const_iterator it = sub_epsilon_closure.begin(), it_end = sub_epsilon_closure.end(); it != it_end; ++it)
                epsilon_closure_set.insert(*it);
        }
        else
            state_has_non_epsilon_transitions = true;
    }
    // The epsilon closure of a state includes itself if it has non-epsilon transitions
    if (state_has_non_epsilon_transitions)
        epsilon_closure_set.insert(state_index);

    // Add all the elements of epsilon_closure_set to the memoized entry.
    StateVector_ &epsilon_closure = s_lookup_table[state_index];
    epsilon_closure.reserve(epsilon_closure_set.size());
    for (StateSet_::const_iterator it = epsilon_closure_set.begin(), it_end = epsilon_closure_set.end(); it != it_end; ++it)
        epsilon_closure.push_back(*it);
    return epsilon_closure;
}

Parser::TransitionVector_ const &Parser::NonEpsilonTransitionsOfState_ (std::uint32_t state_index)
{
    // Memoize this function, because it will be called so many times and is somewhat intensive.
    typedef std::map<std::uint32_t,TransitionVector_> LookupTable;
    static LookupTable s_lookup_table;
    LookupTable::iterator it = s_lookup_table.find(state_index);
    if (it != s_lookup_table.end())
        return it->second;

    // TODO: probably don't need to memoize epsilon closures because non-epsilon transitions is memoized.
    TransitionSet_ non_epsilon_transition_set;
    StateVector_ const &epsilon_closure = EpsilonClosureOfState_(state_index);
    for (StateVector_::const_iterator it = epsilon_closure.begin(), it_end = epsilon_closure.end(); it != it_end; ++it)
    {
        State_ const &state = ms_state_table_[*it];
        for (Transition_ const *transition = state.m_transition_table, *transition_end = state.m_transition_table+state.m_transition_count; transition != transition_end; ++transition)
            if (transition->m_type != Transition_::EPSILON)
                non_epsilon_transition_set.insert(*transition);
    }

    TransitionVector_ &non_epsilon_transitions = s_lookup_table[state_index];
    non_epsilon_transitions.reserve(non_epsilon_transition_set.size());
    for (TransitionSet_::const_iterator it = non_epsilon_transition_set.begin(), it_end = non_epsilon_transition_set.end(); it != it_end; ++it)
        non_epsilon_transitions.push_back(*it);
    return non_epsilon_transitions;
}

Parser::Precedence_ const Parser::ms_precedence_table_[] =
{
    { 0, 0, "DEFAULT_" },
    { 1, 0, "LOWER" },
    { 2, 0, "LOW" },
    { 3, 0, "ADDITIVE" },
    { 4, 0, "MULTIPLICATIVE" },
    { 5, 2, "UNARY" },
    { 6, 2, "EXPONENTIATION" },
    { 7, 0, "HIGH" }
};

std::size_t const Parser::ms_precedence_count_ = sizeof(Parser::ms_precedence_table_) / sizeof(*Parser::ms_precedence_table_);

Parser::Rule_ const Parser::ms_rule_table_[] =
{
    { Parser::Nonterminal::statement_then_end, 2, 0, "statement_then_end <- statement END_" },
    { Parser::Nonterminal::statement, 2, 0, "statement <- expression ';'" },
    { Parser::Nonterminal::statement, 1, 0, "statement <- ERROR_" },
    { Parser::Nonterminal::expression, 3, 0, "expression <- '(' expression ')'" },
    { Parser::Nonterminal::expression, 3, 0, "expression <- '(' ERROR_ ')'" },
    { Parser::Nonterminal::expression, 2, 0, "expression <- '(' ERROR_" },
    { Parser::Nonterminal::expression, 1, 0, "expression <- NUM" },
    { Parser::Nonterminal::expression, 3, 3, "expression <- expression '+' expression" },
    { Parser::Nonterminal::expression, 6, 1, "expression <- expression '+' '+' '+' '+' expression" },
    { Parser::Nonterminal::expression, 5, 2, "expression <- expression '+' '+' '+' expression" },
    { Parser::Nonterminal::expression, 4, 7, "expression <- expression '+' '+' expression" },
    { Parser::Nonterminal::expression, 3, 4, "expression <- expression '*' expression" },
    { Parser::Nonterminal::expression, 2, 5, "expression <- '-' expression" },
    { Parser::Nonterminal::expression, 3, 6, "expression <- expression '^' expression" },
    { Parser::Nonterminal::expression, 1, 0, "expression <- ERROR_" }
};
std::size_t const Parser::ms_rule_count_ = sizeof(Parser::ms_rule_table_) / sizeof(*Parser::ms_rule_table_);

Parser::State_ const Parser::ms_state_table_[] =
{
    { 2, ms_transition_table_+0, 15, "START statement_then_end" },
    { 1, ms_transition_table_+2, 15, "RETURN statement_then_end" },
    { 1, ms_transition_table_+3, 15, "head of: statement_then_end" },
    { 4, ms_transition_table_+4, 0, "rule 0: statement_then_end <- . statement END_" },
    { 3, ms_transition_table_+8, 0, "rule 0: statement_then_end <- statement . END_" },
    { 2, ms_transition_table_+11, 15, "START statement" },
    { 1, ms_transition_table_+13, 15, "RETURN statement" },
    { 2, ms_transition_table_+14, 15, "head of: statement" },
    { 4, ms_transition_table_+16, 1, "rule 1: statement <- . expression ';'" },
    { 3, ms_transition_table_+20, 1, "rule 1: statement <- expression . ';'" },
    { 2, ms_transition_table_+23, 15, "START expression" },
    { 1, ms_transition_table_+25, 15, "RETURN expression" },
    { 12, ms_transition_table_+26, 15, "head of: expression" },
    { 3, ms_transition_table_+38, 3, "rule 3: expression <- . '(' expression ')'" },
    { 4, ms_transition_table_+41, 3, "rule 3: expression <- '(' . expression ')'" },
    { 3, ms_transition_table_+45, 3, "rule 3: expression <- '(' expression . ')'" },
    { 1, ms_transition_table_+48, 3, "rule 3: expression <- '(' expression ')' ." },
    { 3, ms_transition_table_+49, 4, "rule 4: expression <- . '(' ERROR_ ')'" },
    { 2, ms_transition_table_+52, 4, "rule 4: expression <- '(' . ERROR_ ')'" },
    { 3, ms_transition_table_+54, 4, "rule 4: expression <- '(' ERROR_ . ')'" },
    { 1, ms_transition_table_+57, 4, "rule 4: expression <- '(' ERROR_ ')' ." },
    { 3, ms_transition_table_+58, 5, "rule 5: expression <- . '(' ERROR_" },
    { 2, ms_transition_table_+61, 5, "rule 5: expression <- '(' . ERROR_" },
    { 2, ms_transition_table_+63, 5, "rule 5: expression <- '(' ERROR_ ." },
    { 3, ms_transition_table_+65, 6, "rule 6: expression <- . NUM" },
    { 1, ms_transition_table_+68, 6, "rule 6: expression <- NUM ." },
    { 3, ms_transition_table_+69, 7, "rule 7: expression <- . expression '+' expression" },
    { 3, ms_transition_table_+72, 7, "rule 7: expression <- expression . '+' expression" },
    { 4, ms_transition_table_+75, 7, "rule 7: expression <- expression '+' . expression" },
    { 1, ms_transition_table_+79, 7, "rule 7: expression <- expression '+' expression ." },
    { 3, ms_transition_table_+80, 8, "rule 8: expression <- . expression '+' '+' '+' '+' expression" },
    { 3, ms_transition_table_+83, 8, "rule 8: expression <- expression . '+' '+' '+' '+' expression" },
    { 3, ms_transition_table_+86, 8, "rule 8: expression <- expression '+' . '+' '+' '+' expression" },
    { 3, ms_transition_table_+89, 8, "rule 8: expression <- expression '+' '+' . '+' '+' expression" },
    { 3, ms_transition_table_+92, 8, "rule 8: expression <- expression '+' '+' '+' . '+' expression" },
    { 4, ms_transition_table_+95, 8, "rule 8: expression <- expression '+' '+' '+' '+' . expression" },
    { 1, ms_transition_table_+99, 8, "rule 8: expression <- expression '+' '+' '+' '+' expression ." },
    { 3, ms_transition_table_+100, 9, "rule 9: expression <- . expression '+' '+' '+' expression" },
    { 3, ms_transition_table_+103, 9, "rule 9: expression <- expression . '+' '+' '+' expression" },
    { 3, ms_transition_table_+106, 9, "rule 9: expression <- expression '+' . '+' '+' expression" },
    { 3, ms_transition_table_+109, 9, "rule 9: expression <- expression '+' '+' . '+' expression" },
    { 4, ms_transition_table_+112, 9, "rule 9: expression <- expression '+' '+' '+' . expression" },
    { 1, ms_transition_table_+116, 9, "rule 9: expression <- expression '+' '+' '+' expression ." },
    { 3, ms_transition_table_+117, 10, "rule 10: expression <- . expression '+' '+' expression" },
    { 3, ms_transition_table_+120, 10, "rule 10: expression <- expression . '+' '+' expression" },
    { 3, ms_transition_table_+123, 10, "rule 10: expression <- expression '+' . '+' expression" },
    { 4, ms_transition_table_+126, 10, "rule 10: expression <- expression '+' '+' . expression" },
    { 1, ms_transition_table_+130, 10, "rule 10: expression <- expression '+' '+' expression ." },
    { 3, ms_transition_table_+131, 11, "rule 11: expression <- . expression '*' expression" },
    { 3, ms_transition_table_+134, 11, "rule 11: expression <- expression . '*' expression" },
    { 4, ms_transition_table_+137, 11, "rule 11: expression <- expression '*' . expression" },
    { 1, ms_transition_table_+141, 11, "rule 11: expression <- expression '*' expression ." },
    { 3, ms_transition_table_+142, 12, "rule 12: expression <- . '-' expression" },
    { 4, ms_transition_table_+145, 12, "rule 12: expression <- '-' . expression" },
    { 1, ms_transition_table_+149, 12, "rule 12: expression <- '-' expression ." },
    { 3, ms_transition_table_+150, 13, "rule 13: expression <- . expression '^' expression" },
    { 3, ms_transition_table_+153, 13, "rule 13: expression <- expression . '^' expression" },
    { 4, ms_transition_table_+156, 13, "rule 13: expression <- expression '^' . expression" },
    { 1, ms_transition_table_+160, 13, "rule 13: expression <- expression '^' expression ." },
    { 2, ms_transition_table_+161, 14, "rule 14: expression <- . ERROR_" },
    { 2, ms_transition_table_+163, 14, "rule 14: expression <- ERROR_ ." },
    { 1, ms_transition_table_+165, 1, "rule 1: statement <- expression ';' ." },
    { 2, ms_transition_table_+166, 2, "rule 2: statement <- . ERROR_" },
    { 2, ms_transition_table_+168, 2, "rule 2: statement <- ERROR_ ." },
    { 1, ms_transition_table_+170, 0, "rule 0: statement_then_end <- statement END_ ." }
};
std::size_t const Parser::ms_state_count_ = sizeof(Parser::ms_state_table_) / sizeof(*Parser::ms_state_table_);

Parser::Transition_ const Parser::ms_transition_table_[] =
{
    { Parser::Transition_::SHIFT, 260, 1 },
    { Parser::Transition_::EPSILON, 0, 2 },
    { Parser::Transition_::RETURN, 0, -1 },
    { Parser::Transition_::EPSILON, 0, 3 },
    { Parser::Transition_::SHIFT, 261, 4 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 7 },
    { Parser::Transition_::SHIFT, 256, 64 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 261, 6 },
    { Parser::Transition_::EPSILON, 0, 7 },
    { Parser::Transition_::RETURN, 0, -1 },
    { Parser::Transition_::EPSILON, 0, 8 },
    { Parser::Transition_::EPSILON, 0, 62 },
    { Parser::Transition_::SHIFT, 262, 9 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::SHIFT, 59, 61 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 11 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::RETURN, 0, -1 },
    { Parser::Transition_::EPSILON, 0, 13 },
    { Parser::Transition_::EPSILON, 0, 17 },
    { Parser::Transition_::EPSILON, 0, 21 },
    { Parser::Transition_::EPSILON, 0, 24 },
    { Parser::Transition_::EPSILON, 0, 26 },
    { Parser::Transition_::EPSILON, 0, 30 },
    { Parser::Transition_::EPSILON, 0, 37 },
    { Parser::Transition_::EPSILON, 0, 43 },
    { Parser::Transition_::EPSILON, 0, 48 },
    { Parser::Transition_::EPSILON, 0, 52 },
    { Parser::Transition_::EPSILON, 0, 55 },
    { Parser::Transition_::EPSILON, 0, 59 },
    { Parser::Transition_::SHIFT, 40, 14 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 15 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::SHIFT, 41, 16 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::REDUCE, 0, 3 },
    { Parser::Transition_::SHIFT, 40, 18 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 257, 19 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::SHIFT, 41, 20 },
    { Parser::Transition_::DISCARD_LOOKAHEAD, 0, -1 },
    { Parser::Transition_::POP_STACK, 256, 2 },
    { Parser::Transition_::REDUCE, 0, 4 },
    { Parser::Transition_::SHIFT, 40, 22 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 257, 23 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::REDUCE, 256, 5 },
    { Parser::Transition_::DISCARD_LOOKAHEAD, 0, -1 },
    { Parser::Transition_::SHIFT, 258, 25 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::REDUCE, 0, 6 },
    { Parser::Transition_::SHIFT, 262, 27 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 28 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 29 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::REDUCE, 0, 7 },
    { Parser::Transition_::SHIFT, 262, 31 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 32 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 33 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 34 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 35 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 36 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::REDUCE, 0, 8 },
    { Parser::Transition_::SHIFT, 262, 38 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 39 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 40 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 41 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 42 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::REDUCE, 0, 9 },
    { Parser::Transition_::SHIFT, 262, 44 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 45 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 43, 46 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 47 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::REDUCE, 0, 10 },
    { Parser::Transition_::SHIFT, 262, 49 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 42, 50 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 51 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::REDUCE, 0, 11 },
    { Parser::Transition_::SHIFT, 45, 53 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 54 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::REDUCE, 0, 12 },
    { Parser::Transition_::SHIFT, 262, 56 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 94, 57 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::SHIFT, 262, 58 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::POP_STACK, 257, 1 },
    { Parser::Transition_::EPSILON, 0, 12 },
    { Parser::Transition_::REDUCE, 0, 13 },
    { Parser::Transition_::SHIFT, 257, 60 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::REDUCE, 256, 14 },
    { Parser::Transition_::DISCARD_LOOKAHEAD, 0, -1 },
    { Parser::Transition_::REDUCE, 0, 1 },
    { Parser::Transition_::SHIFT, 257, 63 },
    { Parser::Transition_::INSERT_LOOKAHEAD_ERROR, 0, -1 },
    { Parser::Transition_::REDUCE, 256, 2 },
    { Parser::Transition_::DISCARD_LOOKAHEAD, 0, -1 },
    { Parser::Transition_::REDUCE, 0, 0 }
};
std::size_t const Parser::ms_transition_count_ = sizeof(Parser::ms_transition_table_) / sizeof(*Parser::ms_transition_table_);

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 54 "Parser.trison"

void Parser::attach_istream (std::istream &in)
{
    assert(m_scanner != NULL);
    m_scanner->attach_istream(in);
}
// FiLoc const &Parser::GetFiLoc () const
// {
//     assert(m_scanner != nullptr);
//     return m_scanner->GetFiLoc();
// }

// bool Parser::ScannerDebugSpew () const
// {
//     return m_scanner->DebugSpew();
// }

// void Parser::ScannerDebugSpew (bool debug_spew)
// {
//     m_scanner->DebugSpew(debug_spew);
// }

// bool Parser::OpenFile (std::string const &input_filename)
// {
//     assert(m_scanner != nullptr);
//     ResetForNewInput();
//     EmitExecutionMessage("opening file \"" + input_filename + "\" for input");
//     bool scanner_open_file_succeeded = m_scanner->OpenFile(input_filename);
//     if (scanner_open_file_succeeded)
//         EmitExecutionMessage("opened file \"" + input_filename + "\" successfully");
//     return scanner_open_file_succeeded;
// }

// void Parser::OpenString (std::string const &input_string, std::string const &input_name, bool use_line_numbers)
// {
//     assert(m_scanner != nullptr);
//     ResetForNewInput();
//     return m_scanner->OpenString(input_string, input_name, use_line_numbers);
// }

// void Parser::OpenUsingStream (std::istream *input_stream, std::string const &input_name, bool use_line_numbers)
// {
//     assert(m_scanner != nullptr);
//     ResetForNewInput();
//     return m_scanner->OpenUsingStream(input_stream, input_name, use_line_numbers);
// }

// } // end of namespace Text

Parser::ParserReturnCode parse (std::string const &s, double &parsed_value)
{
    std::istringstream in(s);
    Parser parser;
    parser.attach_istream(in);
    Parser::ParserReturnCode return_code = parser.Parse(&parsed_value);
    return return_code;
}

int main (int argc, char **argv)
{
    if (argc >= 2)
    {
        double parsed_value;
        Parser::ParserReturnCode return_code = parse(argv[1], parsed_value);
        std::cout << "parsed string was \"" << argv[1] << "\"\n";
        std::cout << "return code was ";
        switch (return_code)
        {
            case Parser::PRC_SUCCESS: std::cout << "PRC_SUCCESS"; break;
            case Parser::PRC_UNHANDLED_PARSE_ERROR: std::cout << "PRC_UNHANDLED_PARSE_ERROR"; break;
            case Parser::PRC_INTERNAL_ERROR: std::cout << "PRC_INTERNAL_ERROR"; break;
        }
        std::cout << '\n';
        std::cout << "parsed value was " << parsed_value << '\n';
    }
    return 0;
}

#line 1947 "Parser.cpp"
